---
CVE: CVE-2015-1279
CWE: 190
announced: 2015-07-22 20:59:08.883000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An integer overflow vulnerability was found in the PDF Reader process that allows
  attackers to use large height and stride values that caused memory corruption issues (memory modification). Attempting to expand an image
  to a certain size resulted in a integer overflow.

bounty:
  date: 2015-07-21 14:00:00.000000000 -04:00
  amount: 5500.0
  references:
  - http://chromereleases.googleblog.com/2015/07/stable-channel-update_21.html
reviews:
- 1241493002
- 1159433007
- 1237723002
- 1162103004
bugs:
- 483981
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 1203cc8c7e82ab31d99190ccd595e813ac7ab9f9
  note: This contained a fix for the integer overflow vulnerability when expanding the image expansion as well as for heap overflow.
- commit: af1125ea286450ceecc23a37c6710bcf0b2d1ce6
  note: This commit reverted back the initial code committed with 1203cc8c7e82ab31d99190ccd595e813ac7ab9f9 because of compile errors on Linux GN Clobber.
vccs: 
- :commit: 76b563d2feed92ed328afb1f15e3466a9536b11b
  note: This is when the intial code was added and there were no checks to mitigate overflows.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: [4]
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: There doesn't seem to be unit tests explicity checking for the vulnerability. Even after the fix was added there was a lack of unit tests for the fix added.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
   Found by mlafon when attempting to expand an image to a size
   that overflows a 32bit integer. The overflow is not detected
   and can result in allowing for the modification of memory
   at certain positions.
  date: 2015-05-03
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This was found in JBIG2 which was in PDFium and
    it performed image operations and image manipulation routines.
  name: PDFium
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    An interesting event that occured while this fix was happening 
    was that there was a revert of the initial fix and also the fact that from 
    the commit logs it looks like there were multiple fixes occuring at that time
    which could mean multiple issues in the underlying code or that the team
    was doing a bug bash on the code.
  events:
  - name: Revert of PDFium commit that had fix
    date: 2015-06-03
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false 
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: When the image was expanded it was a form of input for the image manipulation library that let the heap and integer overflow occur.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: The image manipulation routines looked as if they were complicated in terms of allocation of size and how to determine the size based on input.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistakes seemed to stem largely from coding mistakes. It isn't clear but there
    was a lot of bugs fixed inside of one large commit which is possibly because they rebased
    it into that commit. There were multiple fixes and even reverts of the intial fix which points
    to the fact that the code maybe was not tested to the degree that it could have been. The input
    for the image maniplation affected both 64 bit and 32 bit platforms which was especially
    dangerous because it allowed for the modification of memory and the overflow vulnerabilities.
