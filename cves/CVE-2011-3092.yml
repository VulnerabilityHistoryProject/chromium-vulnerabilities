---
CVE: CVE-2011-3092
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 119
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2012-05-15
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The vulnerability was in Google's Javascript Engine, *V8*, in the way they
  handled regular expressions ("regexes").

  The implementation, which was in Javascript but called native C code, didn't
  handle "capture overrides" properly. This resulted in data be written to
  memory that it was not intended for (an "invalid write"). At best, this causes
  a crash. At worst, this kind of vulnerability can lead to arbitrary code
  execution as it is a "buffer overflow".

  The way that this could be exploited would be if an attacker had access to
  writing Javascript. This is possible in a Cross-Site Scripting (XSS) scenario,
  or if someone simply went to an attacker's page with Javascript that exploited
  this vulnerability.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt: 1000.0
  announced: 2012-05-15
  url: http://googlechromereleases.blogspot.com/2012/05/stable-channel-update.html
reviews:
- 10008104
bugs:
- 122337
repo: https://chromium.googlesource.com/v8/v8/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: b32ff09a49fe4c76827e717f911e5a0066bdad4b
  note:
vccs:
- commit: 0adfe842a515dd206cb0322d17c05f97244c0e72
  note: They were working on a fix for something else at the time.
- commit: 498b074bd0db2913cf2c9458407c0d340bbcc05e
  note: They were working on a fix for something else at the time.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From looking at the fix code it's clear that code was tested and they added
    a new test for fixing this vulnerability.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found using LangFuzz, then reproduced by hand. Nobody was able to construct an
    exploit, but they were also not comfortable stating that an exploit was
    impossible.
  date: 2012-04-11
  automated: true
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the description in the CVE and blog post.
  name: v8
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 1729e3c0ddf0c7a0f912ef38355d38afe284bf04
    note: |
      They worked on changing the responsibilities between the Javascript side
      and the native side. This is pertinent because that seemed to be the
      source of the breakdown of our vulnerability in that the Javascript
      assumed the native code had more checks than it did. Following up and
      reading the code review, they reference "offline" discussions - so this is
      probably mostly a co-located team within Google.
  - commit: 0f682143d9a50441188ae09cbd669f5389e44597
    note: |
      They worked with some memory management issues on the native code in this
      commit. No code review for this change, but it was a very large change on the
      native side, with some changes on the Javascript side.
  - commit: e1458503d13cbcc20ae619a1a4d6d0be9cb74bfb
    note: |
      Tons of code removed for this commit, related to how caching works. No
      rationale was obvious from the documents, but it was a very significant
      change code-wise.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events during this time.
  events:
  - event:
      name:
      date:
  - event:
      name:
      date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies: true
    note: |
      The vulnerability was largely about the interaction between native C code
      that implemented string functions, and the high-level API of Javascript. The
      fix was still in Javascript even though it was a memory corruption error.
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The vulnerability involved the parsing of a regular expression, which is
      a very complex language.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The coding mistake that was made was essentially an integer overflow that
    led to miscalculating memory buffers. The mistake was not in the underlying
    native code, rather, it was misusing the C API. So the fix was actually in
    the Javascript implementation of regexp.

    The vulnerability was introduced over two commits, but really by one person
    who was working on trying to fix this boundary condition. He wasn't
    working on a vulnerability per se, but they were working on a boundary
    condition and still missed this one condition.

    For this part of V8, a lot of decisions have been made about changing what
    is handled natively and what is handled in Javascript itself. Navigating
    what exactly are the responsibilities of native code versus the built-in
    Javascript libraries is going to be the key to preventing vulnerabilities
    here.
