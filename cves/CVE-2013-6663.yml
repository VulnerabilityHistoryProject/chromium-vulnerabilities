---
CVE: CVE-2013-6663
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-03-05 00:11:22.187000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The SVG implementation in Google's web engine *Blink* allows for the use of
  an object after it has been freed from memory. This was caused because
  resizing an SVG image could destroy the renderer which would cause a
  "use after free", crashing the engine.

  The vulnerability could cause a denial of service but its impact is limited
  beyond that due to the fact that there was only the resizing of the image
  between the free and its use which causes the crash.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-03-03 16:40:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2014/03/stable-channel-update.html
reviews:
- 178043006
- 184853002
- 184873002
- 180773004
bugs:
- 344492
repo: https://chromium.googlesource.com/chromium/blink
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: cace1e6998293b9b025d4bbdaf5cb5b6a1c2efb4
  :note: 'Moves renderer creation and null check after resize and adds test case'
vccs:
- :commit: 4f279ab0687237412a4c4dd17003b14002af8d11
  :note: 'Removed caching of SVG bitmaps and replaced it with live rendering'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There were tests before the vulnerability was discovered and a new test case
     was added with the fix in order to test for it in the future.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Atte Kettunen of OUSPG (attek...@gmail.com) found this vulnerability.
    He posted his ASAN-trace as well as a method to reproduce the bug.
  date: 2014-02-18
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on description in the CVE, blog posts, and commits
  name: SVG
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: d0825b804af9d5624d112903abbc2abbd8124e6e
    note: |
      A large section of code was added not particularly related to the
      vulnerability but increased security relating to svg images containing
      other images and fixed leaks with embedded images.
  - commit: 4a4ad61cf59b924d02ef2f504cfc675518eafb99
    note: |
      The original source of the vcc added a commit which switched SVG drawing
      to use containers specifies the test was manual which may have contributed
      to why this vulnerability went uncaught.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events at this time
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The coding mistake that occurred was due to the fact that the original author
    of the function did not realize, or forgot, that resizing a container could
    destroy the renderer and had misplaced his check for it. The same chromium
    developer who originally wrote the method also added the fix and an additional
    test case.

    The vulnerability was a part of the initial creation of the function and
    thus there could have been a small design mistake which led to it. Being
    more familiar with the SVG renderer likely could have prevented this mistake
    as it appeared to stem from a misunderstanding about the unintended
    side-effects resizing a container could have.

    The Chromium team uses the Modern Code Review (MCR) process whose
    effectiveness has come under question in recent years. The original author
    of the VCC, pdr, has also only ever had one documented code review and it
    was not for any code related to this vulnerability. These two factors may
    have also contributed to the vulnerability going undetected.

    Source: http://ieeexplore.ieee.org/document/7781793/
