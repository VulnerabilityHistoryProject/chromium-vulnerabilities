---
CVE: CVE-2015-1257
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-119
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-05-19 11:49:00.000000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: The graphics module used by the Chromium engine contained a bug 
             in the FEColorMatrix.cpp file that was caused by the lack of a 
             check for the amount of values in a matrix passed to the 
             createColorFilter method. Specifically, if this method was 
             passed a empty vector object it would cause a crash. This bug 
             was proven to at least cause a denial of service and also had 
             the potential to have a worse impact through a crafted document. 
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-05-19 11:49:00.000000000 -04:00
  amount: 1500.0
  references:
  - http://chromereleases.googleblog.com/2015/05/stable-channel-update_19.html
reviews:
- 1135023003
- 1087283002
- 1075413002
bugs:
- 468519
repo: 
fixes:
- :commit: 34d7c7dc4327329632881a6f8ce866d49d756eb3
  :note: 'Committed on April 16, 2015. The initial fix did not
          work as expected and was reverted. The new fix added
          checks at all locations the vector is used because
          it can not be guarenteed that a vector will contain
          a valid number of values'
- :commit: c1edcafcbe5b8fa20d7e1adb2d1a5322924d8df0
  :note: 'Committed on April 10, 2015. This commit added a check
          to make sure the size of values in a vector did not cause a crash.'
vccs: [a54e4354a49b4438b1494f156377b636d9ef44b0]
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: Automated unit tests were involved in this vulnerability. Unit
          tests did exist for the code but failed to catch the bug that
          was found. After the code was fixed, tests were added to ensure
          the bug was not re-introduced.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: The  crash was discovered through the use of a fuzzer designed by
          bug bounty hunter miaubiz. The fuzzer was designed to target the
          SVG component the Blink engine.
  date: 2015-03-18
  automated: true 
  google: false
  contest: nil
subsystem:
  question: |
    What subsystems was the mistake in?
    
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The mistake was made in the SVG component of Chromium's Blink module
          which is a fork of WebKit. Blink is the rendering engine that powers
          Google Chrome.
  name: Blink-SVG
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: At the time this vulnerability was introduced the development team working
          the Blink engine was working on optimizing it.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: This vulnerability came about because the developers assumed
          that a vector could never have zero values in it. However, 
          this scenario actually was possible. Defensively adding checks
          in the first place would have prevented this vulnerability.
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input: 
    applies: true
    note: The developers that designed this aspect of the SVG module
          assumed that a vector could never have a certain amount of 
          values in it despite the fact that vectors were generated 
          from user input.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: What ultimately led to this bug were assumptions made in the
          design stages. If the developers had put less trust in the 
          surrounding code they could have avoided this vulnerability all
          together.
