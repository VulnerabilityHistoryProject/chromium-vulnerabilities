---
CVE: CVE-2015-1281
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 200
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-07-22 20:59:10.693000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: Some Chromium extensions such as Adblock Pro executed JavaScript that
  would break CSP (Content Security Policy) checks.  This allows an attacker to load
  an arbitrary image which can potentially be used to grab user's sensitive information.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-07-21 14:00:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2015/07/stable-channel-update_21.html
reviews:
- 1146223008
- 1161823002
- 1163543002
- 1153233002
- 1162483002
bugs:
- 487155
repo: https://chromium.googlesource.com/v8/v8/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: dff368031150a1033a1a3c913f8857679a0279be
  :note: 
- :commit: 9fb1e9fc1f3829f9597f830e599fc40fadc84db3
  :note: Reimplement fix this time it passed tests.  Last commit for this fix.
- :commit: 7faa3067e4b664eb19a7a682697f5b387a130728
  :note: 
- :commit: 0f291b9f331a04c55e0d050bfaef20b1c6a6af1c
  :note: Revert attempt at fix as it was failing tests.
vccs:
- :commit: 52aa3b1bcf3079fc72a2b24a73dff78017eb5e7a
  :note: Bug fix for issue 200923002.  The issue was fixed by adding a microtask to
    load <img> elements.  It is also noted that the move to a microtask hides the
    stack trace for some exceptions.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: 
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: Reported by someone not in Google partial email address of masatoki...@gmail.com.
  date: 2015-05-12
  automated: 
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: 
  name: Blink->SVG
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 730e9312393f98d14a2571342c67779ece109df2
    note: Commit working closely with ImageLoader microtask yet vulnerability not
      discovered.
  - commit: 1717cf4bfefc8504ff6971d2e8fab1e14ea462bb
    note: Large change (more modification of code than addition) to ImageLoader.cpp
      file
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: Bug discovered.  Issue 341047 created to address a header not being built
      correctly.  This led to a large amount of refactoring which resulted in the
      vcc.
    date: 2014-02-05
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: Input can include (and does in this case) images. Fortunately checks already
      existed to address this but when they failed a vulnerability arose.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: Input from both plugins such as Adblocker Pro and from malicious users inputting
      images can lead to a breach of Confidentiality.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: This is a classic case of a bug fix causing another bug.  The clear solution
    to this issue is heavy testing applied after every change made to the code.  Tests
    were used with this code but tests cannot cover everything. Engineers may have
    felt rushed to fix the original bug causing them to not fully consider the implications
    of their fix.
