---
CVE: CVE-2015-1258
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-122
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-05-20 06:59:10.667000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A specific webm file was able to crash Chromium when opened in a tab. The webm caused a
  negative size parameter error in a Chromium dependency, libvpx. From what I can understand
  from the technical solution discussion on the issue report, this negative size parameter caused
  a buffer overflow.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-05-19 11:49:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2015/05/stable-channel-update_19.html
reviews:
- 1106303002
- 1124723002
- 1115503002
bugs:
- 450939
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 89a36094df177a7fb50cfab571409b7bf91202a2
  :note: 'This commit updated the libvpx dependency version'
vccs:
- :commit: fd5ba194dd83bace0a3623de2fae3fa7d2e5c6c8
  :note: |
    The changes in both fixing commits above update chromium to use a newer version of
    the libvpx dependency that has been updated to fix this CVE. The fixes themselves
    live within the libvpx repository and not in this chromium repository since it's an
    external dependency. This VCC is the earliest commit I could find that adds libvpx as a Chromium dependency
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 1
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The commit which fixed the issue, located at https://codereview.chromium.org/1106303002 does
    not include unit test changes. Since the code in question is in libvpx and
    not Chromium, I was unable to determine if the code had existing unit tests
    because there are no links to the files in question (vp9_deec_setup_mi,
    vp9_init_context_buffers, resize_context_buffers) at the issue page https://bugs.chromium.org/p/chromium/issues/detail?id=450939
  code: 
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The bug was reported by cloudfuzzer, and it was found by opening a specific .webm file in
    Chromium. The report does not give any details on the specifics of the webm and the file itself
    is not discussed in any of the reponses. It can be assumed that cloudfuzzer created the webm
    with the goal of causing a crash or other error in Chromium. It's not clear if the report
    was created automatically or manually. Given the volume of reports by the user cloudfuzzer, it may be
    automated.
  date: 2015-01-22
  automated: 
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: The mistake was in the building of a dependency, libvpx
  name: 
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    Since there are no identifiable VCCs due to the error being in an external library, there are no interesting commits to be listed.
  commits: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    Again, this vulnerability is caused by the Chromium team's build process for libvpx and was solved by adding another flag to the build.
    Due to the simplicity of this fix, I find it unlikely that any major events took place that caused or had an effect on this. Simply,
    a flag was not included that turned out to be important to avoiding buffer overflows.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: true
    note: |
      The fix was simply to specify the size limit of libvpx when building it to prevent overflows.
      It's reasonable to say that if such a vulnerability exists when the flag is not specified, it should
      be a required flag. The exclusion of it allowed for this vulnerability to exist, while making the flag
      required and well documented could have allowed the Chromium team to avoid the vulnerability's creation
      upon their addition of libvpx to Chromium.
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    On the libvpx side, it's likely that there are some coding mistakes allowing such a vulernability to exist
    or communication mistakes in not making the importance of the size limit flag not obvious enough. On the
    Chromium team's side, I would say that they were not thorough enough in their research of libvpx and the
    flags available to them when building it to be used within Chromium, as their omission of the size limit
    allowed for this vulnerability. Since this is a very niche vulnerability mainly caused by configuration
    issues of a third party dependency, the mitigations for the CWE are not particularly relevant or useful.
