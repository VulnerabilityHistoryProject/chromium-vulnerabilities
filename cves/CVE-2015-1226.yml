---
CVE: CVE-2015-1226
CWE: 264
announced: 2015-03-08 20:59:19.637000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like regular
  expressions is fine, and security phrases like invalid write are fine to
  keep too.
description: |
  Validation issue in the debugger. Does not restrict what URLs are available as
  debugger targets. This allows malicious users to bypass access restrictions.
  For instance, a malicious user can craft a chrome extension (e.g. adblocker plus)
  to run code such that it runs the debugger from using some crafted extension(s) that
  the user installed. The extension then opens a specific file that always exists
  (chrome-extension://[extensionid]/mainfest.json) and uses that to access other extensions
  and sensitive data.

  A particularly evil version is if you have installed an extension that gives chrome
  access to your shell. The example given is Secure Shell Extension. This allows the
  malicious extension access to your entire filesystem.

  Quite basically this bug, when exploited, gives a user access to everything that you can
  access through your browser and, if you accidentally gave it the opportunity, your computer.

  *** Thanks professor for this bug, this is actually pretty cool. ***
bounty:
  date: 2015-03-03 15:53:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2015/03/stable-channel-update.html
reviews:
- 942103004
- 910053002
bugs:
- 456841
repo: http://chromium.googlesource.com/chromium/src/+/
fixes_vcc_instructions: |
  Please put the commit hash in commit below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 409bf9d6104f83c80cd85bd261784b39cab8e93e
  note:
- commit: 9768ebe3814ebf553851a5005620c048d5f1e1c6
  note:
vccs: []
- commit:
  note:
- commit:
  note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you will add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the code answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the fix answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this does not happen again.
  answer:
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in answer, fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it is clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated flag can be true, false, or nil.
    The google flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Ended up being found by a project member <rob@robwu.nl>.
  date: 2015-02-09
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    In the extension debugger subsystem. Specific filepath...
    chrome/browser/extensions/api/debugger
  name: debugger
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    *** None here. Just two slightly different fixes committed ***
  commits:
  - commit:
      note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesnt need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.

    *** No specific major events that are not listed above. Just discovery, fix,
    bounty paid. ***
  answer: 
  events:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave applies blank or put false if you did not see that lesson (you do
    not need to put a reason). Put true if you feel the lesson applies and put
    a quick explanation of how it applies.

    Do not feel the need to claim that ALL of these apply, but it is pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Should have used defense in depth to limit the amount of damage that can be done
      once a malicious user has access. It would be good to make sure that extensions require
      some sort of authentication or authorization before it can access any sensitive data or
      apis.
  least_privilege:
    applies: true
    note: |
      Same idea as above. Do not give extensions extra permissions if you can help it.
      Limiting the amount of damage a crafted extension can do by giving it only what it needs
      to get the job done.
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Do not feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Failure in testing and planning. The issue being that a developler working on the debugger
    forgot to sanitize / whitelist possible inputs. This one slip possibly allows a malicious
    usre access to the system. Yet another reason to whitelist input from external sources (
    that is if we count extensions as external). Also, should have created a more secure system
    for the extensions. The fact that extensions get high level permissions is not good, and, even
    worse is that those extensions can be abused because of lack of compartmentalization of security
    (aka defense in depth).
