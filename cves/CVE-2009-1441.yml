---
CVE: CVE-2009-1441
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 119
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2009-05-07 13:30:04.780000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "This vulnerability was a heap-based buffer overflow accessible via Google
  Chrome's IPC messaging. \nThis could allow attackers to malicously access the Bitmap
  Renderer and cause a denial of service (application crash) \nor possibly execute
  arbitrary code via vectors related to a large bitmap that arrived over the IPC channel.
  This means that \narbitrary data inputs were not properly verified and sanitized
  when data was passed to the Renderer. This overflow could allow \nfor arbitrary
  execution meaning the attacker could control the system and perform more advanced
  attacks once they know what inputs\nare controlled by the user and how the system
  handles input data.\n\nThis vulnerability would only be accessible after an attacker
  has gained control of the system and jumped here from another \npreviously discovered
  vulnerability. This is due to the subsystem not being customer-facing, and no actual
  user input is passed here.\nThe attacker would have to exploit other inputs to the
  system to utilize this heap overflow, due to IPC messages.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 94006
- 92118
- 92064
- 99033
bugs:
- 10869
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 025b3ef66aa030bb8a1e5f78a7d1e92696219649
  :note: 
vccs:
- :commit: 3178f4e296e24781be5fbcc4ba91815e08c78897
  :note: 
- :commit: 4c870b4013b3cf658c40e2c7b98e0a419ae7236f
  :note: 
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There was a unit test for the original code, as well as for the fix that was
    implemented.  The fixed unit test was modified to test for this overflow case.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability was discovered by a person with the chromium email extension.
    The exact method of discovery was not given but it appears to be via code auditing.
  date: 2009-04-23
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The vulnerability is labelled as being in the Browser Backend. The source structure shows
    the vulnerable files contained in the common section of the Chrome source.
  name: 'Area-Misc Area-BrowserBackend

'
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 4c870b4013b3cf658c40e2c7b98e0a419ae7236f
    note: 'A lot of refactoring and decoupling of subsystems here.

'
  - commit: 39b7b06790a776ee2247f391b1b2e3af1a335503
    note: "The methods for logging information for IPCs was cleaned up here, along
      with refactoring \nto reduce errors in the ways IPCs were created and cleaned
      up after use.\n"
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: The team was doing a lot of refactoring and moving around of headers and
      methods for IPCs within the Browser Backend.
    date: 2009-02-04
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: Many layers of verifying inputs, not just a single time.
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: Inputs to the system should be verified at every step of use.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: Inputs could take several forms or sizes and should be known.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    There was mainly the input sanitization and verification mistake, this was probably just lazy coding, as that is common.
    The fix of verifying inputs to methods is being done with the vcc. However there was a flaw with the design of the system as
    the team later mentioned that the vulnerability would only be possible with the interactions with other systems via IPC messages,
    therefore they should not have trusted the data given to them to be well formed, as in this case it can lead to vulnerabilities.
