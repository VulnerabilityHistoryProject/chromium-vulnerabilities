---
CVE: CVE-2016-1711
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 346
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-07-23 15:59:07.827000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Google's fork of WebKit, Blink, implements a loading mechanism for web frames
  that doesn't properly prevent navigating through a frame while detaching an
  object that helps load content and other documents into the frame.
  
  What specifically happens is this: starting a document load in the middle of
  detaching a loader object will cause a new loader object to be cleared
  prematurely. If an attacker is both clever and quick enough, they can set up
  their own loader object and use it to load a malicious webpage, completely
  bypassing Chrome's "same-origin policy", which normally prevents webpages from
  accessing data from webpages that don't originate from the same place.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-07-20 14:48:00.000000000 -04:00
  amount: 7500.0
  references:
  - http://chromereleases.googleblog.com/2016/07/stable-channel-update.html
reviews:
- 2079473002
- 2103703004
bugs:
- 617495
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: be655fd4fb9ab3291a855a939496111674037a2f
  note: Involves a slight rearranging of method calls.
vccs:
- commit: ee9517e8ef4695d0fa2bdbdbc87237bc75022000
  note: |
    One of the impacted methods was introduced here. Another impacted method was
    slightly modified as well. DocumentLoader functionality for Frameloader was
    first added in this commit.
- commit: 66ad73d642b9cf824f4b1f300811ed1ee6963da7
  note: |
    Small modification to one of the impacted methods. The developer of this
    commit was working on something slightly related to the vulnerability.
- commit: 1948aefa8901dca0ccb993753fca00b15d2a6e25
  note: |
    The developer of this commit was working on a very similar issue that arose
    prior to this vulnerability being discovered, which is documented in
    CVE-2016-1697. The developer of this commit is the same developer who
    committed the fix.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    No automated tests were created for this vulnerability, nor were any tests
    modified. There do not seem to be any tests for the impacted code in the
    repository.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found by an independent security researcher using a handmade exploit. The
    issue was directly related to a prior bug found by the same researcher. This
    issue was verified by an employee.
  date: 2016-06-06
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the CVE entry and the bug report.
  name: third_party/webkit (Blink).
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits: []
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The most noteworthy event to occur in this vulnerability's history is
    possibly the previous bug found by this vulnerability's discoverer.
  events:
  - name: Bug 613266 (CVE-2016-1697) discovered.
    date: 2016-05-19
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      If the loading mechanism fails to prevent malicious activity, then the
      attacker can also bypass other safety mechanisms, including the
      same-origin policy.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      To an extent, this vulnerability involves being too trustworthy of webpages
      under certain circumstances.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main mistake made in this vulnerability was more or less a resource
    management issue combined with a mistake in logic. First, detaching a
    document loader was not handled correctly, leading to some functionality
    remaining in the system without the normal protections against exploits.
    Second, some of the necessary operations for detaching the document loader
    either weren't occurring at all or weren't occurring where they needed to.
    All of this combined to make for a serious problem in the code base. It was
    also clearly a complex issue to resolve, as it took two separate bug reports
    (and consequently two CVE entries) before the vulnerability was properly
    fixed.
