---
CVE: CVE-2016-1613 
CWE: 416 
announced: 2016-01-25 
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Referencing memory after it has been freed can lead to a variety of behaviors including crashing, corrupting data. 
  In this specific CVE, due to the improper handling and tracking of 2 objects, after the destruction
  of these objects from memory, they are accessed. These cause use after free vulnerabilities found 
  that allow remote attackers to cause a denial of service ( Availability attack ) as well as the potential 
  for other unspecified impact.
bounty:
  date: 2016-01-20 18:12:00.000000000 -05:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/01/stable-channel-update_20.html
reviews:
- 1579783004
- 1569663002
- 1564773003
- 1566963002
- 1563203002
bugs:
- 572871
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
 - :commit: 806bd1cae5a92505ca052bb1406b2dd60ce06b41
   :note: |
     Added some new logic in various related files to handle the destructing of objects as well as editted the testing files. 
vccs: 
 - :commit: 5110c4743751145c4ae1934cd1d83bc6c55bb43f
   :note: |
     Initial commit
vccs_note: |
     I believe that there isn't any true vcc for this. Rather the code was missing from the start of this module
     the proper handling of the PDF related objects that had the potential to be referenced after destruction. 
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Yes automated unit tests were involved in this vulnerability. The original code unit 
    test does appear to have tests involving this module. 
  code: true
  fix: true
  note: |
     Yes the testing files in the final patch were changed.  Numerous lines of code were replaced with
     new lines most likely to adapt for the refactored code.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The user who reported the bug was likely going through old
    bug issues that were reported and found that one of the bugs (issue 537173) was still
    reproducable. 
  date: 2015-12-29
  automated: false 
  google: false 
  contest: false 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    It's in their PDF subsystem, which is a part of their Plugins system. 
  name: |
    PDF
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits: 
  - commit: 
    note: |
     What I do think is interesting is the time it took to fix the bug(especially since it was high priority) as well as the fact that the error wasn't reproducible when built with clang. But with gcc on linux. 

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    This file underwent quite a few code cleanups within a half year period after it's initial commit. However, none of these cleanups seemed to have noticed the vulnerability despite some clean ups related specifically to memory management and accessing of pointers and deletion of pointers.
  events:
  - name: cleanup - Do not check pointers before deleting them commit 21bf242a31eff79f754c5e9c3b41c52e33483bb0 
    date: 2015-07-15
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false 
    note: 
  least_privilege:
    applies: true 
    note: |
     If some kind of object you're working with has the ability to be destroyed. Users shouldn't be able
     to access this object or easily access it. This deters any potential exploitation. 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
     It was an implementation / design mistake. Since they are working with memory management, 
     they should have when writing this code to begin with handle the proper accessing of these
     objects they create that are destroyed. This isn't the first CVE I've seen from them that they've
     done this. This makes me wonder if Use After Free vulnerabilities aren't that commonly thought of
     while coding or if they just didn't plan for it in their security procedures. 
