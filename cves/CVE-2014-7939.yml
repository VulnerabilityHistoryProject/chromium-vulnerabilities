---
CVE: CVE-2014-7939
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 79
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-01-22 17:59:20.117000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  If Harmony Proxy (a specific JS Proxy) in Google's JavaScript Engine V8 is
  enabled (disabled by default), it allows remote attackers to bypass the Same
  Origin Policy via JavaScript code with Proxy.create and console.log calls.

  The Same Origin Policy is an immensely important concept in web, it means that
  a web page cannot access data from another web page unless they are of the same
  origin -- calculated based off of URI scheme, host name, and port number.

  This allows access to the victim's URL as a proxy, and potentially committing
  information disclosure of user/victim data right to the attacker's own console.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-01-21 15:11:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2015/01/stable-update.html
reviews:
- 1529303003
- 1413193010
- 1544303002
bugs:
- 399951
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 6f9d55e0e902b20bcb8a38be6721f498a2a973ab
  note: ''
- commit: 28523e2cf18ee02f503e1792788b88d828968055
  note: ''
vccs:
- commit: ed6f4545a2a345697e07908c887333f5bdcc97a3
  note: |
    This commit actually is the initial fix discussed in the following bug
    tracker https://bugs.chromium.org/p/chromium/issues/detail?id=399951.
    It adds the nosniff option onto the x-content-type-options like proposed,
    however this did not end up being the real fix. It fixed it at the time,
    but also added an if check that had to be heavily modified later on to
    account for another layer of security mitigations related to mime sniffing.

    Mime sniffing is when the browser 'sniffs' an asset to check it's appropriate
    file format. And so bad things can happen here, like the attacker disgusing an HTML
    file as a JPG or zip file with malware in it. The browser would render it as
    HTML, allowing the attacker to perform XSS. The nosniff option disables MIME
    sniffing altogether at the browser level, meaning the browser is required
    to use the MIME type sent by the server.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Looking at the code reviews and the commits, it's very obvious there
    were multiple unit tests involved with this vulnerability (both modified and
    created).
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    It's unclear whether this was found via an automated test or by hand. Since the
    given situation in the bug report is oddly specific, and that test files were
    updated in the fix commit, I'm going to assume it was not found by their unit
    tests at the time. It is noted that it's not an immedaite risk because the proxy
    is disabled by default, however the poster felt uncomfortable enough to report
    it as a possible risk.
  date: 2014-08-03
  automated: false
  google: true
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on description in the bug report.
  name: Blink > JavaScript
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 5216c4cf105d4713d7c7e829d6f3c76bd55b275c
    note: |
      This commit added error event firing for MIME type blocking, which is
      related to the solution to the bug.
  - commit: 533c56e94324246f68436a78918bbfa5770a8891
    note: |
      This commit shows the team was dealing with issues involving Same Origin
      and CORS. The bug was a direct violation of Same Origin Policy.

      This commit dealt with enabling SRI (Subresource Integrity) only for same
      origin and CORS content. SRI is a security feature that allows browsers to
      verify fetched files (i.e. a CDN) are delivered with data integrity intact.
      Taken from the commit message, SRI should only work on same origin or CORS
      to "avoid security issues where SRI could be used to check the content of
      otherwise secret cross-origin resources."
  - commit: 68588b94a477621f608620ef8d36459c81e00e11
    note: |
      This commit directly deals with MIME sniffing via script tags. It's interesting
      to see the team's progress with MIME issues.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    I found that the Chromium team was investigating what the Mozilla team
    was up to while trying to fix this bug, and actually ended up going with their
    solution as well.
  events:
  - name: Collaboration with Mozilla
    date: 2015-10-13
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The Chromium team had to go above and beyond to prevent this kind of
      scary XSS via Proxy. They had to go through multiple solutions, the
      nosniff option and prototype freezing, to finally nail it down.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The Chromium team implemented the nosniff option at first which is essentially
      not trusting external file formats and only accepting what the server
      says it should accept.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability seemed to be a widespread problem involving MIME sniffing.
    This issue with MIME sniffing rised up against other browsers as well, most
    notably Firefox. In the bug report, the Google employees are specifically
    referencing the mozilla bug report forum and their proposed solution. It's
    really quite interesting to see collaboration between the two giant browsers.
    The Chromium team debated with other options for the fix, but ultimately ended
    up going with Firefox's proposed solution of locking down the window's
    prototype chain.

    The fix for this originally ended up being quite simple, by adding a nosniff
    option in HTTP headers, but eventually the bug was re-opened and a new, more
    complicated, solution needed to be found (mentioned above). It seems the HTTP
    header option was merely a step in the correct direction (this is now
    default in modern browsers).

    As for the CWE entry, I found it very diffiuclt to pin down exactly which
    broad CWE category this fits into. After much silent debate, I decided to
    categorize it as XSS because ultimately, external JS code was being executed
    that was not meant to be executed (even if it was via a proxy, aka not via
    the site directly). It also directly relates to a violation of the Same
    Origin Policy. Even though it's a bit strange, and therefore doesn't
    necessarily have the mitigations recommended for broad XSS, there are some
    that are still aparent. For example, I think the most applicable mitigation
    is actually Strategy: Attack Surface Reduction. This basically involves
    keeping in mind all potential areas where untrusted inputs are possible,
    including things read from the network, URL components, external systems, etc.
    This relates to the fact that the Chromium team had to think about a Harmony
    Proxy as an area with untrusted input.
