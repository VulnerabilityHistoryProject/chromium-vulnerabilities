---
CVE: CVE-2016-1643
CWE: 361
announced: 2016-03-13 18:59:02.983000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The ensurePrimaryContent function in Google's Webkit in Blink, as used in Google
  Chrome, does not properly maintain the user agent shadow DOM (Document Object 
  Model), which allows remote attackers to cause a denial of service or possibly
  have unspecified other impact via vectors that leverage "type confusion."  This
  exploit, when ensurePrimaryContent crashes, gives the attacker semi-reliable
  control of the EIP (extended instruction pointer" for the stack.)  As stated
  previously, this will allow a skilled user to possibly instruct the system to
  execute arbitrary code or cause a denial of service.  Control of the stack means
  the user has control over what the CPU will execute next.
bounty:
  date: 2016-03-08 19:01:00.000000000 -05:00
  amount: 5000.0
  references:
  - http://chromereleases.googleblog.com/2016/03/stable-channel-update_8.html
reviews:
- 1732753004
- 1756363003
bugs:
- 589838
repo: https://chromium.googlesource.com/chromium/src/third_party/Webkit
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
  - 2386a6a49ea992a1e859eb0296c1cc53e5772cdb
    note: |
     ImageInputType::ensurePrimaryContent should recreate UA shadow tree.
     Once the fallback shadow tree was created, it was never recreated even if
     ensurePrimaryContent was called.  Such situation happens by updating |src|
     attribute.
     BUG=589838
     Review URL: https://codereview.chromium.org/1732753004
     Cr-Commit-Position: refs/heads/master@{#377804}
vccs:
  - 1717cf4bfefc8504ff6971d2e8fab1e14ea462bb
      note: |
        This commit is when most of the code transitioned to using the shadow DOM approach.  There was a large code
        review (https://codereview.chromium.org/481753002) that introduced the ensurePrimaryContent() function
        and some tests to make sure everything was working properly.  It is interesting to note that this commit
        specifically mentions that a lot of code would need to be rebased because of this change.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: Unit tests were used to find the code (cloudfuzz@gmail.com reported the issue originally).
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found using the cloudfuzz automated service (cloudfuzz@gmail.com reported the 
    issue originally.) Several Google employees were able to reproduce the issue 
    using cloudfuzz and cluster-fuzz.  
  date: 2016-02-25
  automated: true
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This was found in the Webkit third_party code.  Webkit is an open source web 
    browsing engine. There isn't really a subsystem in this case since the issue
    occurred in Webkit/Source/core/html, which is likely the primary component 
    of Webkit (based off the directory name 'core').
  name: Webkit
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: eacf7182612681e86152431ecda050e459bc2355
    note: |
      This commit is interesting and pertinent because it deals with movement and 
      renaming of portions of the shadow DOM system, which is the system that didn't
      update correctly, and was eventually found to be be exploitable when the
      shadow DOM became out of sync because of images that failed to load (if the
      image src updated the shadow DOM was never updated).
  - commit: e2b998a109b5d231dedf2d7c6287d4191b51b7e1
    note: |
      This commit in and of itself isn't particularly interesting, but the fact that
      it was the last commit to the file for a year before the vulnerability was found,
      and capped off a year or so of prior work to reorganize and restructure the image
      rendering system seems important to me.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    To me it was just interesting to see that the repository work consisted of basically
    the same 3-4 individuals doing major restructuring and rework of the image rendering
    system.  The events themselves happen over the course of late 2014 through early 2015
    and culminate in the fall of 2015.  Refactoring took place, starting right after the
    major shift of introducing a shadow DOM system.  Many functions, file locations,
    naming conventions, and even code cleanup actions were performed over this period of
    time.  It is really interesting to note that the team did not seem to change during
    the time, possibly a handoff occurred in the middle range.
  events:
  - name: Handoff of code refactoring goes from dsinclair@chromium.org to tkent@chromium.org
    date: 2015-09-10
  - name: Last cleanup commit by dsinclair@chromium.org
    date: 2015-04-30
  - name: Refactoring of code begins by dsinclair@chromium.org
    date: 2015-02-06
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      The shadow DOM system assumed that the DOM was being updated at all times.  The function
      to update the DOM when user defined images changed did not recreate the tree, leading
      the system to point to insecure areas of memory.  The input was not checked (the image
      src location) and the DOM was not updated, which lead to the security hole.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This bug was introduced in one fell swoop after a large code rebase.  One user worked on implementing
    utilizing a shadow DOM for the first time and did not account for when the shadow DOM itself was missing.  It
    was seemingly a simple oversight on the part of the user, and also all the users that reviewed the changes.
    The change impacted many files.  It seems that the decision to utilize the shadow DOM framework is still in use
    today.  So this commit introduced the newly accepted framework into the system, and the bug that accompanied it.
    The mistake could have likely been avoided had the change been smaller and split up over more reviews.  Coding
    and reviewing fatigue are a real thing, and as stated before, this was likely just an oversight.