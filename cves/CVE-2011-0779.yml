---
CVE: CVE-2011-0779
CWE: 789
announced: 2011-02-04
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Google Chrome does not properly handle a missing key in an extension, which 
  allows remote attackers to cause a denial of service (application crash) via
  a crafted extension.  When an extension is packaged, the extension is assigned
  a unique key pair. The extension's ID is based on a hash of the public key. 
  The private key is used to sign each version of the extension and must be secured
  from public access.  A variable that gets initialized in the extension unpacking
  service is sized based off of the extention's header signature size, so if a hacker 
  removed the signature (by providing an empty key), it would get initialized to zero 
  and cause a crash of the system since it was unexpected, leading to a denial of service.
  Basically, the bug was introduced in the process of refactoring the code to pull the 
  logic for unpacking extensions out of a service that was too complex, and the writer of 
  the new file to handle the new logic forgot to check to make sure that a variable being 
  initialized would not be initialized to 0 bytes.  
bounty:
  date: 
  amount: 
  references: []
reviews:
- 4723007
bugs:
- 62791
repo: https://chromium.googlesource.com/chromium/src/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
  - ffeada1f2de5281d59ea48c94c4001a568092cd3:
      note: |
        The fix for this was really small and very easy to understand.  The author of the fix
        simply added a check to the code to make sure that the header signature size was not zero.
        If the signature size was zero, the code would return false and report a failure rather
        than letting it continue.
vccs:
  - af1277b79f621b307fbcff76768cd7a225841e9e:
      note: |
        The entirety of the sandboxed_extention_unpacker.cc and .h files were written and developed for
        this very large code change.  It seems like the first step of a large change to refactor the way
        chrome handled unpacking extensions within the ExtensionService.  This commit essentially introduced
        the bug because this file did not exist previously.  Logic was introduced to check for other conditions
        surrounding the sizing of the key (based on the key size), but no logic was introduced to 
        make sure the key wasn't zero.  It was likely just an oversight.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    I did not see any unit testing services related to finding this bug besides
    files named test_* in the same directory as the code.  These look like unit
    tests. I can only assume no new tests were introduced since the code review
    only points to the fix for the code not any unit test.
    
    As far as automated testing is concerned, in the code review for the fix 
    the author of the code review mentions that the fix was a simple fix for a 
    report.  From the word 'report' (which the author of the message used in the
    code review), I am lightly concluding that this was automatically 
    found by some tool but the tool is unnamed in the review and in any of the 
    commit messages.  No automated tests could be referenced by email signatures 
    either.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    As mentioned in the unit test block above, it is unclear how this was found.
    In the code review for the fix the author of the code review mentions this:
      Message:
      Simple fix for a report we got this morning.
    From the word 'report' I am lightly concluding that this was automatically 
    found by some tool but the tool is unnamed in the review and in any of the 
    commit messages.  No automated tests could be referenced by email signatures 
    either.  So I am not sure how this was found.
  date: 2010-11-11
  automated: false
  google: true
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This was found in the chrome extensions directory.  I assume that the extensions
    directory pertains to all code that deals with all extension related activity
    (loading, unloading, rendering, verifying).
    Full url: https://chromium.googlesource.com/chromium/src/chrome/browser/extensions/
  name: extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: fb3ef9384cc76c4237f98e5aa38d2689cc7b60cd
    note: |
      The author of the original code that introduced the bug keeps refactoring some
      code here, having to do with pulling out Crx related items from the ExtensionSerivice.
      It looks like the author is implementing a new UI based system piece by piece.
  - commit: 25e02aca12eabfdcd8ba0506ce242cf91ef54150
    note: |
      The author rolls back the previous commit (the one mentioned above).  It seems like
      since the area the author is working on is so large, that it is hard to find all of
      the issues before pushing a fix.  The author later goes on to implement it correctly
      (Windows UI first, Linux UI is implemented later).
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    It looks like in the space of the original bug being introduced to when the fix was
    submitted (2009-07-30 to 2010-11-11)) there was a major push to implement a new interface
    for Chrome Extensions.  Everyone looks to be very jovial (lots of funny messages in the
    commits, but also lots of bugs because of a new interface).  The bug this CVE is based on
    just was one of the ones that didn't get caught for a little over a year.  The team looks
    like it was always the same 5-6 people over the course of the year.  All had Google or
    chromium emails.  Lots of reverts and reapplications of commits.
  events:
  - name: aa@chromium.org forces an app's origin to be the origin of the URL the crx (package or extension) is from.
    date: 2010-03-18
  - name: erikkay@chromium.org loosens an apps's origin constraints.
    date: 2010-03-19
  - name: Add signing and verification to ownership API.
    date: 2010-08-31
  - name: Add check when unpacking extensions for a null key.
    date: 2010-09-15
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      The vulnerability arose because the input (a user developed provided signed 
      extension with a header) was trusted to have a non-zero header size.  This lead
      to a situation where a malicious attacker could create an extension with a zero
      size header and crash Chrome, or just lead to a  misuse case where an unknowing
      or inexperienced developer could create an extension with a zero size header
      and cause the system to crash.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: |
      The input to the key was trusted to have a non zero size but the input
      itself was complex.  There were many other checks being performed regarding
      the size of the header (if it was too big) but because this was an edge
      case it seems all involved forgot to check that it could be zero.  This
      likely occurred because there were many cases to test for because of a 
      complex input.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    There were many other tests being performed in the code around the header size, a
    test to check if the header was size zero was never included however.  As far
    as I could tell the author of the code was refactoring a large portion of the 
    system.  What they could have done better was to not assume user provided
    content was not any range of unpredictable values (like 0) (the header is 
    attached to an extension which can be developed by users).  However, because
    other checks were in place in the code to check the header size, I think that
    this edge case should have been considered by the team too.  Especially when
    initializing a variables size, some checks should always be if the size is based
    on some kind of user driven input.  If the size is driven on user based input,
    could the user find a way to provide a huge value (overflowing a buffer), or
    could the user provide a negative value, or even a zero value.  The team should
    have checked all three use cases rather than just the max size case.