---
CVE: CVE-2016-5150
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-09-11 06:59:05.380000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Properties are variable attributes of an object. Like color is a property for
  for a Bird. Properties can also be inherented from their perent class. 
  For example, Bird can inheret properties from the Animal parent class.
  
  
  Key-paths are a way of storing uninvoked references to properties.
  This means they refer to a property itself rather than to that propertyâ€™s value. 

  The vulnerability was in Google's Javascript Engine, *V8*, in an API 
  implementation written in C. Getters using key-paths were
  not restricted to inherited properties, allowing getters on prototypes
  to be executed. 

  This created a use-after-free vulnerability. Use After Free specifically refers to the 
  attempt to access memory after it has been freed, which can cause a program to crash
  in the best case. 
  Worst case, since this is a vulnerability in a JavaScript feature, attackers could 
  execute arbitrary code or even enable full remote code execution capabilities.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-08-31 15:50:00.000000000 -04:00
  amount: 5000.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop_31.html
reviews:
- 2283023002
- 2255413004
bugs:
- 637963
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: fb18204c77e3f6e43ce05dd3ce24f00e0201bac1
  :note: ''
vccs:
- :commit: 4a6e97130def2b7f2827e5f0a2da58af857fee1d
  :note: |
    This was the VCC. Used git blame to backtrack all edits to the specific lines where vulnerability was discovered. 
    This commit actually created the file in which this vulnerability was found, IDBBindingUtilities.cpp.
    '* bindings/v8/IDBBindingUtilities.cpp: Added.'
    The first person to touch the lines in question after this commit had identified the vulnerability and 
    was working on the fix.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    In the VCC it states, "The bindings tests show us that the generated bindings are what we expect."
    While there were unit tests performed, they likely did not test for the specific vulnerability exploits.
    Almost every commit that is dedicated to fixing this bug improved the automated tests.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: Tried to access bug report, permission denied. The earliest commit that I found with reference to this bus was committed on Tue Apr 28 2015
  date: 
  automated: 
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on the description in the CVE and path to source file.
  name: v8
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: c65e88c084b14e6478d74781096e9d91a73c6f0e
    note: |
      Lots of logic was removed and added to the file. 
      Added 163 lines of edge case testing for our vulnerability, clearly these edge cases had been missed and
      both the functional code and the testing were introduced in this commit.
      It was interesting to see even in such large scale productions, effective unit tests that cover all edge cases are
      difficult to create yet extremely important. 
  - :commit: eb8adaaf4f33fc4f6eb4d9d612916ac5d4f32075
    :note: |
      Logic pertaining to null pointers was added. This was interesting as the Use and Free flaw has to do with access to 
      dead memory, and this commit had its hand in fixing just that. 
      Again 228 lines of testing was introduced, demonstrating further edge cases were discovered and taken care of.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events during this time.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: This lesson is applicable as the system should run security checks at several levels, even redundantly, to ensure the system has not been exploited. 
  least_privilege:
    applies: true
    note: End Chrome users should not have access to the getter methods relevant to this vulnerability.
  frameworks_are_optional:
    applies: true
    note: |
      This vulnerability was introduced via the includion of the IndexedDB API. Although the bug report is hidden,
      if it were the case that the developers of this library were unaware of specific
      edge cases that lead to the vulnerability. 
      If the Chrome developers had built it from scratch, they would have known of the potential threat. 
  native_wrappers:
    applies: 
    note: 
  distrust_input: 
    applies: true
    note: |
      The whole premise of this bug is that a malicious user could try to access memory that had already been freed.
      By sanitizing and validating all user input, the developers were able to determine if that happening and prevent it.  
  security_by_obscurity:
    applies: true
    note: Clearly, with a deeply obscured architecture, it would deter potential attackers from being able to access levels of the system that they need to exploit.
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    As the bug report is not available, it is not clear whether this was a known issue
    with the library, or if it was specific to v8's implementation of it.
    If it were the latter, the mistake causing this vulnerability was improper implementation of 3rd
    party library, IndexedDB, as the Google developers failed to restrict certain key-path evaluations, 
    specically getter calls made to prototypes. 
    
    On the other hand, if the library unknowingly contained the bug, then IndexedDB would
    be at fault for not testing all edge cases when it came to their library's security.  
