---
CVE: CVE-2011-2798
CWE: 264
announced: 2011-08-02 20:55:02.253000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 
  Google Chrome before 13.0.782.107 does not properly restrict access to internal schemes,
  such as Google DevTools. 
  Chrome DevTools are a set of web authoring and debugging tools built into Goole Chrome. 
  There are several ways to open Chrome DevTools, but all of them have to be authorized 
  by the user manually (click menu --> open devTools, or right click on the page --> open devTools)
  However, this vulenrability allows DevTools to be navigated/opened by http protocol, example,
  enter the URL chrome://dev-tools in the nav bar would open DevTools. 
  Therefore, DevTools can be opened hiddenly by using html iframe tag - iframe is used to
  embed another document within the current HTML document
  Example <iframe src="chrome://devtool"></iframe>

bounty: 0
  date: 
  amount: 
  references: []
reviews:
- 7275032
- 7292014
bugs:
- 87815
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: ce891a86763d3540e2612be26938a6163310efe0
  :note: 'Prevent chrome-devtools and chrome-internal schemas from iframe-able'
vccs: 
- :commit: 38b592904f582daacd833b767b3cce3d1c211068
  :note: 'This commit began the process of blocking specific schemes from being 
  accessile by normal contents (iframe-able), including chrome extension scheme. However, DevTools 
  was not registered at this commit until this vulnerability was introduced.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module

    For the "fix" answer below, chec if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: 
    There were not any unit tests involved in this vulnerability
  code: 
  fix: 
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    sirdarck...@gmail.com discovered that chrome DevTools could be embed into HTML
    document using iframe.
  date: 
    Jun 28 2011
  automated: 
    False
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: 
  name: |
    V8
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      This vulenrability is a key to open the door to the internal of the Chrome client. 
      Fixing this vulenrability helps preventing attacker to go any further if a site is 
      compromised, XSS for example.
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting
  answer: | 
    I think this was a simple mistake by the dev team forgetting to regigster 
    internal schemes as display-isolated scheme. Display-isolated pages are not 
    accessible by normal content (iframe-able), and should be unable to script anything 
    but themselfves.
    As I pointed out in the vcc, chrome_ui_scheme and chrome_extension_scheme were registeredk
    as display-isolated scheme, but not the DevTools until this vulenrability was reported; 
    plus another vulenrability that allowed user to inject css to the DevTools.
    https://bugs.chromium.org/p/chromium/issues/detail?id=87817
    In addition, large code base and miscommunication might be other reasons that produced 
    this vulnerability, where some components were released later than other.