---
CVE: CVE-2015-1220
CWE: CWE-146
announced: 2015-03-08 20:59:13.327000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  In Google Chrome, there were multiple occasions where after a memory location is freed,
  the location is then attempted to be used again. In this specific vulnerability, a 
  location used for a GIF decoder is attempted to be used again after a gif fails to be
  decoded. If a remote attacker chooses to attempt to take advantage of this vulnerability, 
  they could cause a denial of service for other users or other unpredicted behavior. 
  The way that it is anticipated that an attacker would take advantage of this is by a 
  "crafted frame size" in a GIF. Any frame size larger than the screen size of a device 
  could cause the broken GIF to triggers a bug in the decoding code for the GIF.
bounty:
  date: 2015-03-03 15:53:00.000000000 -05:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2015/03/stable-channel-update.html
reviews:
- 868803008
- 813943003
bugs:
- 437651
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 4f9c9adef4036aff60b734b4a0045c43c320fe1d
  :note: 'This commit handles both the files code and the unit tests'
vccs: 
- :commit: 217add8aebf21a09e5bae70843f103e9b51cfdec
  :note: 'This commit is the last time that the affected code was edited'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    This code was unit tested after the vulnerability was found and corrected.
    In fact, in what I believe to be the vcc, the author wrote that it was
    'simple refactoring, no tests' on the part of the code that they edited. While 
    they did not introduce the issue, they would have noticed it earlier had they 
    added tests into the framework at that time.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    I am unable to see a large amount of data that was generated with the original
    report when google tried to recreate the issue due to a lack of permission. 
    The original user that reported the bug did not say much in his post other 
    than the step by step guide for recreation. They had a gif that they provided, 
    and the aforementioned denial of service error.
  date: 2014-11-30
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Blink is chromium's gif renderer and decoder. The vulnerability is focused on
    the decoding of gifs, and all of the source code is found concerning that engine.
  name: blink
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 217add8aebf21a09e5bae70843f103e9b51cfdec
    note: 'This commit is interesting because part of the vcc is from refactoring, and the writer purposefully did not write tests for it. In previous classwork, we learned to always test when refactoring and this proves that.'
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 'Bug Reported'
    date: 2014-11-30
  - name: 'Work Started on Vulnerability'
    date: 2015-01-07
  - name: 'Issue Found'
    date: 2015-01-08
  - name: 'Fix Added, Merge Failed'
    date: 2015-01-16
  - name: 'Fix Approved'
    date: 2015-02-06
  - name: 'Reward Given to Reporter'
    date: 2015-03-03
  - name: 'Bug Released to Public'
    date: 2015-04-23
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: 'This issue was found in corrupted gifs, or if the first frame of a gif was larger than the screen size. If there were more checks in place for proper gifs, then this vulnerability would not have been a concern.'
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: true
    note: 'After the vulnerability was found and corrected, they added code in to ensure that the gifs were appropriately loaded and created. They also added exception handling for inappropriately constructed gifs, and do not attempt to load them if the sizing is incorrect.'
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    One thing that I found interesting about this vulnerability is that it was found
    two months before it was fixed or looked at. Once it was looked at and recreated, 
    it was labelled high priority and had a larger bounty than other common vulnerabilities. 
    This probably could have been done on a quicker schedule, but there might have been 
    a release or some other thing more important in the employee's workload.

    From reading into this vulnerability, this is a common issue that many services that
    have gif loading have. On the Chromium team's internal comments, there was mention of 
    this issue also occuring on firefox. I believe that this was created by a coding mistake.
    The team also mentioned that there was a quick fix in place that did not cover the edge case
    of this vulnerability-when the first frame of the gif is larger than the screen size.

    The CWE associated with this vulnerability is concerned with memory use after a free, because
    of the error that occurs after the before mentioned issue with gif frame sizes. There are two
    suggested mitigatons in the CWE entry. The first mitigation suggests choosing a language that 
    provides automatic memory management. For a engine such as blink that is quite large, it is not
    realistic to rewrite the rendering engine in a new language. The second mitigation is to be sure
    to set your variables to NULL after they are freed, but even the mitigation strategy mentions 
    that this fix may not be very useful if there are multiple of complex data structures, and blink
    is a very complicated engine.

    However, considering they fixed the issue at its root cause(mishandling gif decoding), and changed
    the quick fix, it seems like the fix was handled properly. 
