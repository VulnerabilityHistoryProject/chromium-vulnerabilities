---
CVE: CVE-2013-6622
CWE: CWE-416
announced: 2013-11-13 10:55:04.237000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The vulnerability was a "use-after-free" bug in the fork of WebKit used by
  Chrome. The engine provides the ability to move elements between documents,
  and frees the memory used by the element in the first document before moving
  the element to the second document. It was found that, with a certain timing,
  the freed memory used by the element in the first document could be loaded
  after it was destroyed, creating a potential denial of service.

  To fix this vulnerability, tweaks were made to how Chrome tracks the load
  delay. Rather than checking if the old document is present when the original
  load delay occurs, the method was changed to make checks between the old
  document and the current document mutually exclusive. In addition, if the old
  document is present, the load delay of the document is increased to ensure
  that the memory cannot be loaded back into the old document. The load delay in
  the old document is decremented now that the element in the old document is
  guaranteed to be destroyed.
bounty:
  date: 2013-11-12 11:00:00.000000000 -05:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2013/11/stable-channel-update.html
reviews:
- 25362002
- 34313005
bugs:
- 272786
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: ad00515fdc7190ec49541606eae0f20a991542ab
  :note: ''
vccs: 
- commit: e92208d3534e3f78d7340d662b21085b9f609f84
  note: |
    This VCC merged two methods into one in many related functions, changing the
    outward-facing structure of element handling to seemingly accomplish a later
    bug fix. Although the commit message claims functionality was not changed
    and the code was reviewed before submission, looking at the code where this
    vulnerability resides reveals that this commit was the source of the
    vulnerability.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Although the module had tests available, this specific vulnerability was not
    tested for. A unit test for the vulnerability was included with the bug
    report and incorporated into the fix commit.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was found by a user on the issue tracking system, who
    appears to have a record of finding bugs (they celebrate their "10th bug
    report" in the report). However, although they did document the stack trace
    and unit test used, they did not document how they came across the
    vulnerability.
  date: 2013-08-14
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The mistake occurred in the media subsystem of the WebCore module within
    WebKit. Notably, the WebCore subdirectory seems to have disappeared over
    time, leaving this to simply be the media processing subsystem.
  name: media
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit:
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: Not any major events were seen during the vulnerability.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The vulnerability appears to be the result of an oversight on the part of
    both the VCC's contributor and the reviewer. Because the commit touched so
    many files when unifying the two methods, its complexity made it hard to
    track smaller errors. If the commit were instead split up between separate
    files, this vulnerability might not have fallen through the cracks.
    
    That is not to say they would have found the vulnerability. The
    use-after-free vulnerability occurs because a load event can be sent to the
    old document after the element is destroyed; that would be difficult to find
    from the code alone. The developer would have benefited from documenting the
    process using comments, like the person who fixed the vulnerability would
    eventually do. If they had documented the sequence of events, it is probable
    the vulnerability would never have made it to the initial review.
