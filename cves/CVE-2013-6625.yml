---
CVE: CVE-2013-6625
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-11-13 10:55:04.330000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability is an example of a use-after-free bug. This
  means that a chunk of memory in the program was given back to the operating
  system to be used for other things, but then the refernce to that memory was
  used later in the program's execution. When the reference is used again, the
  program will attempt to use whatever data was put there as the original value.
  This could be hazerdous if the memory is now being written to or read from by
  other code.
  In this case, the the use-after-free occurs during the rendering of the of the
  html DOM. The bug happens when a child node of an object dom is removed but a
  reference to that node is still kept, despite the fact that the memory is
  freed. Child nodes can be removed after mutation, or blur events that occur in
  the DOM. If another reference to that child node is kept somewhere else, then
  a use-after-free can occur. This fix was to change the scope of the
  nodeChildrenWillBeRemoved to be the entire document instead of the document
  within the container. This ensure that references to the child node that are
  outside the scope of the document within the node being modified.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2013-11-12 11:00:00.000000000 -05:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2013/11/stable-channel-update.html
reviews:
- 25389004
- 30663003
bugs:
- 295010
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: f084d7007f67809ef116ee6b11f251bf3c9ed895
  :note: 'https://src.chromium.org/viewvc/blink?view=revision&revision=159007'
vccs:
- :commit: 9aa4146da55802fe5ececfa528d3bb97d51a59c2
  :note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 8
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The original code did have unit tests, but not for test cases that
    involved the vulnerability.
    A simplified version of the fuzz test that discovered the vulnerability
    was added to automated testing to ensure that a regression was not made
    which would reintroduce the vulenrability. In addition to that, several test
    cases were added as part of the fix. These test cases were created as html
    pages which performed actions that would cause the original bug to occur.
    The tests cases were added at the following paths
    LayoutTests/fast/dom/Range/range-created-during-remove-children.html,
    LayoutTests/editing/selection/selection-change-in-mutation-event-by-remove-children.html,
    LayoutTests/editing/selection/selection-change-in-blur-event-by-remove-children.html
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: The vulnerability was first discovered by cloud fuzzer, an automated
    fuzz testing framework that is designed to run in the cloud. It was
    investigated and fixed by ClusterFuzz.
  date: 2013-09-12 18:54:30 UTC
  automated: true
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The issue was found in the WebCore subsystem. The issue existed
    specifically in the containerNode.cpp file which is part of the renderObject
    functionality. The vulnerability exists in a part of the code that renders
    the html DOM in the browser.
  name: WebCore
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 845ead9d48275ec5ea7bc67b91abab3404eccb2e
    note: |
      This was a refactoring commit to change the document method to return
      a reference instead of a pointer. This commit was done by a third party
      developer.
  - commit: 9546cbd8fa986f378ded5fa9042b0e85044bd215
    note: |
      This was a refactoring commit to change the document back to returning
      a pointer instead of a reference. This commit was done by a third party
      developer. Affective undoing the earlier commit.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There was a major refactoring event that occured in this subsystem.
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The tree based structure that makes up these DOM containers can be very
      complicated to parse and can lead to unexpected behavior.
  regression:
    applies: true
    note: |
      This is an example of where a vulnerability fix actually re-introduced
      an old vulnerability. The vulnerabile code existed in the project prior
      but it was removed for a solution that was supposed to be faster. This new
      solution was over optimized and was not a complete solution, causing a
      vulnerability. So the original vulnerable code was back.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The fact that this vulnerability existed in code that was reintroduced, and
    the fact that there was so much refactoring going on in this area of the
    code leads me to believe that the primary cause of the vulnerability was
    miscommunication.
