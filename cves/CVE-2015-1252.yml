---
CVE: CVE-2015-1252
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 787
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-05-20 06:59:04.370000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The vulnerability was in Chromium's common utility functionality, specifically
  a new implementation of a "PartialCircularBuffer" which was basically a buffer
  that could wrap around *n number of times to have a continuous write of data.

  The implementation, which was in C++, didn't handle the wrap around buffer write
  case for large amounts of data properly. This had the possibiliy of resulting 
  in data being written to memory that it was not intended for (an "invalid write"),
  corruption of data, crashes or most significant to the security aspect of the
  issue allowing for arbitrary code execution as it was functionally a "buffer 
  overflow" scenario.

  The way that this could be exploited would be if an attacker found a way to 
  access the web logging that was being utilized and pushing any very large amount of
  data to the target log write buffer which would result in a denial of service
  attack on the system. Since this particular issue was a common utility the potential
  attack possibilities while being more widespread would also depend on how the
  "PartialCircularBuffer" was being used in the different modules.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-05-19 11:49:00.000000000 -04:00
  amount: 16337.0
  references:
  - http://chromereleases.googleblog.com/2015/05/stable-channel-update_19.html
reviews:
- 1061053002
- 1117763002
- 1131943003
bugs:
- 474029
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: ab42594ec3070953971f43b384f38f3c2b65d4ea
  :note: 'The actual fix'
- :commit: eb467f661aaa26642b8e9ec9834a8a8a56ccf985
  :note: 'The code fixer added themselves as an author'
vccs:
- :commit: 4ea9f181e9d73476f2c1bb235c533edb88dc6296
- :note: 'The code was introduced as completely new files to
    provide functionality to be used in WebRTC logging
	  and acts as a partially circular memory buffer wrapper. There
	  is a bug associated with the commit (229829), but the link is
	  locked behind a permissions wall. The found review number is
    13473005 for the initial code submission.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: They added a function to test memcpy with large input
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: The bugs.chromium.org page is blocked by a permission wall. The issue was found by an anonymous user.
  date:
  automated:
  google:
  contest: Found by anonymous
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    Based on the description in the CVE along with identification from source file 
    directory paths. From the VCC it was initially to be utilized by the WebRTC logging.
  name: chrome common - common utilities for general usage
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    There is no significantly interesting commits as the problem was a core problem
    with the implementation of the wrap around scenario of the PartialCircularBuffer due to
    an out of bounds write that occured after the initial portion of the data was written to
    the buffer. The only commits that occured between the VCC (initial implementation) and 
    the fix was one to add append support to the PartialCircularBuffer instead of just overwrite
    capabilities. Originally this was of interest but after further investigation it was determined
    that the problem was with the core implementation of the DoWrite and Write functionality and
    the additional support for append did not affect it at all as it was simply using the same code
    with an additional switch to determine whether or not to clear the buffer prior to attempting a
    write. This append support was to be used in logging machine info to diagnostic the WebRTC log.
    The only other commit that occured was moving the file from content/common to chrome/common and
    changing the copyright info.
  commits:
  - commit:
    note:
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The code was moved from content/common/ to chrome/common for WebRTC logging
  events:
  - name: 6ef98b5a0dabccfe9271697efee657316693cbee
    date: May 31, 2013
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: yes
    note: The vulnerability here is that large inputs were not checked for
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer : |
    The chosen CWE is 787 (Out-of-bounds Write) has no mitigation strategies
    listed however there are mitigation strategies in CWE-119 (Improper 
    Restriction of Operations within the Bounds of a Memory Buffer) which is
    what NVD lists as the class of the CVE issue. I have chosen CWE-787 as
    that is the exact issue that occured but the NVD listed CWE-119 has what
    I would consider applicable, specifically the mitigations in the
    implementation stage. The fix is specifically addressing the mitigation
    of checking the buffer boundaries if accessing the buffer in a loop
    to make sure you are not in danger of writing past the allocated space.
    Since the issue at its core is a lack of checking proper space checking
    on the buffer size vs input size when handling the wrap around case, the
    fix moves the wrap around content out of the initial write loop to ensure
    safety when writing the given input. The initial implementation simply did
    not include thorough enough testing to catch this edge case.
