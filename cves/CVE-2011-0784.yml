---
CVE: CVE-2011-0784
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 557
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-02-04 13:00:03.517000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description:
  This issue spawns from an audio render issue where a logic check was not being
  performed where an audio item was not being verified to already exist inside
  of a value it was being added to. This issues specifically when playing the game Z-type
  and crashed at one in four sound effects due to a timing issues with multiple
  sounds playing at once.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date:
  amount:
  references: []
reviews:
- 6285001
- 6227003
- 6215007
- 6157007
bugs:
- 69195
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes: []
vccs:
- :commit: 9c619e4daf10b27b6c561c3f09512e7237175eb6
  :note:
    Avoid a possible race between entry deletion and a command, in the event a
    renderer was sending out-of-order messages.BUG=69195
    TEST=media
    Review URL http://codereview.chromium.org/6227003
    git-svn-id svn://svn.chromium.org/chrome/trunk/src@71286
    0039d316-1c4b-4281-b951-d872f2087c98
- :commit: b9866ebc631655c593a2ac60a3c7cf7d217ccf5d
  :note:
    Use the lock when accessing the buffer object.
    BUG=69195
    TEST=play Z-Type for hours :)
    Review URL http://codereview.chromium.org/6157007
    git-svn-id svn://svn.chromium.org/chrome/trunk/src@71211
    0039d316-1c4b-4281-b951-d872f2087c98
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
    4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There were no unit tests found that directly tested the method in question.
    In addition, dependent methods were also untested. The fix also did not involve in
    updating the tests to test this area.
  code:
    false
  fix:
    false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer:
    On a Reddit thread 8 years ago, a user was attempting to play a
    Type to shoot HTML5 Game and discovered that it crashed after ~30 seconds
    of playing audio. Strangly enough, this error was not consistent across OS.
    Specifically, the user discovered it in Linux and seemed to be difficult to
    reproduce. The issue appears to be a timing issue but did rank as a critical
    risk. The error was found in the following platforms:(Microsoft Windows XP,
    Microsoft Windows Server 2008, Microsoft Windows Server 2003, Microsoft Windows 7,
    Microsoft Windows 2000, Microsoft Windows Vista)
  date: 2011-01-11
  automated:
    false
  google:
  contest: daniel.w...@gmail.com
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: audio renderer
  name: render
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
    The lines of code that were introduced that predated the error were introduced around 2 years
    before it was ever discovered. In general, the system was not well defined in this time
    and therefore multiple significant changes were introduced
  commits:
  - commit: 29c2daeafac577bd80c7b37891e3bbae7c542b5e
    note:
      harfbuzz check in harfbuzz-ng, add gyp define to use it
      This checks in harbuzz-ng b0d396aa88b3cdf8cea896bfeeba197656e1cdb1.
      Setting use_harfbuzz_ng to 1 in gyp will cause us to build
      harfbuzz-ng in place of harfbuzz.  So far this currently fails to
      compile due to all our other code relying on the old API.
      BUG=68551
      TEST=./build/gyp_chromium -Duse_harfbuzz_ng=1, verify build breaks
      Review URL http://codereview.chromium.org/6052008
      git-svn-id svn://svn.chromium.org/chrome/trunk/src@70539 0039d316-1c4b-4281-b951-d872f2087c98
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer:
    On the day in question where the change was introduced, Jan 12. There were many other
    commits pushed through that fixed a variety of errors, modifying hundreds of lines
  events:
  - name: Convert input method ID to keyboard overlay ID
    date: 2011-01-12
  - name: Changing colorspace on SkBitmap -> CGImageRef conversions.
    date: 2011-01-12
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note:
      they assumed the input that they were getting has specifc
      characteristics without checking/confirming it. Specific audio files
      that played for around 30 seconds on certain operating systems would
      result in a crash.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer:
    The biggest issue with the program was coding issues. Obviously when a
    project is implemented over multiple years, issues can appear, but the main concern here
    was a failure to check input and confirm it was as expected. In addition, it
    took a while to actually discover what was causing the issues as it was very hard
    to reproduce. The fix they implemented is small, but seems to prevent this
    issues from occuring, as the Reddit thread and the Chromium thread have not been
    modified in some time.
