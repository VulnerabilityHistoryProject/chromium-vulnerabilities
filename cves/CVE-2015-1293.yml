---
CVE: CVE-2015-1293
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 346
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-09-03 18:59:03.327000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A vulnerability in a DOM implementation in web browser engine lead to remote attackers bypassing 
  the Same Origin Policy through the use of forged security credentials.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-09-01 15:15:00.000000000 -04:00
  amount: 7500.0
  references:
  - http://chromereleases.googleblog.com/2015/09/stable-channel-update.html
reviews:
- 1320513003
- 1320523002
- 1311253005
bugs:
- 524074
repo: https://chromium.googlesource.com/chromium/chromium
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 3134d8a254ebda12ac2972283f724201c2fa326d
  :note: Changed a session terminal condition for insecure script acces and added tests for this functionality.
vccs: 
- :commit: 9fe1d58100e6e7a272ac80a378b8a629eb57e3d7
  :note: Made client-triggered navigations more friendly to RemoteFrames
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There appear to be no automated tests written for this method until after its fix.
    I was also unable to find any unit tests. The fix also added in new tests when it was
    made.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    A user reported this bug after running personal tests. The user supplied the Chromium team with
    a use case, and the broken function. This vulnerability was discovered by ' marius.mlynski@gmail.com'.
  date: |
    2015-08-24
  automated: false
  google: false
  contest: true
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Blink > DOM
  name: |
    DOMWindow
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 5f5d4a2e72bceee8354538d625a501822ac51b5f
    note: |
      A lot of commits by the VCC and Fix's developer involved other security-related 
      commits. This means that the developer was heavily focused on removing other vulnerabilities
      of the system. The fact that there was no automated testing related to this specific
      vulnerability is interesting because it adds mystery to how these vulnerabilities 
      are being fixed.
  - commit: 2024624b8460b440cc17ff27d06c1424a917381b
    note: |
      This commit was also made by the same developer that introduced the vulnerability
      This commit also pertains to increasing operating efficiency, rather than fixing vulnerabilities 
      that the developer had worked on previously. This means that the developer may have shifted focus
      away from fixing vulnerabilities before this one was found.
      
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    This vulnerability missed the developer's original phase of vulnerability-fixing. Before the fix, 
    the developer shifted focus away from patching vulnerabilities to increasing the system's efficiency.
  events:
  - name: "Shift of developer focus to efficiency"
    date: 2015-06-29
  - name: "Developer began addressing system vulnerabilities"
    date: 2015-03-05
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      This vulnerability arose because this principle was not implemented. There was a single
      angle of security taken, which when compromised allowed users to access any other user's 
      records.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: true
    note: |
      This vulnerability arose because the functionality to validate a user's session was available
      to be changed by any user if they knew how. Malicious users eventually discovered the means to
      access this functionality and were able to exploit the system because of it.
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: true
    note: |
      The development of this vulnerability was not secure by default. The developer took a shortcut
      during development, and it is not clear whether the developer knew about the possibility of the
      exploit or not.
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability arose from an oversight by a developer. Their implementation was not 
    secure by default which provided an easy means for potential attackers to exploit the system.
    This vulnerability was unnoticed during code reviews, even though it was relatively 
    obvious in hindsight. The developer who was responsible for creating the vulnerability, and
    for implementing a resolution for it was focused on patching other vulnerabilities around the
    time of the fix. However, the developer spent a large amount of time implementing efficiency
    improvements before the fix was committed. This means that, had it not been found by an external
    user, it would have likely made it deep into production.
