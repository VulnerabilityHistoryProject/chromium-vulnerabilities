CVE: CVE-2015-1240
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-20
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-04-19 06:59:04.837000-04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  There was a vulnerability which allowed remote attackers to cause a denial of
  service (out-of-bounds read) via a crafted WebGL program that triggers a state
  inconsistency. In other words, any attacker writing a WebGL program who is
  aware of this bug may force an integer out-of-bounds read which may halt or
  break the WebGL operation.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-04-14 13:41:00-04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2015/04/stable-channel-update_14.html
reviews:
- 987123003
- 978193003
- 1039423002
- 1035333002
bugs:
- 463599
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: ac89bdd636a4a6d8f15415e69b40e546cb020567
  :note: ''
- :commit: 44ad5ecc3abf8f31d7e55a9ece5cea30a710fd77
  :note: ''
vccs:
- :commit:
  :note:
- :commit: dcaad2b9cc473df68d63903f484b8669bc2a7a23
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 9c95e30678a21a0fc9a438345c2fcbef0c574ba4
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 63c9b0574fc9a7d6420815b3eb64873ca50fe01b
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 8e1b98ae9ec5ebd3c94df444769ab2305ee587e5
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 246a7045b9c45620fd725210aac51322e611c83f
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 8a837bb40249dfd9f0a2736abdab4f64592c99db
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: af638096a9fe92de162188116a12f1a4a731e098
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 915a59a10d1a1bb008821fd4e4f2019a4c676142
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 13f5f5e58cf2b2bf9a5ad9918a37294d38bb2c4c
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: c6d943365002fbe85057ad7a6281756b844d31d1
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 9ab037205876578d14c5686f491c37bab680eccb
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 0599e81b61d2ab266a68dcce9d2b3c27e275f879
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 68fcdc610840bc39b061e7842f78089171ed5e90
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 6ee592a8809f650e2b4b01f7d7336899f34daf5b
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 302ce6d93bce9050a23f3d02cf7c36d2a9d9a153
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: ba3176a8f0a18527c0af5896f9d595d866e5ceeb
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 9438b01d71983b665a9490fc5255712137f6c238
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: fbe2037a09135bc592d77d10ebe7b057a4a6b3d2
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 4bf858f802b04c1e7a4de9ed8fd601a315aa5ce0
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: cad5a674fe07d08bb8a775da0cb2a555eb796e6e
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 062c38b3edec6aab91e693273000caa07d653eed
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: e82fb7928fb3d6c7b980f8fae4b948eb6bfb7ee9
  :note: This VCC was automatically discovered by the archeogit tool
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    It is unclear if automated unit tests were involved with this vulnerability,
    however, they were certainly involved in the detection and resolving of this
    vulnerability.
  code: true
  fix: true
  change: |
    [Original Code]
    GLint* params) {
        *params = capabilities_.max_color_attachments;
        return true;
      case GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:
       *params = capabilities_.max_combined_fragment_uniform_components;
        return true;
      case GL_MAX_COMBINED_UNIFORM_BLOCKS:
        *params = capabilities_.max_combined_uniform_blocks;
        return true;
      case GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:
       *params = capabilities_.max_combined_vertex_uniform_components;
        return true;
      case GL_MAX_DRAW_BUFFERS:
        *params = capabilities_.max_draw_buffers;
        return true;
      case GL_MAX_ELEMENT_INDEX:
       *params = capabilities_.max_element_index;
        return true;
      case GL_MAX_ELEMENTS_INDICES:
        *params = capabilities_.max_elements_indices;
      }

    [Fixed Code]
    GLint* params) {
        *params = capabilities_.max_color_attachments;
        return true;
      case GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:
       *params = static_cast<GLint>(
           capabilities_.max_combined_fragment_uniform_components);
        return true;
      case GL_MAX_COMBINED_UNIFORM_BLOCKS:
        *params = capabilities_.max_combined_uniform_blocks;
        return true;
      case GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:
        *params = static_cast<GLint>(
           capabilities_.max_combined_vertex_uniform_components);
        return true;
      case GL_MAX_DRAW_BUFFERS:
        *params = capabilities_.max_draw_buffers;
        return true;
      case GL_MAX_ELEMENT_INDEX:
       *params = static_cast<GLint>(capabilities_.max_element_index);
        return true;
      case GL_MAX_ELEMENTS_INDICES:
        *params = capabilities_.max_elements_indices;"
      }
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Zhenyao Mo created an issue regarding this bug when a user running Chromium
    with --no-sandbox and executing WebGL functions that triggered an
    out-of-bounds error that was not handled properly. He ran an address
    sanitizer and found numerous errors which he submitted for review and
    eventually the chromium team utilizezd ClusterFuzz to analyze his test case.
    When they determined that the crash state was being reached due to unhandled
    exceptions in the WebGL code, they quickly added validation to the code.
  date: 2015-03-03
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: gpu
  name: blink::WebString::fromUTF8
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit:
    note: "There were no interesting commits between the VCC and the fix. The code\
      \ change required to fix this bug was to remove code which accepts unvalidated\
      \ parameters from the WebGL portion of the code, and cast the parameters using\
      \ static_cast<GLint> as well as statis_cast<GLint64> depending on the case."
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The ANGLE Project which began in 2010 could have been one of the reasons why
    this vulnerability occurred, as the Chromium developers layered WebGL's
    subset of OpenGL ES 2.0 API over the similar DirectX 9.0c API calls. This
    project enabled the browser to run WebGL content on Windows OS computers
    without relying on OpenGL drivers.
  events:
  - name: ANGLE Project
    date: 2010-03-18
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      This vulnerability stemmed from trusting all of WebGL input in a specific
      overlooked case, and the fix was to simply distrust the input and validation
      to the parameters that WebGL would be reading prior and after handling
      the operations.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The largest mistakes that led to this vulnerability were all problems with
    validating parameters before and after executing functions in WebGL programs.
    This was a case of improper restriction of operations within the bounds of a
    memory buffer. This, overall, was simply an oversight by a developer who did
    not consider this at first, and the issue was left unknown until a hacker
    discovered the issue. In the end, when they put in validation measures in
    order to avoid out-of-bounds errors, the case was considered solved and I do
    believe that this solution has held up over time and has not been an issue
    since this.
