---
CVE: CVE-2015-1288
CWE: 300
announced: 2015-07-22 20:59:17.350000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A library which provided spell checking dictionaries did not get downloaded
  with an HTTPS session, which allowed for Man in the Middle attacks against users
  of the dictionary. The attack could result in fake dictionaries being used or even 
  denial of service by providing the dictionary user an incredibly large response 
  to the dictionary request which would be unable to be handled by the browser and caus
  cause a crash.
bounty:
  date: 2015-07-21 14:00:00.000000000 -04:00
  amount: 500.0
  references:
  - http://chromereleases.googleblog.com/2015/07/stable-channel-update_21.html
reviews:
- 1056103005
bugs:
- 479162
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
  - commit: 6703b5a51cedaa0ead73047d969f8c04362f51f1
    note: Switched the download server from HTTP to HTTPS.
vccs:
  - commit: a7638db83f61a1d6b9299283da3634b0df3e3d14
    note: |
      On the initial commit an HTTP source instead of an HTTPS source 
      was declared and this was never revised until the fix commit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There were unit tests for both the fix and the vcc but it doesn't look
    like any tests were updated for the fix.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?
    
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    
    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: This bug was found by a community researcher that was researching into insecure resource fetches.
  date: 2015-04-21
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?
    
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Derived from file location.
  name: spellchecker
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit: 1653d32148fca4a2061a272d5dd8a028dcf827a7
      note: Automated tests were revised dues to not catching some unrelated cases but the code was still under review at this point.
    - commit: 3c852baf496021a0b9e03d24aa85dfa6fc1c4570
      note: This specific section of code was reworked but still kept as an insecure HTTP call.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    
    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There was more than one discovery of this kind of bug within a short amount of time
  events:
  - name: Similar bug in loading avatar profile pictures - https://bugs.chromium.org/p/chromium/issues/detail?id=477680
    date: 2015-04-16
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: true
    note: Most closely related cause of the vulnerability, this was a hardcoded insecure call to external code.
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    This is an easy to make mistake as everything is completely functional when
    pulling from an insecure source and the only thing that needed to be changed
    was adding a single "s" into the code. If the developer was not thinking of
    the difference between http and https at the time of writing it would be a 
    simple mistake to miss and not correct. 
    
    Its possible that this mistake occurred in the design not taking the connection 
    type into account or the actual coding process. Of course, you must also make sure you're
    pulling a good resource because even if it is being included over a secure connection, if
    the actual resource is malicious you would still have issues.
    
