---
CVE: CVE-2013-0895
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 22
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-02-21
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Google Chrome on Linux and Mac OS X does not properly handle file paths for 
  copy operations in the CopyDirectory method. The copy operation does not
  properly strip trailing separators when creating its target path, which makes
  it possible for a remote attacker to execute arbitrary code through path 
  traversal.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date:
  amount: 
  references: []
reviews:
- 12197017
- 11773018
- 11877016
bugs:
- 167840
repo: https://chromium.googlesource.com/chromium/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 92e0649a8649cef6be545732bcaf0cfe5c196157
  note: |
   Extracts the file path concatenation to a generalized function that
   produces a sanatized file path
vccs:
- commit: 21dec3879b53f3de1afad9f7147b011415bbc7f9
  note: |
    The original implementation of the CopyDirectory method (Sept 2008)
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The code for copying directories is unit tested, but before the fix was 
    implemented the case of introducing trailing separators was not tested 
    against. Unit tests were improved in the fixing commit to ensure that this
    vulnerability would not be reintroduced into the code in the future.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found by Google Security Team employee, JÃ¼ri Aedla, who gave a reproduction
    case as given in the bug report which can be found at
    https://bugs.chromium.org/p/chromium/issues/detail?id=167840
  date: 2012-12-29
  automated:
  google: true
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The mistake was made in the base Chromium subsystem, in the file utils for
    for posix operating systems
  name: chromium/base
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 81181b6033a1b5f214fe0740c2bf770f67cc5cc6
    note: This commit reverted the actual fix, but was later reverted back
  - commit: abbc5739c1689384fbbdbd0ee6c9d2d9a8c2da0b
    note: Edited the problematic functionality, but did not notice vulnerability
  - commit: ca020961d05b2c38dcc94c0e10a4ab41dbeac900
    note: |
      Made efforts to strip leading '/' characters, but did not fix vulnerability
  - commit: 6ae340f0f9bc186240d847b40d547a0b5c6e7824
    note: |
      Optimized stripping of leading '/' characters, but vulnerability still present 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The fix for this vulnerability uses a generic file path operation
    in a separate module that sanatizes file paths before concatenating them.
    This module was introduced into Chromium after the introduction of this 
    vulnerability. When discussing solutions to this vulnerability, the 
    Chromium team referenced a specific implementation of this operation 
    in the WebKit file api as a model to follow.
  events:
  - name: |
      AppendRelativePath function defined in commit 
      405a64b63ae9a6869923aa5b80cc77acf66e71bf
    date: 2009-09-16
  - name: |
      AppendRelativePath utilized in webkit file api first in commit 
      c3d5d25e9f3128c693debcfc457e71d2d6b880d5
    date: 2012-03-07
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The reproduction case required applying a patch to Chromium and recompiling,
      thus this input is not readily accessible to the normal user, but after a 
      simple patch is applied the inputs become accessible to a threat.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
        This vulnerability was a product of trusting the inputs for the
        CopyDirectory operation, and simply applying cut and paste functionality
        for the creation of the filepath that was going to be used.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The primary culprit of this vulnerability was the copy/paste styled
    implementation of file paths in the first iteration of the CopyDirectory 
    method for posix operating systems. There was no input checking on the 
    path, it was assumed that no malicious file path would be used. 

    It is interesting that there was a gap of about 4 years from the first 
    implementation of the CopyDirectory method with the vulnerability to when
    the vulnerability was fixed. All the while there were a series of edits
    made to the problematic lines of code by Google employees. One of which
    addressed that there may be a problem with the path implementation (leading
    '/' characters) but it only scratched the surface of the greater problem.

    The fix ended up utilized a generic AppendRelativePath function that could
    be utilized in all operating systems and worked to both sanitize and validate
    the file path inputs before constructing the file path for the CopyDirectory
    function.
