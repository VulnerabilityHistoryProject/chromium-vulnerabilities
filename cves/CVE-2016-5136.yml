---
CVE: CVE-2016-5136
CWE: 416
announced: 2016-07-23 
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Referencing memory after it has been freed can lead to a variety of behaviors including crashing and corrupting data. 
  
  In this specific CVE, when an extension is loaded or unloaded by the application, the content
  of these scripts are unregistered. If this happens in the middle of an injection, the freed addresses
  of these unregistered scripts are accessed causing a use after free vulnerability causing a crash. 
bounty:
  date: 2016-07-20 14:48:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/07/stable-channel-update.html
reviews:
- 2158683002
- 2155863003
- 2134613002
- 2116923002
bugs:
- 625393
repo: 
fixes_vcc_instructions: |
   Please put the commit hash in "commit" below (see my example in
   CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: a80776332fd8c99b58beab5d91a6675e85013628
  :note: |
     It's interesting to note how quick this patch came for the fix. The patches added new logic that based on their comments appear to be temporary as it will be replaced by simpler and cleaner logic to handle stale pointers. New tests were also added in their testing config. 
vccs: []

vccs_note: | 
   the fix was a refactoring so its hard to say if there was truly a VCC especially after digging
   through the history of the file and noticing that this unaccounting for was missing from the start. 
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Yes automated unit tests were involved in this vulnerability. However, in this case a new test needed to be added to 
    consider this new scenario which causes this bug.

  code: true
  note: |
    When testing the fix you could tell that there were unit tests added. In one of their unit tests file 
    in chrome/browser/extensions/content_script_apitest.cc  , they added a whole new unit test for this situation
    to  test in the future to prevent it from coming up again.
  
  fix: true
  note: |
    As the unit tests were not changed further after the initial addition of the unit test. 
    The unit test was not further improved 
  
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    It's not clear how the project member (tag of user who submitted bug issue) discovered it.
    My conjecture is the project member manually discovered this as he was hunting in this subsystem but
    that is simply conjecture.  
  date: 2016-07-02 
  automated: false 
  google: false 
  contest: false 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The subsystem the source code files are in is the Extensions system. 
  name: Extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits: 
  - commit: a80776332fd8c99b58beab5d91a6675e85013628
    note: The content of it itself wasn't too interesting but the comments on the commit on https://codereview.chromium.org/2116923002/diff/20001/extensions/renderer/user_script_injector.cc is interesting as it is pointed out the fix isn't the cleanest or simplest fix but they went with it anyways but said they were going to fix it right away anyways. 

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    I really don't think there was any major events in the history of this.
    Suprisingly, the timeline of the find and fix of this bug was around 2 days,
    and in this time not much notable happened. 

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false 
    note: 
  least_privilege:
    applies:  true
    note: |
     Least privilege applies because if the user doesn't have access to memory that may get freed or the object after it's been freed, it can serve as a deterrent to this type of vulnerability. 

  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false 
    note: 
  security_by_obscurity:
    applies: false 
    note: 
  serial_killer:
    applies: false 
    note: 
  environment_variables:
    applies: false 
    note: 
  secure_by_default:
    applies: false 
    note: 
  yagni:
    applies: false 
    note: 
  complex_inputs:
    applies: false 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    After spending some time reading through the discussions held on the bug as well as looking through a plethora of commits, 
    I feel like it was roughly a design mistake that led to the vulnerability. As no code was really deleted, just another variable
    was added in the file along with some lines to deal with said variable in terms of handling the script.  I also feel that a lot
    of Use After Free vulnerabilities are caused by a combination of coding mistakes and design mistakes. If you don't specifically
    design your code or functions to account for it, it is easy to code in a way that leaves room for this vulnerability to happen. 
