---
CVE: CVE-2014-1700
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-02-19
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This involves a use-after-free vulnerability in the modules/speech/SpeechSynthesis.cpp
  file of Blink, a component of Google Chrome. This vulnerability allowed remote attackers
  to cause a denial of service using the utterance data structure contained in the module.
  An utterance is a continuous piece of speech without pause. This is fitting since it is used
  in the speech module of the Blink project.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-04-14
  amount: 4000.0
  references:
  - http://chromereleases.googleblog.com/2014/03/stable-channel-update_11.html
  - https://bugs.chromium.org/p/chromium/issues/detail?id=344881
reviews:
- 180553004
- 185093002
- 184763004
- 181063010
- 177603009
bugs:
- 344881
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 33232afc85715b5ade7713397b4408646a4105b8
  note: |
    Fixes an error where utterances were still being accessed, after they
    had already been freed
- commit: 4dece178be222d15cad7a7ff2e2072ff81cc1764
  note: |
    Merged the code correction onto the correct code base
vccs:
- commit: 5df5039760b6827f83f500b5040ae78654178c54
  note: |
    There was an issue where the process wasn't always asynchronous. Events
    were able to be fired on utterances that were supposed to be no longer in the
    queue
- commit: 6e38ff9785bc22824627f78a630bdec05defb802
  note: |
    The commit was done on the wrong merge base initially
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From looking at the initial report of the bug, it was discovered without
    using any automated unit tests. The individual that uncovered the issue
    provided a script that could reproduce the bug. However, there was no
    mention of unit tests being edited to accomodate for this.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found by creating a new instance of a SpeechSynthesisUtterance and then
    being able to call it after it was freed. A simple test script was created
    to discover that there was a use-after-free vulnerability.
  date: 2014-02-19
  automated: true
  google: false
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the description in the CVE and the tags in the blog post
  name: Blink Speech
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 32b9ab614955db0399634301094e13cdc1910da5
    note: |
      They needed to revert the fix for the use-after-free vulnerability
      because the fix was broken for the Linux build.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events during this time.
  events:
  - event:
      name:
      date:
  - event:
      name:
      date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The code didn't have any mechanism in place to catch any attempted
      access to a process that had already been freed.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Users were able to take advantage of this denial of service
      vulnerability. There was nothing set in place to verify that the user input,
      so that it couldn't cause this.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    Utterances weren't properly being ended before starting another utterance.
    This created a use-after-free vulnerability since the utterances could still
    be accessed even after the memory was freed. Attackers were able to take
    advantage of this to cause a denial of service attack.

    The system was supposed to be asynchronous, so that only one utterance was
    being used at a time. However, the next utterance in the queue would
    sometimes be called before the previous one was removed from the queue. The
    fix for the mistake involved changing the logic, so that it was ensured that
    the system would be asynchronous.
