---
CVE: CVE-2013-6646
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-01-16 07:17:26.437000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The implementation of a database observer causes Chrome to crash due to an invalid
  pointer error when multiple databases are opened in the observer at once due to a
  script continuously reloading from the multiple shared worker methods (scripts)
  created by the multiple databases. Specifically, a variable is being passed into the
  observer after the worker's thread has already ended. This opens up a User After Free
  (UAF) vulnerability, a type of memory corruption bug that, in this case, opens up the
  possibility for malicious users to cause a denial of service attack by shutting down
  the worker processes related to the worker methods.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-01-14 13:32:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2014/01/stable-channel-update.html
  - https://bugs.chromium.org/p/chromium/issues/detail?id=249502
  - https://bugs.chromium.org/p/chromium/issues/detail?id=303154
reviews:
- 23496052
- 69753002
- 102543003
- 50883004
- 114603003
- 103243002
bugs:
- 249502
repo: https://chromium.googlesource.com/chromium/src/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: a7b9a33ca1fbe72f8a821e6338bc2147644d4215
  :note: ''
- :commit: 802a24c79e34c34c5478fc647acc6ecb2a695aa7
  :note: ''
vccs:
- :commit: 6541227a9c1aa7a492dd1b671ef9bca26236b8e7
  :note: This commit created a potential issue with its new messages filter; by filtering
    worker messages, a discrepancy was apparently created when multiple worker messages
    were sent and multiple onmessage events were created for said workers.
- :commit: 2b437e23748d7444f1698ae9242fabf0bc0730a7
  :note: This commit changed database access for the workers; this is likely the reason
    that these crashes occurred in DatabaseObserver specifically.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    As far as I have been able to determine, there were no unit tests utilized
    before the vulnerability was discovered, none implemented after they were
    discovered, and no existing ones that were edited after the fix was implemented.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulenrability was reported by a normal user (using a normal @gmail.com email
    address) so it is a bit hard to determine how it was initially discovered. On top
    of this, the method of reproduction involves running a given script.

    It was stated, however, that issue 303154, a similar issue to 249502, was found
    through automation. While this might at first seem like 249502 was found through
    similar means, the developers then state that it found done through directly
    running into the User After Free error, suggesting they did not find it through
    automation.
  date: 2013-06-13
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The shared workers subsystem for Chromium.
  name: shared_worker
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 643255da9818f8c8d072eda997fa5268d40c1c6e
    note: |
      This commit introduced experimental webkit features to shared workers. What's
      notable about this is that this was committed on the day that the vulnerability
      was found.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did see a major event during this timeframe.
  events:
  - name: Issue 303154 was discovered, showing many similarities to the main issue
      being looked at here, issue 249502.
    date: 2013-10-02
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The vulnerability in question could allow for shutting down a worker process remotely,
      something that could cause a wide variety of attacks from denial of service to
      repudiation attacks by not allowing a worker to confirm a worker process.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: true
    note: |
      The developers made a mistake in assuming that multiple shared worker messages
      wouldn't be able to crash the software. It was an oversight and they should have
      tested what happens upon running multiple at a time, and either have fixed the
      crash issue or prevent multiple shared worker messages from being run at once.
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "Although most crashes can be attributed to questionable coding practices,\nthis
    one was ultimately caused by what I believe to be a design mistake:\nallowing
    multiple shared worker events to occur simultaneously without\nunderstanding the
    potential problems that could present. The fact that not\none, but two issues
    came up involving UAF vulnerabilities regarding shared\nworkers showed they overlooked
    elements of their design. This is corroborated\nby the fact that one of the developers
    didn't realize that the bug was\noccurring at the process exit, causing them to
    think the priority of the bug\nshould have been lower than it realistically was.
    There's even a point where\na \"class of worker bugs\" is mentioned, implying
    it could have been even larger\nthan just these two issues.\nWith that said, the
    fix does seem to be proper as the developers have fixed\nthe core issue which
    was understanding when the proper point to kill a \nworker process was."
