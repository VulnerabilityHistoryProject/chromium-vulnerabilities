---
CVE: CVE-2013-6659
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 295
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-02-23 23:48:10.100000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  SSL certificates are used by hosts so that connecting browsers know how to
  encrypt messages and that the host can be trusted. When a new session is
  started, such as logging in or out of a site, SSL must be renegotiated, or
  reverified and encrypted.

  When renegotiating with a host, SSL certificates would be reverified, but not
  checked against the previous certificates to see if they match. This allows
  remote SSL servers to use a new certificate chains unexpected by the user.
  Consequently, this can lead to different information linked to the website
  being shown to the user, making the user believe a different company owns the
  site.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-02-24 15:20:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2014/02/stable-channel-update-for-chrome-os_24.html
reviews:
- 27266002
- 177143004
- 45753005
bugs:
- 306959
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 8dd1631f2aa8512be172e3d94a209d241baeb36d
  :note: Adds a check to ensure the certificate is the same on renegotiation
- :commit: b051cdb6465736e7233cd22b807e255554378206
  :note: Same check, but added to the OpenSSL implementation
vccs:
- :commit: 3fd49f9bdbe56a9648cddc015bdb8bac02fe1a7b
  :note: First implementation of the function to verify SSL certs
- :commit: bacff6543fbb0df029aae780589c4a7274b5ce34
  :note: Same changes as above, was reverted in between due to a Windows bug
- :commit: 3b1127720790197ff2e6f92ee4fdf4c878d3a49a
  :note: First implementation of certification verification for OpenSSL
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From what I can see, no unit tests were implemented to test the issue before
    or after the fix.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    No evidence for how this vulnerability was found after checking the mitre
    references. There is a chromium bug forum supposedly where the vulnerability
    was found and discussed, but I do not have access to it.
  date: 
  automated: 
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Found using the source code files
  name: SSL
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: b9a9188da43a172c6b299e27075c1486fe4458e2
    note: |
      This commit reverted the first implementation of the SSL certification due
      to a bug in Windows implimentation that was fixed the next day
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: No interesting events in the vulnerability's history that I could see
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The certificates given to the browser were verified, but were not checked
      to ensure that the same site was giving the same certificate.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability exists due to an unforseen scenario where a server could
    renegotiate a connection with a new, but still valid, SSL certificate.
    Since the second certificate is still valid, it would be accepted, but in
    reality each host should only have one certificate. Because the certificates
    were verified both before and after renegotiation, and because it was likely
    assumed the host only had one certificate, this vulnerability went 
    unnoticed. If this specific scenario was thought of when designing the 
    checks for certificates, it could have been avoided, but it is likely the
    engineers believed the validity checks would be sufficient.

    The vulnerability was fixed entirely in the two commits to fix it. Other
    mitigations were already in place for validating certificates, but none
    were in place for this particular vulnerability.

    The two commits completely fix this vulnerability by checking the current
    certification matches the old certification. Some comments throughout the
    source suggest the functions were originally based on other browser
    projects, and it is unclear if other browsers had a similar issue that was
    patched at other times.
