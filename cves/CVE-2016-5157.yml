---
CVE: CVE-2016-5157
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 122
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-09-11 06:59:13.147000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 
  A Heap Buffer Overflow (out-of-bounds write) vulnerability was found in OpenJPEG, which is used
  in PDFium in Google Chrome. This would allow a remote attacker to arbitrarily execute code on
  a user's machine. After inspecting the code, it seemed that the vulnerability was due to casting
  arguments for method to a 32 byte integer, which could possibly cause the integer to exceed the
  boundaries. OpenJPEG is an open source library used to display JPEG images; this was a dependency
  in PDFium, which is an open source library which Google maintains. This is used to display PDF
  files through Google Chrome.

  This bug in OpenJPEG was brought forth through a developer of the open source library attempting
  to close another Heap Buffer Overflow bug. I think that this vulnerability could have been stopped
  in its tracks if there had been unit tests for this section of code, as there are no unit tests in
  OpenJPEG.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-08-31 15:50:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop_31.html
reviews:
- 2226163003
- 2223303002
bugs:
- 632622
repo: https://pdfium.googlesource.com/pdfium/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 66235aa45c0b0dcc0b875e4ade2747cf6b195ee4
  :note: |
    This is the commit to Chrome to update the PDFium version.
    (https://codereview.chromium.org/2226163003)
- :commit: b6befb2ed2485a3805cddea86dc7574510178ea9
  :note: |
    This is the commit to the PDFium project.
    (https://pdfium.googlesource.com/pdfium/+/b6befb2ed2485a3805cddea86dc7574510178ea9)
- :commit: e078172b1c3f98d2219c37076b238fb759c751ea
  :note: |
    This is the commit to the OpenJPEG project.
    (https://github.com/uclouvain/openjpeg/commit/e078172b1c3f98d2219c37076b238fb759c751ea)
vccs:
- :commit: 5d00b719f4b93b1445e6fb4c766b9a9883c57949
  :note: |
    This is the commit which introduced the vulnerability. It was found on OpenJPEG's Github
    project. (https://github.com/uclouvain/openjpeg/commit/5d00b719f4b93b1445e6fb4c766b9a9883c57949)
    This commit fixed a buffer overflow vulnerability, while also introducing another buffer overflow
    vulnerability all within the same section of code.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 20
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The original code was not tested, nor did the fix include unit tests. The third
    party portion of PDFium appears to not have unit tests.

    Again the code review showed that there were tests ran as part of the continuous
    integration process, which is why I marked code as true.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This vulnerability in OpenJPEG was found by Matthieu Darbois. It isn't
    said exactly how they were able to find it, but their commit to the Offical Github
    of OpenJPEG was the first instance of the bug being tracked.
  date: 2016-09-07
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    Based on the CVE, and third-party folder which the changes were made in Google
    Chrome's source code.
  name: OpenJPEG
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: 2d24b6000d5611615e3e6d799e20d5fdbe4e2a1e
    note: |
      This commit was immediately after the VCC, and contained "overflow checks". They added
      additional checks before the assignments of the later trouble variables, to ensure that
      overflow wasn't possible. It seems that they overlooked the idea that the resulting variables
      could also result in overflow.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I was unable to find any major events during this time.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The vulernability was the overflow of some variables which were used later on,
      but I think that the vulnerability could have been mitigated some what if they
      had a system to prevent overflows from happening, or if there were more checks
      to ensure that the variables they were using weren't going to result in a buffer
      overflow.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |-
    The coding mistake that lead to this vulnerability was that the developer who
    implemented this section of code had thought of the possibility of overflow, and
    the very next commit provided checks to ensure that overflow couldn't happen before
    as these variables were being assigned, but they didn't think about the possibility
    that after casting the variables could possibly cause overflow later.

    The vulernability was introduced as the developer was attempting to fix another overflow bug
    which also had to do with casting. It seems like an oversight of the developer to not think
    they had to recheck the output of these variables.
