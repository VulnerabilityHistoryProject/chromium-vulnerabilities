---
CVE: CVE-2014-7908
CWE: CWE-189
announced: 2014-11-19 06:59:09.887000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Integer overflow for multiple media file types. This overflow vulnerability
  allows attackers to cause a denial of serivce. 
bounty:
  date: 2014-11-18 11:56:00.000000000 -05:00
  amount: $500.0
  references:
  - http://chromereleases.googleblog.com/2014/11/stable-channel-update_18.html
reviews:
- 695673002
- 659743004
bugs:
- 425980
repo: /media/base/container_names.cc
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: b2006ac87cec58363090e7d5e10d5d9e3bbda9f9
  note: Added extra checks to prevent buffer overflow in two lines
vccs: [1b6a233a4f2af1a5c02c99f0c8958b14d3efafbb]
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: After fix tested using ASan.
  code: true
  fix: true 
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: This was discovered through a Cluster Fuzz test.
  date: 2014-10-22
  automated: true
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This is part of the media subsystem
  name: media
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 66fb46bb6f684113847e2851f748f792c408e947
    note: Third attempt of fixing narrowing error for TAG. There were several commits to this file attempting to fix another bug. This is interesting because this additional bug was not easily fixed.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events: |
    commit: 341740b1ece43055e7efc1fb53d1732735e04b41
    Make TAG() return an unsigned number. The first attempt at fixing this bug.
    commit: 2437d5263051921d218807f856daceac8d0adf3f
    Make TAG() really return an unsigned number.
    commit: 8324072cfb2e4d1165e80ac0c893ec5ff76c2cb5
    Revert of Make TAG() really return an unsigned number. These events show the
    struggle with another bug early on in the life of this file.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      The original code did not check the bounds for atomsize. This out of bounds
      input would create an integer overflow and allow attackers to exploit and cause 
      denial of service. Having an extra check to prevent integer overflow fixes this.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The biggest mistake that lead to this vulnerability was focusing efforts on higher
    priority bugs that existed within the same file. This was a coding bug as there was
    an initial check for integer overflow, however it was not robust enough to cover
    all cases. The working solution for this bug is using Input Validation. This is done
    by ensuring that the input is within expected bounds of what should be expected. This fix
    looks proper as it changes the following two lines
      int atomsize = Read32(buffer + offset); --> uint32 atomsize = Read32(buffer + offset);
      if (atomsize <= 0) --> if (atomsize == 0 || atomsize > static_cast<size_t>(buffer_size))
    These fixes show that it uses checks to see if the input is within the proper bounds, as
    well as paying close attention to variable types in calculations for a given language. 
