---
CVE: CVE-2013-6635
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-12-06 19:55:03.850000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulenrability is located in the editing implmentation of Blink
  (the underlying web browser engine). During editing it is possible to
  attempt to use a previously freed DOM node and cause a denial of service attack,
  or other impacts using Javascript code that results in the removal of said node
  during the processing of the Document Object Model tree. The Document Object
  Model is a language and platform independent interface that allows scripts and
  programs to access and modify the style, content, and structure of a document.
  The DOM tree is usually created using the HTML tags and their hierarchy in the
  document.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2013-12-04 10:38:00.000000000 -05:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2013/12/stable-channel-update.html
reviews:
- 64103002
- 77763009
- 80333002
bugs:
- 314469
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 787c37304814f96e37345ffcab8509b4c7569da3
  :note: |
    The authors added a check to see if the outter node had been
    removed from the document, if it had then no action was taken,
    they also switched from a normal pointer to a reference pointer
vccs:
- :commit: 739cf7384584fc06ec648ab5d6519c5d7d915f61
  :note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    As can be seen from the directory naming (LayoutTests, etc) there was
    testing for the code surrounding the vulenrability, this vulenrability was
    just not thought of at the time of implmentation. Included in the
    vulnerability fixing commit was a unit test to confirm the
    fix held and to use in future testing periods.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    It appears that an external user (cloudfuzzer) discovered the bug and reported
    it to the developers, along with the mitigation that ended up being accepted
    into the code base. They state where the memory for the node is allocated, and
    where it is freed and states that Javascript code can be executed between both
    commands.
  date:
  automated: false
  google: false
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: derived from the bug report and source code file paths
  name: WebCore (renamed to core)
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 2a3edd484a426bf5cbb001311e4c30e1ead3ec17
    note: |
      They replaced a pointer for the LastDescendant method return with a
      reference, giving the reasoning that it makes it look safer and gets
      rid of null checks, this is similar to what they end up doing for the
      vulnerability fixing commit. It seems the developers reconized the
      vulnerability in the system but did not find all the instances of it
      when they pushed this commit.
  - commit: a7b6221b53b10c803440be1d62faa5dcff9bd6f2
    note: |
      This commit changed the inserted HTML sanitize process in order to avoid
      null pointer references, it appears they reconized the possibility for
      inserting a node to create a null pointer but not removing until the
      vulnerability fixing commit was added.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There does not appear to be any major events during this time.
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
  use_after_free:
    applies: true
    note: |
      The vulnerability was centered around the ability to create a denial of
      service attack or another attack through Javascript that was able to remove
      a node in the DOM tree during processing. This results in the system
      attempting to use an already removed node and a malformed DOM tree.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main mistake that was made was a coding mistake in the implmentation
    of the web engine (Blink) and it's interaction with Javascript code. The
    authors of the code base did not ensure the node pointer was correctly
    protected and removed from reference after it was expected to be freed.
    The authors of the code mitigated the vulnerability by switching from a
    pointer, which does not have automated memory management, to a smart
    pointer, which is an abstract data type that acts as a pointer but can
    also come with automated memory management.

    Someone with more experience may have knew that Javascript code could be
    executed between the allocation of the pointer and the freeing of the pointer
    but the authors implmentated the smart pointer without undue trouble.
