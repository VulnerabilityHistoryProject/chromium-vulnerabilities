---
CVE: CVE-2013-2873
nickname: 'Use After 404'
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [416,399]
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: '2013-07-09'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  When loading the error 404 page, there was a vulnerability in WebKit in which
  an object called the WebURLLoader was used after being deleted.  The WebURLLoader was 
  originally released because it received an inter-process communication that the page had 
  finished loading.  The subresources of the 404 page had transitioned into the finished state, 
  but may have signaled an error that resulted in a message from a nested message loop.  
  Because the subresource was already finished and the WebURLLoader had been freed, a use-after-free 
  crash occurred when the subresource attempted to proccess the body received from the nested message loop.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2013-07-09
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2013/07/stable-channel-update.html
reviews:
- 15725010
- 15738007
- 16758006
- 15859009
- 16767003
bugs:
- 241139
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 5d7dc5133c623d55b650eeef2cdcd86079e494da
  :note: |
    Adds a line that uses a scoped ref pointer to protect the WebUrlLoader from being released
    and a test from a previous, similar bug that had been reverted shortly after landing.
vccs:
- :commit:  b2787cf4c95b5e22162a345140a9350bcd5b675e
  :note: |
    Addition of most of the WebURLLoader logic, including a check if subresources received
    a response without protecting the WebURLLoader, which allowed some responses to didReceiveResponse
    to cause a use-after-free if the WebURLLoader had already been freed.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    This vulnerability would have been caught by a unit test that was added a few months
    earlier after a similar vulnerability, but the test was reverted almost immediately
    after landing because it failed on Chrome's UI Framework.  One of the developers
    hypothesized that that failure occurred because of this vulnerability.  As part of the
    fix, the test was reinstated.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The bug was discovered by third party miaubiz, who tested the system using Google's
    Address Sanitizer (ASan) to build the unit tests, leading to the system crash.
  date: 2013-05-15
  automated: true
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Found via the source code file paths
  name: 'WebKit, WebURLLoader'
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    See below
  commits:
  - commit: 370bd9b522d2ccd4a3113d6c93d30cdf8ca502ef
    note: |
      Original fix, was reverted and relanded a few days later for unspecified reason.
  - commit: d844b25778a0c4fe05278570e6d6c47b7ba8e8c5
    note: |
      Commit that reverted the original fix.  No message added as to why the change was landed,
      reverted, and re-landed within a few days.
  - commit: 42dfa3a3eae863ce14dc8446d0df536dfd8c093a
    note: |
      Reverted test that would have caught this vulnerability due to the test failing
      on Win Aura, Chrome's UI framework.  The test had been added to catch a similar
      vulnerability.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    See below
  events:
  - name: 'Similar bug (WebKit bug #103563) mitigated, resulting in the addition of the test that was quickly reverted'
    date: 2013-01-12
  - name: 'Chromium begins releasing v28 with Blink replacing WebKit'
    date: 2013-06-17
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
  use_after_free:
    applies: true
    note: |
      Similar to the double-free vulnerability, in this bug, the WebURLLoader was used after being deleted
      upon receiving notification from an inter-process communication that the 404 page had finished loading,
      resulting in a crash.  The fix added a protective pointer to the WebURLLoader to prevent this.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The fix for this vulnerability was simple enough (adding a protective pointer),
    but the main mistake was the developers' failure to reinstate the reverted test that
    would have caught this vulnerability months earlier.  It's unclear why the test was reverted
    and never reexamined, but because the comments on the thread for the reverting commit stop after
    a few days, it's likely that the team because busy with more pressing matters and simply forgot about
    the test since the fix itself for that bug had landed fine.  This was a process mistake, possibly due to
    miscommunication or the emergence of higher-priority bugs.
