---
CVE: CVE-2016-1697
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-79
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-06-05 19:59:27.213000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Attackers were able to create javascript code that would escape from a html
  specific html element known as an iframe, allowing them access a different 
  page from an untrusted origin and execute javascript code on the target page.
  
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-06-01 17:16:00.000000000 -04:00
  amount: 7500.0
  references:
  - http://chromereleases.googleblog.com/2016/06/stable-channel-update.html
reviews:
- 2006033002
- 2026823003
- 2021373003
bugs:
- 613266
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 1948aefa8901dca0ccb993753fca00b15d2a6e25
  :note: ''
vccs: 
- :commit: ee9517e8ef4695d0fa2bdbdbc87237bc75022000
  :note: |
    this is where frame detatchment was initially implemented, which is
    what eventually lead to the issue
    
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The module was tested using an html file that would run within the browser.
    If this particular file did not crash the browser, the test was viewed as a
    success. The fix added a new browser test file, 
    start-load-during-provisional-loader-detach.html. This file was a direct test 
    for the fix, in order to check that the fix was done correctly. Beyond this 
    there were no additional tests added
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This bug was discovered by an independent developer who was able to craft an
    exploit that would allow for cross site scripting in apple.com. The exploit
    was reproduced by Google employees after some effort, and a fix was implemented
  date: 2016-05-19
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: | 
    The vulnerability existed in blink, a part of the third party rendering
    engine, WebKit, that chromium employees had been developing.
  name: WebKit Blink
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 73563fee12defb21a8f955993b68907169e1ea6d
    note: |
      This commit made changes to the way frame navigations could be enabled and
      disabled. Disabling frame navigations was an important part of the fix, so
      this commit may have affected the fix, and may have even contributed to 
      causing the exploit.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There was a big rush to get this bug fixed before the next stable launch. 
    As a result, the fix was put out rather quickly, and there weren't any
    changes made or suggested to the system as a whole that might prevent
    similar issues from occuring in the future.
  events:
  - name: M51 Stable Launch
    date: 2016-05-23
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: True
    note: |
      The fix involved disabling a pages ability to navigate between frames
      during a certain point in the load process. It appears that taking
      away this privelege did not have any negative side effects, meaning
      it is a functionality that should have been disabled by default, even
      without the exploit.
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability was primarily the result of an oversight in the product
    design. Nobody considered how frame navigations could be used to exploit
    a weakess in this product. On top of this, since frame navigations were
    not a necessary function at this point of the execution, a good design
    choice would have been to have them disabled by default. 
    The suggested mitigation for this type of cross site scripting is minimize
    the attack surface. Disabling frame navigatons while detatching a frame
    completely cuts out the portion of the attack surface that is exploited
    by this vulnerability. The fix completely mitigates this exploit, since 
    frame navigations cannot be exploited if they are entirely disabled. 
    This change, however, was only applied to one part of the code. It may be
    worthwhile to review other similar areas of the attack surface and determine
    whether security by default can be applied to these areas of the code to 
    prevent similar exploits from happening in the future.
