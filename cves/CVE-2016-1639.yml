---
CVE: CVE-2016-1639
CWE: 
announced: 2016-03-05 21:59:10.163000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Based on the report of CVE-2016-1639, there is a Use after Free vulnerability in the WebRTC Audio Private API implementation in Google Chrome.
  
  Use after Free is a memory problem where the memory is referenced after it is freed. Developers usually face this problem in many application where
  they have to allocate memory and the previoused memory was freeed. It may cause the program to crash or use unexpected value to perform a certain action. 

  The Use after Free vulnerability is dicovered in the file webrtc_audio_private_api.cc with the path browser/extensions/api/webrtc_audio_private/webrtc_audio_private_api.cc
  in the WebRTC API. The vulnerability may cause denial of service or unexpect result by dependent on resource context pointer. 
bounty:
  date: 2016-03-02 15:41:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/03/stable-channel-update.html
reviews:
- 1692913003
- 1703733002
bugs:
- 572224
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: c4e893a3352c34e1a22ec6afad115887a69f576e
  :note: ''
vccs: []
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There is no unit test involved in this velnerability. 
    There was no unit test for the function CalculateHMACImpl in this case.
  code: false 
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    An anonymous user replicated an error when he opened gmail. There is unknown error for the function CalculateHMACImpl
    and it cause a crash in the program when the user used a new incognito window .
  date: 2015-12-25
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The vulnerability was discovered in the webrtc_audio_private_api function . The subsystem is in the chrom bwoser api.
  name: webrtc_audio_private
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 6b490c6fd81af60c1e5962054205c417f1bb27e7
    note: |
      The lines between 209 - 213 provide a storage for resource context to access Storage Device salt ID later. 
      There is no code to check if this pointer still existed before the user can access Storage Device Salt ID. 
  - commit: 076ebedaa781461c668ea435ef3af3ca707775d5
    note: Deprecate methods were removed after a year. It is a long time to make this change.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: commit 7b6559a8ce5327ab6a276accda2ad1c252926af7 show a change in audio output device for the api
  events: 
  - name: The authoer Use TaskRunner instead of WorkerTaskRunner for audio output device enumerations in WebRTC audio private API.
    date: 2016-02-03 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The fix for this vulnerability involved checking the null pointer for resource context.
      The system store Storage instead of resource context pointer to access Device salt ID to avoid the case where the system free resource context. 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: |
      It is neccessary to check if the pointer to a memory is still available. 
      This vulnerability happened because the developer didn't check the situation where an old memory was freed and the system resued that memory. 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The Use after Free is a simple oversight issue when the system has to deal with pointer. However, it seem like the vulnerability is ignore in commit 
    f9583f83523a0ad7c2c97300dfe303066bcb1ec0. The system attempted to retrieval the media device ID salt even after resourceContext is no longer available. 
    The design may not work well to lead to this vulnerability. It is important to have a solid design of how to handle memory allocation and free it afterward. 