---
CVE: CVE-2015-1295
CWE: CWE-20
announced: 2015-09-03 18:59:05.703000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: When opening a PDF file into chromium, the client would pause for the few seconds and give a message. Upon hitting OK or escape, chromium would crash. This was due to the program not handling ICP correctly.
bounty:
  date: 2015-09-01 15:15:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2015/09/stable-channel-update.html
reviews:
- 1228693002
- 1246673005
bugs:
- 502562
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 8fa5a358cb32085b51daf92df8fd4a79b3931f81
  :note: ''
vccs: 
- :commit: 88b0e27b63f88b21538ffd0531d08ba043ee1189
  :note: |
    Apparently there was an issue with the PrintWebViewHelper not handling nested IPC. This could result to nested message loops which would eventually cause denial of service.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: Yes, in /components/printing/test/ there are a few files that test rendering and PrintWebViewHelper.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.

  answer: A user apparently found this bug by opening a PDF in chrome which opened a print preview page that opened up an alert dialog after three seconds. Once you hit OK or the escape key the Mimehandler process for the PDF will crash.
  date: 2015-06-20
  automated: false
  google: nil
  contest: false
subsystem: components/printing
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This was mainly in the renderer folder of the printing component. Only two files were impacted.
  name: /components/printing/renderer/
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 88b0e27b63f88b21538ffd0531d08ba043ee1189
    note: This was the last recorded commit of the bug. Here is where the problem could be found that allowed the vulnerability to happen due to PrintWebViewHelper not handling nested IPC.
  - commit: 8fa5a358cb32085b51daf92df8fd4a79b3931f81
    note: CHECK_LE function was added to most methods in both files associated with the fix. ipc_nesting_level was also added and managed throughout each file.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There wasn't too many changes, just a small change that dealt with IPC management. The code was not rewritten. Only two files were modified. The team generally remained the same. Vitalybuka (owner of the conversation on bugs.chromium.org) was seen active often.
  events:
  - name: vulnerability found
    date: 2015-06-20
  - name: files 'print_web_view_helper.cc' and 'print_web_view_helper.h' were modified to handle nested IPC.
    date: 2015-07-09 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: this vulnerability was recieving input that resulted in denial of service.
  security_by_obscurity:
    applies:
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The vulnerability seemed to be caused by a lack of managing input. Because the file didnt' correctly handle nested ICP people were potentially able to cause crashes by printing out messages. The vulnerability alone was already causing issues alone just by a user loading up a specific file. In short, always make sure your design is able to handle any potential input it may recieve.
