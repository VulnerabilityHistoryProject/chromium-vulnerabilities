---
CVE: CVE-2010-3247
CWE: 451
announced: 2010-09-07 14:00:02.510000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description:
  Google Chrome doesn't properly respect the characters in urls, allowing remote
  attackers to visually spoof the url bar using sequences of characters that
  are being used for a different purpose than their intended use.
bounty:
  date: 2010-09-02
  amount: 0
  references:
  - https://chromereleases.googleblog.com/2010/09/stable-and-beta-channel-updates.html
reviews:
- 3015056
- 3011012
bugs:
- 37201
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 9e7fbfea4a79dbb7f3aa8e71f41b3ca4e40fe3b7
  :note: 'Add URL filter to trigger punycode for Japanese homographic
    sequences.'
vccs:
  - b5b2385af64eb08b1feb53fb0ad65c835f472912:
    note: They were working on a fix for a different bug at the time.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: There appeared to be unit tests both before and after the fix, but the
    tests that existed before the fix did not cover the issue that caused the
    vulnerability.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: It was discovered by a person working at a security company called
    Casaba.  It was not clear if the bug was discovered by automated or manual
    testing on their end, but it can assumed that they found this bug in the
    process of searching for possible vulnerability as part of his job working
    in security.
  date: 2010-03-02
  automated: null
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the components shown in the bug's blog post.
  name: Omnibox of the browser's UI
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: ce85f60cd9d399109dab39fe5a9613879ab9a8f7
    note: A lot of code was added/deleted in this commit.  This code changed how
      urls autocompleted by changing several properties of the url that affect
      the autocompletion.  Given that the vulnerability's is about visually
      spoofing urls, this commit may have affected the vulnerability.
  - commit: d6e58c6ef48f52cce6cdf781c5a507e254322425
    note: This commit put certain unit tests into their own file and changed how
      icu string conversions were handled, which may have affected how urls
      were handled, which would affect the vulnerability.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: A large change in code occurred in between the vcc and the fixing
    commit that change the way that urls were autocompleted which could have
    changed the nature of the vulnerability.
  events:
  - name: url autocompletion commit
    date: 2009-11-07
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: The fix for this vulnerability filtered code going into the url, so
      distrust of input was applied.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: The solution used to fix this vulnerability appeared to be by the used
      of regex, which is a specific class for regular expressions, which is a
      very complex language.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: I believe the major mistake that lead to the creation of this
    vulnerability was the lack of testing on visual spoofing of the urls.  If
    there were more testing of this sort that included the use of foreign
    characters, such as those that made this an issue, this may have been caught
    and handled much earlier.  The lack of testing on Google's end meant that
    it had to take the outside testing of a security company to happen to find
    this vulnerability for it to start to get addressed.
