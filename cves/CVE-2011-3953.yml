---
CVE: CVE-2011-3953
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-267
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2012-02-08 23:10:28.473000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  After a user performed a paste operation, an attacker could use malicious
  code on a webpage that could start a loop that would continiuously monitor 
  the user's clipboard. This could allow attackers to steal password information 
  and other sensitive data from the clipboard
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 7222016
- 8511042
- 8501002
- 8524014
bugs:
- 73478
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 725c68279789e7a3a7726e5a1a919aa2aae27f07
  :note: ''
- :commit: 9cf12c316c486bccd4680a2366f00707917771d8
  :note: ''
- :commit: 34720ea2dcccd88e0f3054ab567a15cea06f97f4
  :note: ''
- :commit: 75e8f940cb3e6c29aed4c80dd9a88c5186843068
  :note: ''
vccs:
- :commit: 09911bf300f1a419907a9412154760efd0b7abc3
  :note: |
    This vulnerability has existed since the initial commit. The system
    read from the clipboard since the beginning with no way of making
    sure that the data stayed the same, which is how the fix was 
    eventually implemented
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There did not seem to be any unit tests involved with this vulnerability.
    Testing seems to have been done by hand once the vulnerability was found.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was discovered by a google developer who was working on the
    project at the time. After it was introduced, it underwent several months of
    discussion before finally being mitigated
  date: 2011-02-19
  automated: 
  google: true
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This was a part of the renderer subsystem
  name: renderer
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: d2a2a409f713ce9f28b8d40b3ed2ef9140057a38
    note: |
      This is where the clipboard image rendering functionality was added to
      Linux. Since the Linux clipbboard does not store a clipboard version
      number, the vulnerability fix for Linux turned out to be the most
      difficult part of the fix.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    This bug fix was delayed multiple times, and seemed to be picked back up
    again at the start of the next milestone, likely due to other deliverables
    that were deemed to be more important. These are some of the major milestones
    that delayed the progress of the vulnerability fix.
  events:
  - name: Chromium Milestone 11
    date: 2011-03-22
  - name: Chromium Milestone 12
    date: 2011-05-26
  - name: Chromium Milestone 13
    date: 2011-07-06
  - name: Chromium Milestone 14
    date: 2011-09-28
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Defense in depth was carried out in this area, making the issue less severe.
      If an attacker tried to use this exploit, the user would see a warning that
      the page was stuck in a javascript loop. Although this did not prevent the
      exploit from occuring, it at least gave the user an idea that something
      suspicious was going on if an attacker tried to monitor their clipboard.
      This use of defense in depth made the vulnerability much less dangerous
      than it otherwise could have been. Unfortunately, as a result of this
      partial mitigation, the issue was viewed as low priority and went several
      months without being fully fixed.
  least_privilege:
    applies: true
    note: |
      Although the target site should have had access to the system clipboard
      in order for the paste operation to be carried out, access to the clipboard
      was maintained for too long, allowing attackers to violate confidentiality.
      The eventual fix involved further restricting this privelege.
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: true
    note: |
      In the case of this vulnerability, executing a paste operation gave
      a site access to the users clipboard for as long as it was needed,
      rather than just the short time it would take to write its contents
      onto the page. The impact of this vulnerability may have been reduced
      if operations such as this one were given a default timeout.
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The primary mistake here was simply an oversight in the implementation of the 
    product. None of the developers thought of this attack as a possible issue for 
    a few years after it was introduced, and it was therefore not directly mitigated
    for quite some time.
    The developers did a good job during the design of the product by applying
    defense in depth to this area, so that users were at least notified when
    something was wrong. They could have possibly gone further than simply
    notifying the users, but this was likely a design tradeoff that the
    developers knew about going in - allowing sites to remain in infinite
    javascript loops in order to prevent a total crash. The mitigation for 
    this CWE states that priveleges should be extended only to complete 
    the exact task at hand. The fix for this issue does not follow this 
    exactly, as access to the clipboard is not terminated directly after 
    the paste is complete, it is only terminated if the contents of the 
    clipboard are changed. There does not, however, seem to be any direct 
    negative security implications to this fix, since the site is still 
    restricted to see only the clipboard contents that it already read from 
    the paste operation. Still, further thought could be put into this fix 
    in order to be sure that the attacker cannot exploit some other method 
    of stealing clipboard data using the permissions they are given.
