---
CVE: CVE-2010-2105
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 181
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2010-05-28 14:30:01.613000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Safety specification requirement is not fulfilled within URL Canonicalization.
  Canonicalization is the process of picking the best URL when there are several choices,
  usually referring to home pages. The unfulfillment has an unspecified impact and can
  potentially have attacks from remote locations. Realistically speaking, this canonicalization
  is what tells the URL bar what the master page is, rendering multiple identical pages void.
  Due to this vulnerability, potential attackers may gain numerous hidden details by crawling
  the web page, potentially leaking sensitive data.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date:
  amount:
  references:
reviews:
- 1275002
bugs:
- 7713
repo: https://src.chromium.org/viewvc/chrome?revision=43100&view=revision
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 69ee9c92af91fdad5aabf0f5696cd0432102985f
  :note: ''
vccs:
- :commit: 7753c3f48f5d3fea1ac91575de75d78f8085be83
  :note: There was a change in logic, so large portions of the file with the vulnerability was taken out as well as missing details regarding Safe Browsing Specialization rules.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 0
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: From the commit messages, there is a test file referenced: SafeBrowsingUtilTest.CanonicalizeUrl.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The actual vulnerability was discovered through theory crafting on the bugs page for chromium.
    brettw@chromium.org brings it up to his coworkers, stating "I think this means we're missing
    malicious URLs with escaped characters in them. After passing around the potential vulnerability
    to serveral individuals they discovered that several things needed to be accomplished. Such as
    removing fragments in the URL, URL unescaping until no more hex encoded characters exist, removing
    trailing dots, etc etc.

    https://bugs.chromium.org/p/chromium/issues/detail?id=7713
  date: 2009-02-13
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on the description of the CVE and the location of the committed file.
  name: browser
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: 0e59ebae17321e4e5b406fa18246a08e7fd32c16
    note: |
      Product names for safe browsing report_errors and report_phish URLs were on Windows. However
      on Google Chrome, Chromium, Chrome Frame, on Mac and Linux this remains as just 'googlechrome'. Meant the
      safe browsing URLs are tagged with the correct product name for each product.
  - commit: 080438b8886070e399c326f757cd96976a7a81ec
    note: |
      Refactoring commit. Shortened a lot of code, in addition to making code less repeated. Consistency within
      operator comparators such as != vs ! variable. Additional comments.
  - commit: eef5337c72da6d28a00b45df020ac9054d58e5f2
    note: |
      Lot of dead code removed. Most likely in relation to dealing with reworking the logic in related
      to safe_browsing agreement specifics.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: Yes
  events:
  - name: Refactoring
    date: Thu Dec 3 18:17:12 2009
  - name: Dead Code Removal
    date: Thu Feb 18 23:53:11 2010
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      The concept of URL canonicalization is the idea of distrusting whatever the user is putting
      in to the url address bar, and decoding it as a safe link to move forward. The user can put in
      anything to their hearts desire, and cutting down on dangerous things they can input is part of the
      key to the fix for this vulnerability.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: true
    note: |
      This is slightly true. As in to say that the user is removed several privileges of what can or cannot be
      input to the URL however, that does not change the fact that the software is now made to be safer. The default
      configuration prevents a path traversal attack from the get go.
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: |
      More complicated inputs that the system deals with within the URL, such as the usage of symbolic characters
      are dealt with within the canonicalization process.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability was most liekly found through a realization through
    design mistake. Posted below is the protocol specifications in relation to
    combating phishing attacks. In that it was most likely a realization in comparing the
    results of their efforts at the current time in addition to reviewing what the specification
    covers. Going forward, not many issues in regards to coding or miscommunication are found here,
    upon theory crafting and attempting to verify the project scope in relation to the specifications,
    the team dedicated to safe_browsing ultimately passed around the issue in regards to a fix and within
    6 or so commits were able to rewrite and get their logic together.

    Looking at the CWE entry, the mitigation is covered in regards to decoding and canonicalizing the URL.
    Ultimately, the resulting code enables safer handling of CWE-21, which is path traversal attacks.

    I feel as if this problem could have been easily solved by various verification and validation checks on
    project specification and scope.

    https://code.google.com/archive/p/google-safe-browsing/wikis/Protocolv2Spec.wiki
    https://cwe.mitre.org/data/definitions/181.html
