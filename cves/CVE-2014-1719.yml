---
CVE: CVE-2014-1719
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-04-09 06:57:15.977000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A vulnerability was found that allowed for already used memory to be used again in the Web workers API implementation. The
  vulnerability allowed remote attackers to cause attacks that could bring down the system as well
  as possibly have inputs that trigger a termination of shared web workers during script loading.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-04-08 13:35:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2014/04/stable-channel-update.html
reviews:
- 171943002
- 175093005
bugs:
- 343661
- 344750
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: b183147e6d71fdafc675a769abb07c568b47241b
  note: The line containing impl_->terminateWorkerContext() was moved thus changing
    the order of when terminateWorkerContext() is called. Moving the function helped
    avoid the user-after-free crash.
vccs:
- :commit: 6898bbedb15bfddf91ea125e3ffde4b1789d9bf3
  note: This is when the intial code was added in and the implication of the placement
    of the vulnerability creating function was not known
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: After the fix was added ClusterFuzz had testcases to which pointed to two
    potential issues. The testcases weren't immediately pointing to a problem, in
    fact ClusterFuzz was overlooking the use-after-free that a developer was able
    to reproduce locally.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found by a user (Collin Payne) when deleting a database from a worker while the same database was in use
    by another worker (the other worker triggered a reload) causes a use-after-free vulnerability
    meaning even after the database was deleted it was able to be used by another thread.
  date: 2014-02-13
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: "This was found in the Web Worker code (javascript). The subsystem looks
    like it was in \nthe shared worker module inside of the Web Worker API. \n"
  name: Blink/Chromium's Web Workers
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: f94ead7d53296e14f1254ad1cdd4b73f3d6b9130
    note: This commit was interesting because this is when the code was being reverted
      for the intial code that caused the bug. This was not when the bug was found
      or known but just when that commit was being reverted. This is interesting because
      the revert could have caused potential conflicts that caused the bug to ensue
      or go unnoticed.
  - commit: bec1ed112990143fe30b6cae4624fdde3015efce
    note: The commit followed the reverted commit for the implementation with the
      bug. This one was particularly interesting because there were some refactorings
      done for reusue between the code.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: "The reverting of the initial implemented in the shared worker stub was
    interesting\nbecause it had a bug at that time but that was ~5 years before the
    bug was actually \nnoticed. Reverting the commit could mean that when the code
    was potentially added back\nthere were some complications or could have had the
    chance for miscommunications\nthat caused bugs. After the reverting of the code
    there was a refactor that happened\nand then the code was added back in. \n"
  events:
  - name: Revert of initial implementation
    date: 2009-11-05
  - name: Code was added back in along with Refactor
    date: 2009-11-05
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: true
    note: |
      In this case the bug was found when a user utilized the Web worker API.
      The security of the API shouldnt relied on users utilizing it a certain way.
      The denial of service issues and crashing issues were related to users being able
      to take advantage of the API.
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "The mistake came from a coding flaw and caused what would be a denial of
    service\nattack as well as other potential errors. This could have been avoided
    by knowing\nwhere the function should have properly been placed. Moving the position
    of one \nof the lines of code is what made the fix. \nThere may have been a potential
    for the vulnerability to have been fixed during \nthe design phase of the module.
    During the code review is when it seemed like the \ndiscussion was sparked regarding
    the correct placement of this line. If the discussion\nwas brought up during implementation
    or if the implications of the placement of the \nline of code were known it could
    have been mitigated. \n"
