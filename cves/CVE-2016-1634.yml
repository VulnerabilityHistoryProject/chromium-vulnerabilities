---
CVE: CVE-2016-1634
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-03-05 21:59:05.463000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A JavaScript script creates an input element inside a form element and adds them to the DOM (web page),
  then forces a style recalculation and removes the input from the form element. Due to the
  synchronous order of execution that should have been asynchronous, it would cause a use-after-free
  error. This occurs becausehere a memory address that has been freed is attempted to be accessed, because the style
  recalculation and element removal are executed in the wrong order.

  This vulernability exists in the third party WebKit source.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-03-02 15:41:00.000000000 -05:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/03/stable-channel-update.html
reviews:
- 1556963002
bugs:
- 559292
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 0b0f3ace8820d371e6f4b2b61354728a71ce8356
  :note: 'This commit adds a check for the error case and returns the function early if it will occur'
vccs:
- :commit: 7b0afec9845caaabe0b7f8e7d195ea70438df523
  :note: |
    The commit adds most of the surrounding code, including the use of the treeScope, which is where the
    use-after-free error occurs.
- :commit: 5aafe0dbc8bd3bc2e0579d9190b4eb1db7908032
  :note: |
    This commit adds the code that calls the style sheet changes in which the actual use-after-free error
    most likely occurs. 
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The fixing commit includes an html file with a script tag that includes the
    JavaScript that caused the use-after-free error. It is a simplified version of the
    JavaScript originally submitted by cloudfuzzer, who reported the vulnerability. It
    is used in automated tests to check if Chromium crashes when opening the html file.
    The original code was unit tested but this vulnerability is a new test case that was not being tested.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This vulnerability was reported by the user cloudfuzzer, and it appears that JavaScript
    was manually written to find this vulernability. Given the volume of reports that the user,
    cloudfuzzer, submits, and the names of the variables used in the exploit code, it's also possible
    that this was automated in some fashion. Since it's unclear if it was automated, I've marked automated as nil.
  date: 2016-01-12
  automated: 
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer:
    name: WebKit
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: The VCC commits were the last commits to the affected code, so there are no interesting commits between the VCCs and the fix.
  commits: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There is no evidence from the issue report thread that any major events happened that influenced this vulnerability.
    This is a simple case where an edge case was not thought of or tested, and a third party user tested it and discovered
    a vulnerability.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: |
      The vulnerability applies to a component that interprets client side JavaScript.
      User-inputted code may be the most complex inputs possible. Naturally there are
      many subtle vulnerabilities, like this one, that arise when dealing with it. In
      this case, WebKit encountered a use-after-free error due to the order of operation calls
      by a specific set of JavaScript. WebKit was updated to handle these calls asynchronously and in the
      correct order. Given the infinite combinations of JavaScript calls that can be made there is no
      way to make WebKit vulnerability-free. The team can only continually improve its resistance to these
      types of vulnerabilities.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    There seems to be a design/code mistake in the processing of the DOM operations.
    Ooperations that should be handled in the correct asynchronous order were handled
    synchronously which allowed for operations to occur in an invalid order that caused the
    use-after-free error. The mitigations offered on the use-after-free CWE suggest using a
    language that offers automatic memory management. For WebKit, performance is key so the use
    of C++ makes sense, whereas using a language that manages memory automatically would
    hinder performance too much. Therefore, it's not a valid mitigation or one that the WebKit team
    practices. The second mitigation suggests setting pointers to NULL after freeing them.
    Based on the results of the vulnerability's exploit case, it seems that this was not being
    practiced in the code. I was not able to find a concrete example in the code
    due to its complexity.
