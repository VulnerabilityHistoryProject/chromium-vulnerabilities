---
CVE: CVE-2011-3876
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-noinfo
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-10-25 15:55:01.087000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "File downloads with trailing whitspace characters at the end of the
  file name were not handled \nproperly. No download warning was given to users if
  they weren't explicitly downloading .exe \nfile. Users could download a .exe%25C2%25A0
  file without warning trailing characters were \nstripped from the file name which
  may lead to a user downloading something like a .exe file \nwithout their knowledge.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2011-10-25
  amount: none
  references: https://chromereleases.googleblog.com/2011/10/chrome-stable-release.html
reviews:
- 7647014
- 7631028
bugs:
- 90217
repo: https://chromium.googlesource.com/v8/v8/net/base/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: e83da753f6fcbccdea0a66d8ac04c6d2c4ecbeb9
  :note: 'Replace whitespace at beginning and end of file with hyphens, rather than
    silently discarding.

'
vccs:
- :commit: 45f9adb0aebb394594a949e3312901219b62ac04
  :note: truncating white spaces instead of replacing them
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: "within net/base/net_util_unittest.cc unit tests were written to ensure
    file names with \nwhite spaces would convert the white spaces into \"-\" characters.\n"
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: I am unsure since this is employee found, probably through experience with
    the bug.
  date: 2011-07-22
  automated: false
  google: true
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The code is found within the directory net/base/
  name: net/base
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 45f9adb0aebb394594a949e3312901219b62ac04
    note: "sanitation was thought of but it seems as a there were a couple mentions
      of it (no comments \nwith detail other than mentioning escaping chars in the
      file name) that not all \npossibilities were thought of at the time and therefore,
      best practices were not applied\n"
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: "It seems like the team was fluxating a lot. Everyone seemed to only stick
    around for a few \nmonths and then new people would come along. Might contribute
    to silly mistakes in the code \nlike this one.\n"
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: "Don't trust downloads and executables from other sources. Don't trust the
      user fully \nunderstands what they are downloading.\n"
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: "By removing the trailing characters and altering the file name a user could
      download a \nmalicious file without knowledge. The computer trusted the input
      when the original file did \nnot end in an .exe but continued to trust it once
      the trailing characters were stripped.\n"
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "It seems like this was a coding mistake that no one initially caught because
    it occurs in a\nvery specific circimstance that doesn't happen often. The developers
    probably did not \nrecognize this as an issue when they created the bug. The fix
    replaced whitespace in file \ndownload names with hyphens instead of wiping them
    out completely. This is a better \nsolution although it still gives the user to
    download an exe without warning. The user \nwould now have to manually alter the
    file name in this case in order to allow the file to \nact maliciously which is
    better than potentially converting a file to exe without warning.\n"
