---
CVE: CVE-2013-0881
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 20
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-02-23 16:55:01.077000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Google Chrome allowed remote attackers to cause a denial of service 
  (incorrect read operation) via crafted data in the Matroska container format.
  This is because of the manipulation with an unknown input when calling the function
  matroska_parse_laces which in turn led to out-of-bounds reading in the memory.
  More specifically, this caused a Heap buffer overflow.
  Matroska Multimedia Container is a file format that is able to hold unlimited 
  numbers of video, audio, picture, or subtitle tracks all in one file. 
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2013-02-21 17:00:00.000000000 -05:00
  amount: 500.0
  references:
  - http://chromereleases.googleblog.com/2013/02/stable-channel-update_21.html
reviews:
- 11647042
- 11280301
bugs:
- 167069
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: b5eca3cffa0afa077d24d98a1f7d9e4b44e5ad4e
  :note: |
    Adding AVSampleFormat to SampleFormat converters in FFmpegCommon and decoder support for
    float planar and float interleaved playback.
vccs:
- :commit: 61e4a97449c59ce762603139ee541528b37d5c64
  :note: |
    Developer who wrote the code to read audio files did not check the edge cases for what MP3 
    can decode to. Chromium does not support S16P.
- :commit: 1bae3ad673292afa7915611c3432b313b221c373
  :note: |
    The developer overlooked possibility that some codecs only output float data. Chromium's pipeline,
    or more specifically Chromium's implementation of a media playback engine does not support passing 
    of float data between the files FFmpegAudioDecoder and AudioRenderer. FFmpeg is defined as an open 
    source library used for container parsing and audio/video decoding
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Yes they were. The original code was unit tested and the fix improved the tests by
    adding extra checks in the code that verifies the audio hash and editing some functions
    to use their newly added Sample Format.
  code: True
  fix: True
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Reported by an outsider that goes by the name Atte Kettunen(attek...@gmail.com).
  date: 2012-12-20
  automated: 
  google: False
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Based on the CVE description that talks about media formats and the codebase 
    in which the files were found in, it is safe to say this mistake was found in 
    the media subsystem code.
  name: Media
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 1bae3ad673292afa7915611c3432b313b221c373
    note: |
      This commit, though it was one of the vcc's introduced a lot of new code such as 
      an audio_splicer and an audio_time_stamp_helper. What is interesting is that the developer,
      acolwell@chromium.org added very thorough unit tests for both of those files that verified
      if the code they added worked as intended.
  - commit: b5eca3cffa0afa077d24d98a1f7d9e4b44e5ad4e
    note: |
      This commit is the fix to this vulnerability but there is a something very interesting and peculiar about it.
      In the file, media/base/audio_decoder_config.cc in the method, AudioDecoderConfig::CopyFrom, dalecurtis@google.com,
      the developer who fixed this vulnerability removed many of the getters for AudioDecoderConfig from the config.cc file
      and moved it to the header file media/base/audio_decoder_config.h. This commit is interesting because I'm not entirely
      sure what the benefits of doing so are.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There appears to be one major event I found that is not directly related to this vulnerability but it has to do with
    adding support for a different type of file, more specifically VP9 video in .
  events: 
  - name: Adding support for VP9 through the addition of a wrapper class
    date: 2012-12-21
  - name: Reverting the commit above due to failures in updating or running the build.
    date: 2012-12-28
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: False
    note: 
  least_privilege:
    applies: False
    note: 
  frameworks_are_optional:
    applies: False
    note: 
  native_wrappers:
    applies: True
    note: |
      In this vulnerability, the person who wrote the code for the audio decoding did not check
      that the chromium pipeline does not support floats between FFmpegAudioDecoder and AudioRenderer.
      Since this code works with the decoding of audio, when handling different formats, it also inherits
      all risks of using that language. In the case of this vulnerability, the chromium media subsystem 
      inherited the risks of using the code in matroska and so needed to perform input validation and sanitzation
      in order to catch errors like this where it was able to read out-of-bounds memory.
  distrust_input:
    applies: False
    note: 
  security_by_obscurity:
    applies: False
    note: 
  serial_killer:
    applies: False
    note: 
  environment_variables:
    applies: False
    note: 
  secure_by_default:
    applies: False
    note: 
  yagni:
    applies: False
    note: 
  complex_inputs:
    applies: False
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistake that led to this vulnerability was the developers not checking the outputs of all the file formats
    that they were decoding. In the instance of this vulnerability, the developers allowed remote attackers to
    cause a DOS due to carefully crafted data in a Matroska container format. The developer had not checked a function
    that related to matroska, more specifically matroska_parse_laces(), that moved a pointer in the file forward but did
    not subtract the size of the file which caused an out-of-bounds read.
    This could have been easily prevented had the developers checked all use cases for the formats they support and made sure 
    that the file's outputs were accounted for if they do support media formats such as matroska. Also the developers noted that
    the vulnerability was old and dated back three months prior to this. The unit tests should have been more robust and the requirements
    should have been more fleshed out so that all use cases were covered. 
