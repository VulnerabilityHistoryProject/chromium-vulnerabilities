---
CVE: CVE-2013-2914
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 825
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-10-02 06:35:35.167000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "In the color chooser dialog on Chrome before 30.0.1599.66, \nthe listener
  in ColorChooserDialog did not properly dereference when the \ncolor chooser dialog
  was destroyed because of a page destruction (page \nclose). This led to a stale
  reference that attackers could use to cause\ndenial-of-service.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2013-10-01 12:38:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2013/10/stable-channel-update.html
reviews:
- 23785003
- 24138002
bugs:
- 279263
repo:
- https://chromium.googlesource.com/chromium/src/+/lkcr/third_party/WebKit/Source/core
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 5ecc8d42ff888ff8b459df566208e7e01a3be5ba
  note: ''
vccs:
- commit: 1075da5df3dfec5adc6816aa2ac736d71c55a6c9
  note: This bug was built into the original subsystem, but wasn't exposed until later
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From looking at the comments and the fix code, I cannot say whether or not
    this code was unit tested. There is no mention of unit testing the patch
    anywhere, but that does not mean that unit testing was not involved. The
    commit itself could not be googled to confirm this.
  code: 
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: "This bug was found randomly by Khalil Zhani. He then traced his steps and
    \nreported his findings. This bug could cause denial-of-service or be hit by a
    \ncompromised renderer, so this was marked as high severity\n"
  date: 2013-08-23
  automated: false
  google: true
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the description in the CVE
  name: UI
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: c41ee9795537f0fc6a1f2a07e90e0edefc21c99c
    note: "This commit was for an initial implementation designed for Aura, a rich
      \nnotification client that got the notifications from chromium and put them
      \nin a different window. This commit seems to have exposed the vulnerability
      \nby changing how the listener gets its flags to close the Color Chooser.\n"
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: "The only major event I found was the development of Aura. The vulnerability
    \ngot exposed because of changes related to Aura.\n"
  events:
  - name: Aura Development
    date: 2012-06-26
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: "Part of the problem was that the input from this reference was never\npoliced.
      This led to the problem that if this reference was never deactivated,\nan attacker
      could use it to cause denial-of-service or attack through the \nreference.\n"
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "The coding mistake was a pretty simple one. The original author simply
    did\nnot kill the reference when the page was closed (destroyed). This is essentially\na
    XSS vulnerability; through this stale reference, attackers can cause \ndenial-of-service
    or attack using vectors through this reference.\n\nThe vulnerability was introduced
    in the initial commit, and was only exposed\nafter Chrome tried to initially make
    Aura, an obsolete client meant to provide\nnotifications and notification details
    in a client outside of Chrome. The \noriginal author must have forgotten he needed
    to destroy the reference so it\ncouldn't be used, or he didn't notice that he
    was leaving a stale reference.\n\nFor this color chooser dialog, this vulnerability
    could have been prevented,\nbut it's an easy thing to overlook. Next time, I'm
    sure the author will make\nsure something like this won't happen again.\n"
