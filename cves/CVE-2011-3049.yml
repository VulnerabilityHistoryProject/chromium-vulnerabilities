---
CVE: CVE-2011-3049
CWE: 284
announced: 2012-03-23 06:55:01.113000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Web requests are made all the time by browsers looking to retrieve content,
  post content, and the like. In this case the API in question allows developers
  to view these requests to take analytics, block the requests, or modify them. This is
  problematic in the case that a web extension goes rogue. This api allows rogue
  extensions to block incoming requests. Specifically, it allows a rogue extension
  to block a request calling for the blacklist of web extensions (which could include
  itself).
bounty:
  date:
  amount:
  references:
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3049
    - https://bugs.chromium.org/p/chromium/issues/detail?id=108648
    - https://developer.chrome.com/extensions/webRequest#event-onBeforeRequest
    - https://bugs.chromium.org/p/chromium/issues/detail?id=76788
    - https://codereview.chromium.org/7346024
    - https://bugs.chromium.org/p/chromium/issues/detail?id=76697
reviews:
- 8952021
- 9120011
- 9152010
bugs:
- 108648
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 22503495dc014e883d1041f6b9d883a1a53f3e55
  :note: |
    Cleaned up so that URL tested (specficially a Webstore URL) is without parameters/query statements.'
- :commit: a8ecc56a5fbdbb537ecc9559ec270985d92e3908
  :note: |
    The fix for the issue. Explicitly checks whether the requested url that is being accessed is the update blacklist url. If so,
    the code hides it from extensions (to avoid blocking it).
vccs:
- :commit: 67351452e1e16cb9b01c609ce185a9e819cf2254
  :note: |
    Originally used to remove the use of ProfileId because it allowed profiles
    to be used improperly. Specifically, there was a large project to remove all instance of profile
    from the content module. When changes were made to remove profile, changes needed to be made within the webrequest
    API. The coder, jam@chromium.org, did not understand that only relying on the profile context
    to decide whether to hide the request from extensions was not enough. As this allowed blocking
    of requests that were meant to update the extension blacklist.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    In this section of code there were unit tests that are run on this file/module.
    I found this by going back to the commit where the fix was made and inspecting the same
    directory. Doing that showed there was a file named extension_webrequest_api_unittest.cc
    whose job was to test the code that was found to have a vulnerability in it. Unfortunately,
    the fix did not add or remove any unit tests nor was the vulnerability found through unit tests.
    Therefore I said true for the code but false for the fix.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was found by adblockf...@gmail.com (abbrev.) working with extensions (potentially developing one).
    They were working with webrequest.onBeforeRequest, which is an event that is fired just before a request is sent
    out, and were able to intercept it the request, check to see whether it was an update to the blacklist,
    and block it. They initially noticed this capability by looking at their logs of onBeforeRequest events.
    In addition, they also noticed this could be used to block the Web Store by anyone with the rogue extension installed.
  date: 2011-12-26
  automated: false
  google: false
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This vulnerability was in the extensions subsystem.
  name: extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: ea8141e730305034523a814c3801852795bf0bad
    note: 'Interestingly this allowed extensions to cancel requests based on content length or type of HTTP response. Similar to the problem that the vulnerability outlined.'
  - commit: 31f174dfec58dd3b5544168f3d020b5f3c6eb895
    note: 'This modifies the same file to make XHRs invisible to blocking webRequests. The same idea was applied for the solution.'
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer:
  events:
  - name: Major New Update to Extensions API
    date: 2012-02-08
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies: true
    note: |
      Extensions should not have been given the permissions to block blacklist calls.
      In my opinion, there should have been a thorough list of non-blockable requests.
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The fix involved stunting the ability of the extension to grab hold of requests
      and cancel them. While this means the fix is a two sided issue, one side was definitely
      the problem of 'overtrusting' an extensions by allowing it to grab hold of any request. Even
      one like an update to the blacklist.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Overall in my opinion there was not enough code review that went into the VCC's merging.
    While it is difficult to think of such cases, further analysis might have revealed
    the possibility of blocking important connections through a rogue extension. Furthermore, there seemed to be alot
    of misunderstanding dealing with how the updates to the blacklist were handled. Looking at the bug
    comments, there was a good amount of debate about how the updating of the extensions was
    initially planned to be a system call (meaning not using the profile) but ended up using the
    web request. In retrospect, if they had followed through with the initial design choice, the
    vulnerability would have been avoided.
