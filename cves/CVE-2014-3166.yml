---
CVE: CVE-2014-3166
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [200]
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: '2014-08-13 00:57:12.613000000 -04:00'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Provided with this vulnerability, attackers would be able to leverage multiple
  domains to access sensitive information. Pooling with multiple domains allows
  an attacker to bypass Public Key Pinning (PKP) on sites. By bypassing PKP on
  sites this opens up an information disclosure vulnerability. Examples given 
  show that it was possible for a malicious actor to pretend to be any website 
  by exploiting this vulnerability. For example, the reporter provides a 
  screenshot, demonstrating that www.twitter.com was displaying their own
  content rather than the real twitter site.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: '2014-10-09'
  amount: 1000.0
  references:
  - http://bugs.chromium.org/p/chromium/issues/detail?id=398925
reviews:
- 428373002
- 425803014
- 433123003
- 476113003
- 498373002
- 435473002
- 479643002
bugs:
- 398925
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 8d60aa54abe0517d756c9d625ece75feabed613a
  :note: Centralize the logic for checking public key pins from ClientSocketNSS.
vccs:
- :commit: eed749f90554fcb7f561c935bcee60b8e1235de2
  :note: Implement connection pooling in QUIC.
- :commit: 11c0587044d54aeef5a7e1e0e2c5fedbe55106cb
  :note: Require handshake confirmation until a QUIC connection is created succesfully when using a new network.
- :commit: e6d017658f1f60b06eebff1b0ac5ba6751b8daa7
  :note: ChannelID-less Connections in Chrome should be more granular.
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Various methods of testing were used while fixing this vulnerability. A
    couple of relevant unit tests exist. However, this vulnerability was due to
    unforeseen technology changes and an increased risk of the threat. Tests
    were not used to check for the vulnerability before it was discovered. Tests
    were added upon learning about the vulnerability.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in
    "answer".
  answer: |
    Credit is given to an Antoine Delignat-Lavaud from INRIA reports. INRIA
    reports is an organization that does a wide range of research including
    cyber security. Antoine Delignat-Lavaud was rewarded with a bounty.
  date: '2014-07-30'
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech",
    "renderer"
  answer: |
    The effected subsystem is “net” with a few child subsystems also effected.
    Some of the child subsystems are “socket”, “spdy”, “quic”, and “http”.
    Listed bug reports on the bug repot include “HTTP2” and “SSL”. Labeled added
    include “Cr-Internals-Network-SPDY” and “Cr-Internals-Network-SSL”.
  name: net
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: A good portion of the work was comitted here.
  commits:
  - commit: 8d60aa54abe0517d756c9d625ece75feabed613a
    note: |
      Here some logic was centralized and some checks were added. PKPs were
      changed to check to use TransportSecurityState::CheckPublicKeyPins. 
      TransportSecurityState "forces public key pinning at certificate 
      verification time". Checks were specifically added for dynamic pins on 
      mobile and non-official builds. Static pins are checked only if 
      TransportSecurityState's enable_static_pins_ is set to true. This means 
      that official desktops builds always check the static pins.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The reporter disclosed information on the bug, omitting the specific details.
  events:
  - name: Reporter disclosed bug related information. It can be found here http://www.ietf.org/mail-archive/web/tls/current/msg13345.html.
    date: 2014-08-10
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Not enough checks existed in the right places to verify that certificates
      were authentic.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: |
      Too much trust was put on users to not take advantage of or know about
      this vulnerability.
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main mistake that lead to this vulnerability appears to be an oversight
    in a check to allow invalid certificates to become pooling candidates. There
    are two levels at which this mistake could have likely taken place. Firstly,
    there these checks, it seems, had been thought about before, but nonetheless
    overlooked. Poor documentation of risks/requirements at the team management
    level could be to blame here. And secondly, at the coding level if the
    developers had had this issue in mind, they would have likely accounted for
    it when it came up, before.

    The fix for this vulnerability follows the CWE potential mitigation. That is
    to say, in separating/centralizing the checks that is separation of
    privilege. However, this isn’t exactly directly significant to this specific
    vulnerability.
