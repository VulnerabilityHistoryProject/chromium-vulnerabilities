---
CVE: CVE-2016-5165
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-79
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-09-11 06:59:22.117000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability allows an attacker to send a specially crafted url that
  makes use of the settings parameter in the chrome devtools to inject
  malicous javascript. The script is executed the next time that the user opens
  the developer tools in chrome. The attacker can write javascript to modify or
  exfiltrate data from whatever site the user opens devtools on. The url would
  look something like the following: "chrome-devtools://devtools/remote/serve_rev/@180642/devtools.html?settings={%22watchExpressions%22:%22[\%22alert(document.domain)\%22]%22}"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-08-31 15:50:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop_31.html
reviews:
- 2223093002
- 2177983004
bugs:
- 618037
- 571121
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: d5e6098dc2e984befc836f482845137245fa04e2
  :note: 'settings parameters in the devtools url so that only string values can
    be used instead of javascript code.'
vccs:
- :commit: d118ad7ca6097a47ae2374c1b5bdc8b7fab26e7d
  :note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The original code did seem to have unit tests, but did not specifically
    exercise the path that the bug was found in. Automated tests were added to
    ensure no regression of this vulnerability. The new tests included:
       	content/shell/browser/layout_test/blink_test_controller.cc
        content/shell/browser/layout_test/layout_test_devtools_frontend.h
        content/shell/browser/layout_test/layout_test_devtools_frontend.cc
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was discovered by a third party developer who clearly had
    a security focus. This person used several examples and several explanations
    of attack vectors to finally convince the chromium team that it was a medium
    severity vulnerability.
  date: 2016-06-07
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The vulnerability fix involved changes in several subsections that handled
    urls in order to be fully mitgated and remove code that would otherwise be
    unused, however it was primary exploitable behavior was in the devtools
    subsystem. Changes were also made to the browser shell and WebKit
    subsystems when the vulnerable code was fixed.
  name: Devtools
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 72a5e46303c13d806475cd01aedfb1305fcde5d7
    note: |
      A security related timing attack was discovered in this file,
      meaning that someone was looking through this file and discovered a
      vulnerability, but did not catch the other one.
  - commit: 61aa8a159dcf44624c6c5a61ac62d91c1788e6af
    note: |
      A developer added a feature to view a page's certificate from the devtools
      window. Meaning that they were thinking about security while working on
      this file, but they also did not pick up on the vulnerability.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There was one major event that I found interesing that happened before the
    vulnerability was discovered, but after it was introduced. It dealt with
    a very similar issue in the same files and methods.
  events:
  - name: A similar issue was found in the same section of code over a year
      earlier. It took serveral months for the Google employee who discovered it
      to convince the chromium team members that it was a problem and needed to
      be fixed. This vulnerability is an added layer of security on top of that.
      https://bugs.chromium.org/p/chromium/issues/detail?id=571121
    date: 2015-12-18
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The vulnerability dealt with sanitize parameters from a url provided by a
      user.
  security_by_obscurity:
    applies: true
    note: |
      This code was part of a feature of devtools, since it was not well
      documented developers assumed that users would not try to find the
      settings parameter and try to use it from ther webpages.
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies: true
    note: |
      This feature of devtools was ultimately determine to be not needed
      because users do not need to be able to adjust devtools settings while
      debugging a remote site. The feature was not worth the security risk.
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I think the main take away from this vulnerability is that you should think
    carefully about what exactly your are allowing a user to do when you are
    implementing a new feature. It is important to consider the abuse and misuse
    cases that will be possible with the feature are adding and how you could
    mitigate those, especially if you are accepting user inputs.
