---
CVE: CVE-2016-5145
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 254
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-08-07 15:59:10.410000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Blink, a rendering engine used by Chromium, allowed remote attackers to bypass the same-origin policy 
  restriction for images that was written in the JavaScript code. Same Origin Policy is a concept where 
  a web browser allows scripts in the first page to access data in the second page but only if they are 
  from the same origin (URI scheme, host name, and port number). They are able to bypass the policy because 
  Blink did not ensure the taint property is preserved after a structure-clone operation on an ImageBitmap 
  object derived from a cross-origin image. What this means is that Blink, after cloning of an ImageBitmap 
  object, did not keep the property that determined whether it would taint a canvas or not with cross-origin data
  which would prevent interactivity. 
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-08-03 14:54:00.000000000 -04:00
  amount: 4000.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop.html
reviews:
- 2096313002
- 2097393002
- 2178513002
- 2168353003
bugs:
- 623406
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: d790e336fd68029d802aa7da6d262eb5ef36488c
  :note: Pass the origin clean flag of an ImageBitmap when ImageBitmap is being structured-cloned.
- :commit: 2a8242617ffe25ee8738151c768ee41af29c3695
  :note: |
    Adding a layout test to ensure that the ImageBitmap's origin clean flag is preserved 
    after ImageBitmap is being transfered or structured-cloned.
vccs: 
- :commit: 5d34a13da920a09a36b94127cac1872384b34df6, 18c7c9a23a44f2e1587b2e032655d152438b6563
  :note: |
    Forgot to pass variable to writeImageBitmap function and readImageBitmap boolean function
    that checks if the origin is clean.
- :commit: 2128130250de3702dd0e8bcc3c09396e769b3b1f
  :note: |
    Forgot to add boolean isImageDataOriginClean that will be used to set whether the image is
    clean or not when creating a new ImageBitmap.
- :commit: 455d762d883dae25439ca74d67bd84c297a6e135
  :note: Did not set whether or not image was clean or not which led to this vulnerability.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There weren't any unit tests involved in the vulnerability. A user added a unit test after
    the vulnerability was fixed to check that the clean flag is preserved after structure cloning.
  code: False
  fix: True
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: No evidence how vulnerability was found. If there is, it is inaccessible.
  date: 
  automated: 
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This mistake was found in the code that implemented the HTML5 Structured 
    Clone algorithm for Chromium's webkit.
  name: Chromium's third party webkit
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 
    note: |
      I was unable to find any interesting commits between the VCCs and the fixes.
      The interesting thing about the CVE was that the commit that corrected this
      vulnerability just added a missing feature. That feature was a check for
      whether the origin was clean or not for the image bitmap. After that was added,
      an extra unit test was added to ensure that the vulnerability did not happen in
      the future. That is why there is no interesting commits. 
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There does not appear to be any major events in the history of this vulnerability.
    It was fixed, unit tests were added, the code was reviewed and that was it.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: True
    note: |
      Defense in depth can be applied to this vulnerability. The reason why the vulnerability
      happened was because Blink did not ensure that the taint property was cloned after performing their
      structure-clone operation. Because of this, attackers were able to bypass the policy restriction. 
      After preserving the property when structure-cloning a bitmap image, the vulnerability was fixed.
  least_privilege:
    applies: False
    note: 
  frameworks_are_optional:
    applies: False
    note: 
  native_wrappers:
    applies: False
    note: 
  distrust_input:
    applies: False
    note: 
  security_by_obscurity:
    applies: False
    note: 
  serial_killer:
    applies: False
    note: 
  environment_variables:
    applies: False
    note: 
  secure_by_default:
    applies: False
    note: 
  yagni:
    applies: False
    note: 
  complex_inputs:
    applies: False
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    The primary mistake that was made here that led to this vulnerability was a result
    of an oversight in the implementation of a structure-cloning operation. Whoever wrote
    the original function to clone a bitmap forgot to include the taint peoperty that is 
    important in realizing whether or not scripts in the first page could access data in 
    the second page. They had overlooked the fact that the same origin policy was important
    and so when writing the bitmap code, they did not include checks that verified if the
    bitmap was from the same origin. This vulnerability should not prove to be a problem
    in the future because the code appears to have been fixed and reviewed carefully. There
    is now an added test case which will check to make sure this wouldn't happen again as well.

