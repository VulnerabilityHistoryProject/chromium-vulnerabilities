---
CVE: CVE-2014-3191
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [416]
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: '2014-10-07'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An object called RenderLayerScrollableArea called into method updateWidgetPositions, which
  performed various layout and style updates to render.
  During this process, an object called RenderLayer was destroyed; this object was the parent of the RenderLayerScrollableArea
  and another object (ScrollAnimator).  After the layout and style updates finished, the code
  attempted to have the now destroyed RenderLayerScrollableArea object call a method 
  (updateCompositionLayersAfterScroll), causing a memory error since the render tree had been destroyed.  Exploitation of this
  vulnerability may have resulted in DoS due to program failure.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-10-07
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2014/10/stable-channel-update.html
reviews:
- 502413003
- 490473003
bugs:
- 402407
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 11a4cc4a6d6e665d9a118fada4b7c658d6f70d95
  note: |
    Moved call to updateWidgetPositions(), which started the process of the internal
    destruction of the render tree, outside of RenderLayerScrollableArea to prevent
    the tree from destroying itself from the inside out.  The call is replaced
    with updateWidgetPositionsIfNeeded(), which ensures updateWidgetPositionsIfNeeded() is
    instead called from within the FrameView, where it cannot destroy the render tree.
    
    Also added a test script to catch any more use-after-free vulnerabilities in this
    part of the code.
vccs:
- commit: 73f084fc286af90bf5e1cc8b4c6174f91a6a2644
  note: |
    Refactoring effort that moved call to updateWidgetPositions() to RenderLayerScrollableArea; 
    this method in this location is responsible for the destruction of the render tree.
- commit: 0a6217c36138b87523b74363781ac3a749482978
  note: |
    First introduction of call to updateWidgetPositions(); this method never had any check placed on it
    as to whether widget positions actually needed to be updated, which later led to the destruction of
    the render tree.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There was a directory called Layout Tests that seems to have been responsible
    for testing the WebKit layout components, but this apparently did not contain
    a check for this particular vulnerability.
    
    Dev added a script to Layout Tests using Google's ASAN bot (AddressSanitizer that is a 
    "fast memory error detector based on compiler instrumentation") to test for the
    use-after-free bug.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This vulnerability was discovered by the company CloudFuzzer using Google's fuzzing 
    framework ClusterFuzz.  CloudFuzzer was paid $3000 for finding this bug.
  date: 2014-08-11
  automated: true
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: 'WebKit, FrameView, rendering'
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    See below.
  commits:
  - commit: fe24110c2b904cbeeab1fe15b20bf7fb7b2b6a55
    note: |
      Fix for bug 322891, which was the first issue with use-after-free in this part of the code, by adding an 
      ASSERT to crash in case of an attempt to use-after-free.  Interestingly, no tests added or updated.
  - commit: 73f084fc286af90bf5e1cc8b4c6174f91a6a2644
    note: |
      Refactoring that moved code calling method that launches destruction of the render tree from RenderLayer to 
      RenderLayerScrollableArea. Last commit before first use-after-free bug was found, so likely a VCC (see above).
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    See below.
  events:
  - name: 'New pricing structure for bug bounties, use-after-free became worth $3000'
    date: 2014-10-07
  - name: 'Similar bug (322891) occurs in the same code, mitigated with the addition of an assertion to crash the program if there is an attempt to use after free.'
    date: 2013-11-23
  - name: 'Google introduces Blink rendering engine based on WebKit (this vulnerability was in Blink)'
    date: 2013-04-03
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: true
    note: |
      Vulnerability was found in Blink, a rendering engine Google forked from Webkit 
      rather than continuing to use regular WebKit.
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
  use_after_free:
    applies: true
    note: |
      This vulnerability was similar to the double-free weakness.  Instead of trying to free an already-freed
      memory location, the code tried to make additional method calls with an object that had already been freed.  Like double-free,
      the mitigation involves careful memory management and the weakness can easily be found by a fuzzer, as it was here.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Based on the discussions between the developers in the bug reports, it sounds like this
    vulnerability was not considered initially because it occurred so far down the call stack.  The
    failure to consider what might happen if the render tree is able to destroy itself from the inside
    out was probably a design failure; consideration of misuse/abuse cases may have helped catch this
    vulnerability earlier.
    
    The initial fix for this vulnerability (in the first bug 322891) was insufficient, as the developers
    simply added an assert to attempt to catch the use-after-free.  In the notes on that bug, it seems
    the developers intended to improve this solution in the future, but did not get to it until this
    vulnerability occurred a year later.  The new fix moved the call causing the destruction of the object
    in the use-after-free, which was more appropriate.
