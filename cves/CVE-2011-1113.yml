---
CVE: CVE-2011-1113
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 119
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-03-01 18:00:03.377000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Chrome uses a byte stream deserializer called a pickler. The pickler has a function that reads
  information about the header and byte stream size to read. The function was not checking the size of the header
  before reading the payload infomation and this could lead to a buffer overflow scenario
  if someone sent a header of the wrong size
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 6353010
- 6347013
- 6471008
- 6478007
bugs:
- 70376
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 137d237f941001695681ed5628a20dec84cd3b86
  :note: 'https://bugs.chromium.org/p/chromium/issues/detail?id=70376'
vccs:
- :commit: d7cae12696b96500c05dd2d430f6238922c20c96
  :note: ''
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Yes, there were automation tests created to ensure the fix for this bug was correctly implemented
    as well as check that it returns and error if the header size and actual size input does not match
  code:
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This bug was originally found by a google developer, during what looks like a crash. A tool called valgrind was used
    to analyze the dump file and allowed the developer to see that the header was not being fully read before
    the payload memory started to be read. Valgrind is a tool that allows a user to debug memory and see what was going
    on at locations in memory at a given point.
  date: 2011-01-21
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    The pickle.cc and pickle.h files are part of the base chromium files and are used in everything throughout
    the rest of the system making it a mission critical file. No change has been made to this file since this bug
    was fixed in 2011
  name: base
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    There really are no interesting commits between the time this file was originally added and the fix commit.
    Since this file is such a key, critical file to the entire system, it was implemented and developed very early on and
    it has barely been touched since its original implementation. This file was originall added in commit number 8 and
    has only been changed a total of 26 times throughout the lifetime of chrome.
  commits:
  - commit: d7cae12696b96500c05dd2d430f6238922c20c96
    note: 'Initial commit (VCC)'
  - commit: 6ed3efbc2e55eb7aaae5520b9a7bceeacd3faa0d
    note: 'Fix commit'
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There are no major events. The bug was found rather early in development and about 3 years after
    chromium was intially launched. Pickle.cc has no real dependancies on the rest of the system, but many subsystems
    rely on it
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      A hacker could input a bad header, or another part of the subsystem could simply misuse this file if the
      developer was unaware of this issue
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: true
    note: |
      Buffer overflows are a very common problem in any system that is managing its own memory, especially
      when deserializing a byte stream is involved
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This was a very simple mistake that developers make all the time. The original developer assumed all input to
    this class would be good and no validation/sanitation was required. In any instance where memory is directly being
    affected, buffer sizes must always be checked and anything larger than the maximum buffer size must be
    disallowed
