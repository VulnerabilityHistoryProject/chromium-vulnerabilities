---
CVE: CVE-2015-1273
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 122
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-07-22 20:59:03.117000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability is caused by incorrect data on an image file, which creates a heap-buffer overflow. A heap buffer overflow is different than a regular buffer
  overflow in that heaps dynamically allocate memory for usage, and the memory contains program data. When the overflow occurs, program critical data is corrupted by 
  being overwritten; pointers are generally the victim of this. This causes instability, and denial of service by crashing services. 

  The subsystem is one called OpenJPG, whose purpose is to interpret and render images. Specifically here, it was for images within a PDF file, used by PDFium. 
  PDFium is the Chromium tool for interpreting PDFs. The data read by OpenJPG for interpreting the image was not what the subsystem expected, so when it received improper input, it resulted in a heap buffer overflow.  

  The solution was to upgrade to r3002 of OpenJPEG, which based on intuition and reasoning, added checks for the data to ensure it did not run over. 
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-07-21 14:00:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2015/07/stable-channel-update_21.html
reviews:
- 1159433007
- 1232063010
- 1162103004
bugs:
- 459215
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 1203cc8c7e82ab31d99190ccd595e813ac7ab9f9
  :note: ''
- :commit: af1125ea286450ceecc23a37c6710bcf0b2d1ce6
  :note: ''
vccs: 
- :commit: ec0fe091380c2de75584fdfc3d914eee5b89e731
  :note: |
    This is very similar, and has the same VCC as CVE-2016-1645. Both came as a result of poor execution of buffer allocation and input sanitization.
    The creator makes a static object of the image parser, which seems to be where all of the problems begin.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: The original code did not contain unit tests in the file or as a separate file. This seems to be the case because it was done by a different team, so an integration test wasn't handled when used in a different area.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: The vulnerability was discovered by makosoft. They include reproduction instructions as well as the state logs when the crash occurred.
  date: 2015-02-17
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the source code directory names and the git blame hierarchy listing
  name: OpenJPEG
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits: 
  - commit:
    note: | 
      I am unable to find commits between the VCC and the fix as they are in different repos, and performing a --stat on them does not work, as it is "out of range."
      Additionally, when I tried to do a git log from the fix, it produces 10k+ lines that were impossible to sift through or get any valuable data from.
      This made it incredibly difficult to find any "interesting commits", as I couldn't find any.
      The emerging theme, however, seems to be a lack of testing and poor code coverage. 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There does not appear to have been any major events.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The vulnerability came about due to poorly sanitized and checked inputs, in addtion to buffer sizing not being fully dynamic. 
      If the input was validated and distrusted, leading to buffer size being correct, this problem wouldn't have occured.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    As this CVE is similar to CVE-2016-1645, which I also curated, I found it interesting that one problem could require two different solutions
    in two different, but similar, areas. 

    The biggest mistake that lead to this vulnerability was not properly validating inputs, and allowing invalid data to not be dynamically allocated 
    a larger buffer size to prevent heap-buffer overflows. 

    They failed to use unit testing at any phase of early development, except for seeming to add a large unit testing file that included some checks for
    this vulnerability. There may have been some more in-between, but I was not able to look.

    It seems to be a failure on multiple fronts. The original developer for not writing proper test cases, future developers for not writing them or verifying
    that the method worked as intended, and looking for ways it could be broken, and the company for not having a proper code review to catch this before it 
    could be exploited. 
