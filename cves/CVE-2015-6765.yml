---
CVE: CVE-2015-6765
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-12-05 20:59:01.637000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An attacker could have the url that is being accessed 
  to be deleted hence causing the browser to crash. If a user is accessing 
  a url/link, in this case, it would crash due to the same. This is caused by an error in storing 
  entries and fetchers allows attacker to overload the pending list of entries and crash the browser,
  while running fetcher allows for UaF (user after free). This vulnerability is also known as the browser
  crashing bug.For example, referencing memory (say a link) after it has been freed (deleted/destroyed) 
  would cause the browser to crash. 

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-12-01 14:43:00.000000000 -05:00
  amount: 10000.0
  claimed_by: gzo...@gmail.com
  references:
  - http://chromereleases.googleblog.com/2015/12/stable-channel-update.html
reviews:
- 1471163002
- 1469253002
- 1463463003
bugs:
- 558589
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 57f7a2257395a31c4716bd6a1c2d6c9c09938c7b
  note: 
- :commit: e5c298b780737c53fa9aae44d6fef522931d88b0
  :note: ''
vccs: 
- commit: eafdfd1fcde3154080193276c6c1318b1f595766
  note: |
    This seems to be the original implementation of the logic under appcache_update_job.cc. 
    They did not consider the implications of the update here. 
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Could not find unit tests for this vulnerability. Howbeit, they did have some 
    regression testing going after the fix.    
  code: false  
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: The bug vulnerability was found by a regular user 'gzo..@gmail.com' then reported to the dev team for fix.
  date: 2015-11-19
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The mistake was in the appcache subsystem. Namely, in the file appcache_update_job.cc.
  name: appcache
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: e5c298b780737c53fa9aae44d6fef522931d88b0
    note: they started working on the fix 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: Did not see any major events at this time 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This seems to be another one of those mistakes that developer forget to have a complete 
    test plan on. I would say more of a design mistake with a mix of requirements and coding. 
    This is a critical vulnerability and the developer should have been more aware of these 
    cases when thinking about the tests plan and the design of the system. This can lead to 
    some serious issues. 
version:
  broken: 46.0.2490.86
  fixed: 47.0.2526.73
fixed_by: Michael Nordman