---
CVE: CVE-2011-2864
CWE: 125
announced: 2011-09-19 08:02:56.467000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This was an internationalization vulnerability where Google chrome could
  not properly handle Tibetan  Characters. Specifically, the system had a 
  problem with tables with Tibetan Characters when such character was
  out of range of a tibetanForm table. This error could allow an attacker
  to create a denial of service using unspecified vectors.
bounty:
  date: 9/8/2011
  amount: 0.0
  references: |
    http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2864
    https://bugs.chromium.org/p/chromium/issues/detail?id=95563

reviews:
- 7841023
- 7851010
bugs:
- 95563
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: b103b5975f6ac1b1b491510b8246091f160d9013
  :note: ''
vccs: 
- :commit: 83f6e08f4c56ef411ad1da5f3bfd4711ec94b052
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: There were no automated tests done. However, the documentation
          does state that tests were done; TEST=manually tested with ASAN.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability was found when bashi@chromium.org was doing fuzzer testing along
    with using ASAN and ClusterFuzzer.
  date: 9/6/2011
  automated: false
  google:  true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: I got my information from the CVE and the bug report.
  name: Harfbuzz 
interesting_commits:
  question: Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 83f6e08f4c56ef411ad1da5f3bfd4711ec94b052
    note: |
      This commit was interesting because it seemed to be the only one. When I did
      a git blame on the fix commit hash, this was the only other commit that showed.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events while investigating. I looked into the bug 
          report and it was very simple. infe...@chromium.org, who opened the bug,
          asked the help of bashi@chromium.org, who fixed the issue and merged the 
          fix.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: This is where I would classify internationalization errors. When the
          vulnerability is caused by a Tebetian character that is out of range,
          Id classify that as a complex_input.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I feel that a misunderstanding of the Tebetian languange cause this error.
    If the deveoper understood the language, then they would know what types of 
    characters were in range and out of range. I could not find any mitigations
    for this problem on cwe.mitre.org regarding this vulnerability. They way I would
    mitigate this vulnerability is by first fully understanding the Tebetian 
    language and grammatical structure. Once this is understood, I would go back
    into the system and assure that the system interpretation is consistent with the 
    Tibetan language. 
