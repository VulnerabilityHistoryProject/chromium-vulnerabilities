---
CVE: CVE-2010-0660
CWE: CWE-553
announced: 2010-02-18 13:00:00.987000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An old version of Google Chrome was sending an https URL that was being inserted in the
  http request header to represent metadata about the http request. This would sometimes lead
  to redirection from https to http. The redirection to the less secure protocol, allowed
  remote http servers to obtain potentially sensitive information by using http logging. When 
  redirecting, the referer was being sent to the location, even if the location was insecure. This
  vulnerability ultimately lead to the focus on preventing the referrer from being sent to
  any redirection that could occure from https to http and in turn preventing any potential 
  information disclosure through server log files.
bounty:
  date: 12/09/2010
  amount: $500
  references: [https://bugs.chromium.org/p/chromium/issues/detail?id=29920, http://www.itworld.com/article/2760827/security/google-to-pay-bounties-for-chrome-browser-bugs.html]
reviews:
- 486015
- 500129
- 502038
- 501109
bugs:
- 29920
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 7844480ae4f50930ca66fd3658790b52d344826d
  :note: 'Clears the referrer if a user is redirecting out of https.'
- :commit: f8bc33be983c60bdd7de7a34fc76cc7ddd2f7dfd
  :note: 'Changed test results, because bug was fixed.'
vccs: [140932f7da2921aeecc32015d05168c3c514eef8, c31a5459ed8dede7085508a47cb69370d73b4521]
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Automated unit tests were involved in ensuring that this vulnerability was fixed.
    The original code was not unit tested for this specific vulnerability, therefore
    the fix did involve improving the original automated unit tests.
  code: |
    Specific unit test located in the following file, did not include tests
    for this specific bug.
    /trunk/src/net/url_request/url_request_unittest.cc
  fix: |
    Unit test added for automatically detecting bug. Specific unit test 
    located in the following file.
    /trunk/src/net/url_request/url_request_unittest.cc
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: 
  date: 12/09/2010
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: 
  name: url_request
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: eaad22ec3fe7438aeb921b316aae094253b5a764
    note: 'The commit changed GURL::spec() to GURL::possibly_invalid_spec() and then the check shortly after simply truncated the url if it was too long.'
  - commit: c31a5459ed8dede7085508a47cb69370d73b4521
    note: 'This commit involved setting extra request headers. Leading me to beleive that this could have been a vcc if these extra request headers included the https information that could lead to a redirect from https to http.'
  - commit:  e600c8212f8922d77815316ff41fd8ce9d95bca7
    note: 'It seems that this commit added a similar check that was added to fix this bug, but they added the check in the url_request_automation_job.cc and did not consider adding it for a redirect.'
  - commit: 4e66ed1ae52ab2e894dfebed674c099f7150b7d3
    note: 'This commit checked if the location that was set for a redirect was a valid location.'
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: Stable Channel Update
    date: 01/25/2010
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: true
    note: 'Redirects could have been caused due to users attempting to access pages that they should not have access to.'
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: 'The input that was being placed in the request header was leading to redirection from https to http. Even though the input was from chrome itself, it should not be trusted.'
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: true
    note: 'The referer variable was being sent to insecure locations on some cases of redirects.'
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies:
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    After researching this vulnerability, I beleive that the main mistake that
    lead to this vulnerability was the lack of ensuring that all dependent variables
    are set on redirects. Although there were checks that made sure the redirect
    was not redirecting to an unsafe protocol, the code did not make sure that referers
    were reset on redirects leading to this vulnerability.
