---
CVE: CVE-2015-1361
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 17
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-01-27 15:04:15.900000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability was in Chromium's third party tools for image decoding.
  It consisted of an uninitialized variable being utilized in a constructor
  and was found automatically by a "fuzzer", a static code analysis tool
  that analyzed the code and identified the issue.

  In a general sense this vulnerability can lead to things like crashes when
  trying to utilize a segment of code that calls upon the unitialized value.
  However, in this case the uninitialized value was initialized in the 
  constructor of the class it was being used in making this functionally
  an optional variable in its usage. There was literally no impact in 
  operations the only thing is that any static analysis tool would have been
  unhappy.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 632763002
bugs:
- 411329
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: eaeb9c4e5cfbc42fb40258d17aafc2b5fdd066bb
  :note: 'Simply initializes the m_hasAlpha variable in ImageFrame as needed'
vccs:
- :commit: 49f8882b47d5da2b5b689b1df188c70a8034044d
  :note: 'First time code introduced in the platform context, originally from blink core context. Simple move of files. The actual source comes from its blink implementation, due to commit hash requirements of the Travis CI I have put the revisions as events in that section.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There are no direct unit tests in the ImageDecoder directory of the old blink 
    implementation. The new src location of ImageFrame.h does have a test set
    which due to it testing ImageDecoder.h I can assume it would execute this portion
    of code, but there is nothing specific to the vulnerability.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This vulnerability was found by the "Kkania_chromebot" Fuzzer during the 
    "Linux_msan_chrome" Fuzzing Job Type.
  date: 2014-09-05
  automated: True
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    Based on the description in the CVE along with identification from source file 
    directory paths.
  name: image decoding - third party general usage
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    This vulnerability was EXTREMELY hard to track down source wise as 
    trying to track it down via the blink implementation revisions was a hassle.
    There are a good ~150 revisions that I needed to skim over looking first for changes to ImageFrame.
    Once I found it was originally implementated in the ImageDecoder.h file the search was narrowed.
    Beyond that there are probably hundreds of significant usage changes over the 9 years this
    has been in use but the below are the key ones that were significant to the implementation
    of ImageFrame using this initialization method. Due to commit hash requirements of the Travis
    CI I have put the revisions as events in that section.
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The code for GraphcisContext and its dependencies has been moved from core
    to platform directories. Previously being in Blink implementation and dating
    back to 2009, it can be assumed the team changed multiple times.
  events:
  - name: 49f8882b47d5da2b5b689b1df188c70a8034044d
    date: 2013-12-06
  - name: |
      Blink Revision 75748 - https://src.chromium.org/viewvc/blink?limit_changes=0&view=revision&revision=75748
      I am not aware of how to get commits from this far back in blink history, 
      git log is unsuccessful in my searching. RGBA32Buffer was renamed to ImageFrame. 
      Vulnerability found to have originally existed in the blink
      WebCore/platform/image-decoders/ImageDecoder.h file.
    date: 2011-01-13
  - name: |
      Blink Revision 44631 - https://src.chromium.org/viewvc/blink?limit_changes=0&view=revision&revision=44631
      I am not aware of how to get commits from this far back in blink history, 
      git log is unsuccessful in my searching. ImageDecoder.h was updated to reduce 
      the delta between Cairo specific implementation and Skia specific implementation, 
      RGBA32Buffer initialized in the vulnerable format for the first time in source history.
    date: 2009-06-12
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability is simply a coding mistake and a very simple one at
    that. Any static code analysis tool should have picked it up and I assume
    the only reason it was not fixed for so long is because it literally had no
    effect. The uninitialized value was initialized in the constructor of the
    given class making this functionally an optional variable in its usage.
    There is literally no impact in operations the only thing is that any fuzzing
    tool will pick this up and be unhappy. The developer of the fix even says its
    simply to prevent tools from picking on it in his comment "initialize m_hasAlpha 
    to some value before calling the operator lest any tools complain about using 
    an uninitialized value". There are no mitigations beyond pay attention when
    coding and be sure to initialize all variables.
