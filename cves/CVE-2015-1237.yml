---
CVE: CVE-2015-1237
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-04-19 06:59:02.477000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Google Chrome was susceptible to a use-after-free vulnerability, where a 
  pointer is used after it has been freed. Accessing a pointer after it has been
  freed can cause unintended behavior like: program crash, unexpected runtime 
  values, and change in program execution. An attacker could exploit the 
  vulnerability, through a specially crafted website, cause renderer crashes or 
  arbitrary code executions.. 
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-04-14 13:41:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2015/04/stable-channel-update_14.html
reviews:
- 1002493004
- 1007123003
- 1021313002
bugs:
- 461191
repo: https://chromium.googlesource.com/chromium/src/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: cfaa4468f3394995a9f1565104ee2743a30d58e0
  :note: | 
    The fix for this vulnerability only required limited rework; to avoid a 
    use-after-free, the pointer should be zeroed after deallocation. That is
    exactly what the author did to resolve this vulnerability. The troubled 
    pointer was set to nullptr, once its destructor was called. Additionaly, 
    the engineer added a check to prevent proccessing that utilizes the pointer
    that was just freed.
vccs:
- :commit: cbf8849f3e446c86e29cc176d3214529d12a7a61
  :note: |
    The VCCS did not introduce a significant number of SLOCs in the commit. This
    commit contains the first instance of freeing a pointer, without zeroing the 
    pointer. The is likely due to engineering oversight over the future uses of 
    the troubled pointer. 
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The engineer implemented a unit test that sends a new message to the frame
    after it has been freed. This unit tests the condition where this 
    vulnerability could be exploited. 
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: | 
    This vulnerability was discovered through Googleâ€™s bug bounty program.
    The submitter did not supply bountiful information about the discovery
    of the bug apart from a video to reproduce the error.
  date: 2015-02-25
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    The mistake was done in the class which handles the frame rendering for 
    Google Chrome. More specifically, when the frame was being detached and the 
    frame was being freed.  
  name: renderer
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    Between the VCC and the fix, there was significant rework in the detach 
    routine, which freed the frame object. It is likely that the high turnover
    of this function contributed to the free-after-use.
  commits:  
  - commit: 3d35caa233020f4067d50051565467efd53986fb
    note: |
      This commit introduced a new function for detaching prior to the object 
      free.
  - commit: 1dbe123c5e7b2d41e517049c1b98d8ad75563b98
    note: |
      This commit introduced a additionaly function for detaching prior to 
      the object free.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    It is evident that during the timeline of this vulnerability, there was 
    significant development within this subsystem of Google Chrome. 
  events:
  - name: |
      Google Chrome Version 36.0.1985, adds DirectWrite support for font 
      rendering.
    date: 2014-07-16
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: true
    note: |
      The render process is sandboxed. Therefore, if an attacker was able to 
      exploit this use-after-free to execute arbitrary code, the privileges 
      they would enjoy is only the ones that the render process was assigned.  
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      This vulnerability is caused by manipulating input vectors to trigger IPC
      message during the detaching operation. Therefore, the IPC messages cannot 
      be trusted to be used in a manner consistent with the design of Google Chrome. 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability is resultant of a coding mistake. This vulnerability 
    only required a two SLOC change, which is indicative that this vulnerability 
    was sourced from an oversight of the author. The fix only required following 
    the MITRE recommended mitigation, which is to set the pointer to null after 
    freeing. 
