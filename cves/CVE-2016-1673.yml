---
CVE: CVE-2016-1673
CWE: 79
announced: 2016-06-05 19:59:01.317000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  When navigating from a new document to an empty document using Google's
  *Blink* engine, the engine loaded the request without checking whether
  navigation was allowed. Due to this, it was possible to execute an XSS attack
  via the request, bypassing the browser's protections.
bounty:
  date: 2016-05-25 15:45:00.000000000 -04:00
  amount: 7500.0
  references:
  - http://chromereleases.googleblog.com/2016/05/stable-channel-update_25.html
reviews:
- 1840813002
bugs:
- 597532
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: f93a0e557dd97cc83d8b55953c2f57c5e2dfe07b
  :note: ''
vccs:
  - commit: cff1a5e1c110ad79007bd7bda87cfde6045cc2af
    note: |
      It appears they introduced the vulnerability while fixing another bug in
      the same subsystem, wherein the engine failed to navigate to a page in a
      remote frame while creating a window. Presumably, this commit helped
      address that concern by adding another case for navigating to a new
      window, but the act of loading the request being sent was not protected.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The bug report included a unit test that, although apparently difficult to
    use (the issue's thread indicated difficulties in reproducing the bug),
    could be automated. The subsystem itself did have other automated tests
    acting upon it.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: 
  date: 
  automated: 
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The mistake itself occurred in the frame handling subsystem of the core
    system, though the components involved cross the boundaries of other
    subsystems.
  name: core/frame
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 0cdeb01589b6125e92aa94a6cb925d9474ccf4d4
    note: |
      Previous changes in the vulnerability-containing function were
      accidentally reverted by a code review and had to be added again. This
      means that the vulnerability passed through multiple code reviews, but was
      missed by participants.
  - commit: 5ff47559b4016794137fd624fa713602f0aff231
    note: |
      Introduces a second navigate method that redirects a request to the
      request loader. The method does not yet check whether navigation should be
      allowed.
  - commit: 66ad73d642b9cf824f4b1f300811ed1ee6963da7
    note: |
      Adds a check to ensure whether the document loader should navigate to the
      request in the secondary navigate method. All of the tools necessary for
      Same Origin Policy adherence in the initial navigate method are present,
      but not utilized.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: No major events unrelated to the vulnerability were found.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      This is an example of a UXSS vulnerability, which is a variant of XSS that
      executes due to an issue in the browser's code, allowing an attacker to
      create vulnerabilities in websites that are not otherwise vulnerable. UXSS
      vulnerabilities demonstrate that it is not sufficient for just the web
      application layer to be secure; the browser layer itself must also be
      secure. This corresponds to the principle of defense in depth.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
  same_origin_policy:
    applies: true
    note: |
      The implementation of a Same Origin Policy would theoretically prevent
      an XSS from occurring, but this vulnerability allowed an attacker to
      bypass that policy.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    When the vulnerability was introduced, the method containing it did not have
    anything that would allow the code to adhere to the Same Origin Policy.
    In that area, it took some time for parts of this system to adhere to the
    policy; I would not be surprised if there were related UXSS CVEs surrounding
    that code area, especially in the second navigate method.

    Ultimately, it appears that the vulnerability persisted due to a series of
    oversights by developers. The VCC did not understand the risk of not
    validating the request before loading it; a subsequent developer made the
    same error when making the second navigate method right below the first.
    The vulnerability was passed over twice in code reviews, first in an
    unrelated code review that accidentally reverted code, and again in a second
    code review that merely sought to restore reverted code. When adding
    additional parameters to the method for user gesture support, the
    vulnerability remained untouched. The successive failures to recognize the
    vulnerability were what allowed a critical universal cross-site scripting
    vulnerability to continue to exist for almost 2 years.

    It surprises me that the commit making changes to adhere to the Same Origin
    Policy in the second navigate method overlooked the same occurrence four
    lines above. Perhaps it lasted for so long because developers were
    laser-focused in the tasks they set out to accomplish. I would credit this
    task-related "tunnel vision" to the maintenance of the vulnerability over
    time.
