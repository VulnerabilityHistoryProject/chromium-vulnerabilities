---
CVE: CVE-2013-6653
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-02-23 23:48:09.927000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Certain aspects of how Google Chrome handles displaying web contents allows a
  remote attacker to generate a webpage that attempts to access the operating
  system's color chooser (think of the dialog that you can open in Windows Paint
  to select a color) in a conflicting manner.
  
  This is essentially a concurrency bug that causes a race condition (i.e., two
  threads/processes try to access the same resource at the same time) for an
  instance of the color chooser. If more than one webpage accesses this color
  chooser, and that color chooser's memory resources are then freed, this leads
  to what is known as a "use-after-free" error. This only seems to cause Chrome
  to crash (an example of "denial of service"), though it has the potential to
  cause other serious issues.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-02-20 11:00:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2014/02/stable-channel-update_20.html
reviews:
- 131333005
- 128053002
bugs:
- 331790
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 820957a3386e960334be3b93b48636e749d38ea3
  note: |
    Cleaning up some of the problematic logic in the code. A comment was also
    updated in a header file to reflect the changes made.
vccs:
- commit: cb80545d7f587d61e1c92aad9fa6a4ea4a93a7eb
  note: |
    The developer was adding new functionality for the color chooser. This
    commit was performed by the same developer who committed the fix.
- commit: efa4fef58585b12a34bb98e108f7c5067e19a2c3
  note: |
    The developer was addressing an issue with instantiating the color chooser.
    This commit was peformed by a different developer than the first VCC.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    No automated tests were created for this vulnerability. Upon inspection
    of the code base, it is clear that one of the impacted files was unit
    tested, although these tests were not modified in the fix.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found by a security researcher using a handmade exploit. No one was able to
    reproduce the issue, including on other OSs, but due to the nature of the
    bug they were not comfortable letting it go unresolved.
  date: 2014-01-06
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the pathnames of the impacted files.
  name: content/browser/web_contents and chrome/browser/ui/views.
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 5ecc8d42ff888ff8b459df566208e7e01a3be5ba
    note: |
      The developer was addressing an issue with closing a color chooser dialog
      in Windows. This is pertinent because it directly relates to the issue at
      the heart of this vulnerability - namely, issues with instantiations of
      the color chooser dialog. This commit was also performed by the same
      developer responsible for one of the VCCs and the fix.
  - commit: 52f150afab4adc3b965b0e79a1d54400bad26bfe
    note: |
      The developer forced the code base to use Windows' native color chooser
      instead of a specialized color chooser in the Ash/Aura subsystem. This is
      very pertinent to this vulnerability because it forced the system to use
      the impacted methods, where the vulnerability had already been introduced.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: No other major events were found outside of those discussed above.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
  concurrency_is_always_a_risk:
    applies: true
    note: |
      The vulnerability primarily involves a race condition for the color
      chooser dialog. Part of what causes this issue is the assumption that
      only one instance of the color chooser will exist at any point in time
      while Chrome is running.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main mistake made throughout this vulnerability's history was essentially
    a resource management issue - instantiation of the color chooser dialog was
    not handled properly, and as a result a race condition could occur and cause
    the browser to crash.
    
    Though not exactly what is recommended as a mitigation in CWE-416, the
    developers used NULL to indicate failure if a color chooser dialog has
    already been opened. At the very least, this prevents the same issue from
    happening again.
    
    The vulnerability was introduced by two developers across two commits,
    although there are no signs of miscommunication between the two of them.
    It seems as though they were just attempting to address the same issue
    at different points in time, which led to the vulnerability.
