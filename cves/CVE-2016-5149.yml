---
CVE: CVE-2016-5149
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 94
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-09-11 06:59:04.037000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  To understand this vulnerability it is important to understand what an iframe is.
  In HTML pages, there is a tag called "iframe" that essentially loads a different
  web page and embeds it in its "parent" page, which is the current HTML document.
  These iframes can be used for a variety of things, like embedding media into a
  web page or embedding applets into a document.

  This vulnerability is related to iframes in that it allows attackers to exploit
  the slow loading times of an iframe to run arbitrary content scripts in the iframe's
  parent page. More specifically, this vulnerability is only related to Chrome extensions.
  If the source URL of an iframe is set to be "chrome-extension:// URL", the attacker
  can inject javascript from the parent page before the frame has loaded and essentially
  spoof chrome extensions. For instance, one would be able to access chrome extension APIs,
  steal authentication cookies, bypass security measures, and even send fake messages to
  other extensions under the name of a legitimate extension.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-08-31 15:50:00.000000000 -04:00
  amount: 7500.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop_31.html
reviews:
- 2257273002
- 2151693002
- 2208483002
- 2191793002
- 2183443002
bugs:
- 573131
repo: https://chromium.googlesource.com/chromium/src
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 91f655b19888da3f86b57ad8c548da93e7b9aba4
  note: |
    This is the original commit that actually fixes the vulnerability. It now checks the security origin
    of the iframe to compute which URL to use in the code.
- commit: 79b64c3e741cc9c6afbb23885945831a45c6baa5
  note: 'This commit relanded the original fix and added another bug fix for CI/test failures.'
- commit: 4b8ca0a9fbbe79fa5a7819917e5a31d237f0f499
  note: 'This commit was revert of the first attempt at fixing the bug, due to CI build failures.'
vccs:
- commit: de54a47ebf037458201dd5a36af885f078a8c861
  note: |
    While this did not introduce the vulnerability by itself, it contains a line of code in script_context.cc
    that uses an extension URL that is potentially dangerous, and allowed for the vulnerability to be
    exploited.
- commit: f91cb89ccc9f4621d6b8d8928f70788d212def9b
  note: |
    This commit failed to validate URLs, extensions, and/or iframes, which is why the vulnerability
    was possible in the first place.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The fix commit indicates that tests were present and a new test was added to prevent this vulnerability.
    The new test is essentially trying to trigger this specific vulnerability to see if it occurs again.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Reported by user with the email justi...@gmail.com (https://bugs.chromium.org/p/chromium/issues/detail?id=573131).
    Manual reproduction steps were included in the original bug report.
  date: 2015-12-30
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on CVE description
  name: Extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: Some interesting commits are described below.
  commits:
  - commit: 62b5911d512673e84cf5b2c63e9b20ec5ad2c3b8
    note: |
      This commit reverts 4 patches that had previously been merged. There were a lot of attempts to fix
      bugs in the Extensions sybsystem, and many of these attempts were reverted at least once. Seems like
      code was being moved around a lot, which may have caused some confusion/diffusion among developers.
  - commit: ee4adef0b70f13cb80a886ef639fc910c0b5ce6f
    note: |
      This is a very large commit started enabling new API features for the Extension subsystem. This indicates that
      the developers had been working on new functionality for some time. It may have been the reason why
      the vulnerability took so long to fix. Perhaps they put the fix on hold to work on this update.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    No specific major events found but the bug report suggests that the time to fix this
    high-serverity bug exceeded the 6 month mark, which is a very long time for a bug
    like this one.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      Part of the fix for this vulnerability was to validate URLs to make sure that the security origin
      of the URL being used does not leave the application open to code injection during an iframe load.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note:
  concurrency_is_a_risk:
    applies: true
    note: |
      One of the issues that made this vulnerability possible was a race condition between HTML document
      loading times and iframe loading times. This race condition was responsible for allowing attackers
      to inject code, which shows some of the dangers of concurrent processes in an application.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I think that the biggest issue that came up during this vulnerability's life span was,
    by far, how long it took to react to it. According to the bug report it took over
    6 months to resolve this bug, which is an unbelievable amount of time for a
    high-severity and high-priority bug like this one.

    The fix involved some simple validation and some new tests, which may indicate an oversight in the
    original VCC, although this vulnerability would have been difficult to predict
    since it relied on a race condition. However, it was a severe lack of communication
    that lead to this vulnerability living as long as it did. There were long periods of time
    where there was little to no effort being put into resolving this bug, which exposed
    this application to really dangerous spoofing attacks.
