---
CVE: CVE-2013-0843
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 787
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-01-22
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  For Mac OS, the buffer size is too small when running the 96 kHz sampling
  rate, allowing remote attackers to cause a denial of service (DoS)
  attack. This, in turn, can cause memory corruption and have the application
  crash as well as cause some other impact to a third party site that provides 
  WebRTC audio, increasing the risk of sensitive information disclosure.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 11860003
- 11773017
- 11856006
- 11591013
bugs:
- 166523
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: f96f1f27d9bc16b1a045c4fb5c8a8a82f73ece59
  note: |
   Avoids crash in WebRTC audio clients for 96kHz render rate on Mac OSX. Earlier 
   commits related switched navigation bar classes and disabled Chrome's auto-fetching
   to alleviate the issue. Fixed at January 7th 09:29:29 2013 +0000
vccs:
- commit: 03953f11c61fa7df5436acec041d031bfd1e287b 
  note: |
    The file webrtc_audio_renderer.cc was created with this commit, and, while
    the Windows OS had a buffer size check for 96 kHz, the MacOSX did not.
    This bug was caused by improper bounds checking with the MacOSX-handling
    part of the code. Because it did not consider the use of a 96kHz rate for
    MacOSX, the buffer size was insufficient and could cause crashes and allow
    hackers to cause a Denial of Service attack.
  
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The notes in the bug 166523 clearly demonstrate that the code was unit tested
    after being fixed, and they were not able to duplicate the crash at 96 kHz 
    after the code change (where they were able to do so before the test)

    There was no indication near this code that there were unit tests involved
    in this module. Notes in the bug 166523 indicated that while there was unit
    testing scripts, they did not address the case of 96 kHz, allowing the
    issue to arise.

    No automated tests were apparent when viewing the code changes.  The changes 
    included how to set the buffer size when he render rate was 96000, no other options.
    (Previously the code set the default buffer size assuming render rate of 44100, and
    included option for 48000 -- now it also includes how to handle 96000)
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The vulerability was reported by Ted Nakamura (Google employee) when working on
    unit tests for the renderer.  
  date: 2012-12-17
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: content, media
  name: content/renderer/media/webrtc_audio_renderer.cc
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    When this solution was generated, the team was working on m26.  Because it was considered a security issue, approval was given
    to merge this into m24 and m25. Other than that, there weren't any interesting commits on their own. It is interesting that
    they decided to merge this issue with others and work on it that way; I'm guessing they thought it would be easier to focus
    on these similar issues altogether rather than tackle this issue independently. Considering a bounty wasn't placed on this
    issue, this theory makes sense.
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There was no major events identified near this vulnerability. Some more Apple
    employees joined, but it wasn't enough of an upset to be considered noteworthy.
    I only noted one Apple email commiting only after 2013, so he may have been
    a new hire.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input: 
    applies: true
    note: |
      It's important to realize that the input you receive can be used to
      exploit a vulrenability in your system, and this bug is a good example
      of this. The input was trusted to fit within the buffer size specified, 
      but the case of the input being 96 kHz was not tested; this value
      exceeded the size of the buffer, something that could've been avoided
      if the input were questioned to be within the boundaries.
  security_by_obscurity: 
    applies: false
    note: 
  serial_killer: 
    applies: false
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: true
    note: |
      It was assumed that the commit that caused the issue would no longer arise in
      any problems and that this data could not be messed with. It was not assumed
      that there may be any other issues belonging to MacOS only, and, if this
      were thought about more in depth, the issue may have been prevented.
  yagni:
    applies: false
    note: 
  complex_inputs: 
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
   I believe that, since this vulnerability was due to not considering
   the use of 96 kHz sampling rates for MacOSX, additional 
   cases of increased rates (96 kHz, 192 kHz) should be included in the unit
   testing scripts for all platforms to ensure that this type of vulnerability
   is not repeated. It's important to have good boundary testing in order to
   determine how your code works within and outside of your expected value of
   ranges as it can cause other issues that the system may not be prepared for.