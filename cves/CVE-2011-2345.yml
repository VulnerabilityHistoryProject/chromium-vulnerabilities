---
CVE: CVE-2011-2345
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 125
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-06-29 13:55:04.270000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability is exploited based on improper handle of string
  in Application Programming Interface (API) which allows remote attackers to conduct
  a denial of service attack based on out-of-bounds (CWE-125) read using unspecified vectors.
  For example, without input validation and verification, an attacker can pass in an arbitrary
  memory address to read sensitive data from the system or an arbitrary snippet of code 
  to execute inside the application. In case of arbitrary code, attacker can cause
  significant harm to the system such as retrieving sensitive data, modifying 
  application's internal data or even affect other users.

  The vulnerability was first introduced in the Netscape Plugin Application Programming
  Interface (NPAPI) of Google Chrome before version 12.0.742.112. When '\' is passed to
  function in the NPAPI, the value is read in as an arbitrary memory address. When the 
  memory address read is outside of the address space that the computer gives to the 
  current process, it is an out-of-bounds read. Out-of-bounds read causes the process 
  to crash and when there are enough crashes, system resources are unavigateailable to other user.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2011-06-28 13:00:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2011/06/stable-channel-update_28.html
reviews:
- 7099006
- 7153001
- 7152001
bugs:
- 77493
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 89f5fbb75f989d12dffeffa1ca0a7bb40c603706
  :note: 'This is the final fix for NPAPI (Netscape Plugin API)'
- :commit: bf04ad0dae9f4f479f90fd2b38f634ffbaf434b4
  :note: 'This is the fix in PPAPI (Pepper Plugin API) which also has the same vulnerability but the ticket for this vulnerability only addressed NPAPI'
vccs:
- :commit: 0bd753681a82634f322d4867b19148474c25566b
  :note: 'No input validation so arbitrary address can be passed in'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There weren't unit tests involved in the code but there were tests added 
    after the fix for regression. The added test consists of html with a swf (Flash)
    file and a necessary js file to load swf file.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was found by a user as he was testing the ExternalInterface
    class between Chrome browser and Flash Applet.
  date: 2011-03-26
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: | 
    The vulnerability was in pepper webkit plugin utility class where user input
    is passed in and not properly handled giving attackers ability to read 
    arbitrary memory addresses.
  name: webkit plugins
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: bf04ad0dae9f4f479f90fd2b38f634ffbaf434b4
    note: 'This commit fixes the Pepper API (PPAPI) which is also vulnerable to this same vulnerability. However, there is a specific code that makes it vulnerable'
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: | 
    There were no major events for this vulnerability, the vulnerability was found and fixed.
    However, this vulnerability reproduces across all operating systems (Mac, Linux, Windows)
    and all versions ranging from stable to trunk.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      We need to always validate and verify inputs that came from outside trust
      boundary no matter what types of input they are because crowd is very good
      at guessing and exploiting. 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: Any input coming from the outside the system should not be trusted. 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistake that led to this vulnerability was lack of defense in depth
    principle, the developer forgot to validate and verify inputs in API module
    which is used by everyone. Overall, it's a coding mistake. The original code
    basically read in whatever string user passed in without validating it. As
    a result, when user passed in an arbitrary memory address, the vulnerable
    function just returned to user data stored in that memory location. Should
    the developer be more careful and validate the inputs, unsafe inputs can be
    avoided.

