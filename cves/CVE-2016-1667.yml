---
CVE: CVE-2016-1667
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 346
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-05-14 17:59:07.383000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Web pages are constructed using a tree structure of both nodes and objects.
  This tree structure constantly updates as different events occur. One of the
  updates that happens to the tree stucture is called a "node adoption", when
  nodes are assigned ownership (not inserted) to a document.

  During node-adoption operations, script execution was not disabled. Since the
  document is being modified, attackers may violate the Same Origin Policy.
  The Same Origin Policy should only allows script execution between web pages
  if both web pages originate from the same origin. When this policy is broken,
  an external web page may execute scripting on the web page that is trusted
  by the origin. This allows attackers to send data to their web page, from the
  trusted page the user is on.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-05-11 14:04:00.000000000 -04:00
  amount: 8000.0
  references:
  - http://chromereleases.googleblog.com/2016/05/stable-channel-update.html
reviews:
- 1910403003
- 1921853004
- 1953323002
bugs:
- 605766
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 146ff1bb11c88778d466bd7a49b544f2b5806ee0
  :note: 'Disables script execution while node adoption is occuring'
- :commit: 34d3807c8e69adcd5ac23f45572ccb83684d1dc1
  :note: 'Refactors the logic to disable script execution. This commit also
  added tests'
vccs:
- :commit: db23ac807ad02
  :note: |
    'Refactors the logic to disable script execution. This commit also added
     tests'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The fix involved improving the automated tests. The test associated
    with the fix can be found in
    WebKit/LayoutTests/fast/events/image-adoption-events-expected.txt
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    No tool/method mentioned, like fuzz testing, but it was found by
    observing special cases when images were the last nodes being adopted.
  date: 2016-04-22
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the file structure and related files in the same directory.
  name: dom
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 34d3807c8e69adcd5ac23f45572ccb83684d1dc1
    note: |
      This commit was particularly interesting as it was the first
      introduction to having a test to ensure scripts can't be executed
      during node adoption. This raises the question of how the vulnerability
      was found, since it wasn't by tests, and it only can happen in very specific
      scenarios.
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    Though this was labeled as a high-priority vulenrability,
    I did not see any major events during this time. I believe the vulnerability
    was caught before any exploits occured, and the team/subsystem architecture
    didn't change much during the development of the mitigation.
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The vulnerability addresses potentially malicious input from users.
      Bad actors could potentially inject cross-site scripting into the webpage.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The vulnerability involved the addition of an image element to the
      dom. Image files are complex, and on top of that, they're being added to the
      already complex tree structure called the dom.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I believe this vulnerability was caused due to poor design. I don't believe
    it should be the programmer's responsibility to think about all scenarios
    where something could go wrong when adopting nodes to the dom. I believe if
    the Chromium team had used something like a state pattern, where whenever
    dom manipulation would occur, the system would be in a state where no
    scripts can be executed.

    Without this state pattern, it is the programmer's responsibility to think
    if the operation might need some sort of disablement of script execution.
    As the system scales, and as proven by a similar vulnerability mentioned
    in the developers comments to each other, this sort of relaince on the
    developer to think of scenarios will just lead to more of the same
    XSS vulnerability.
