---
CVE: CVE-2011-3079
CWE: CWE-114
announced: 2012-05-01 06:12:04.157000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Inter-process Communication implementation does not correctly validate
  messages allowing for attack vectors. It is possible to create a fake
  listener process that does not have the proper permissions to connect to
  a pipe started by the browser's process and cause a privledge escalation.
bounty:
  date:
  amount:
  references: []
reviews:
- 9837028
- 10199005
- 9956085
- 9834065
bugs:
- 117627
repo: https://chromium.googlesource.com/chromium/src
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 48fae61b8a6c9b741f001d478c595b6c7c0af4d9
  :note: 'sandboxed processes cannot open each other'
- :commit: 0590878f77dd9d3791b936287db516a99d14efb0
  :note: 'requires message to be validated by IsHelloMessage'
vccs:
- :commit: 4734d0becafa5b77d708020eed24d97148ea208d
  :note: 'the vulnerability was created by creating a random process id rather
  than a verified one'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Tests were added to check for the vulnerability in commit
    48fae61b
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Comments regarding details of how this vulenrability was found have been
    deleted.
  date: 2012-03-10
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Vulnerability seems to be in the browser's rendering host as the affected
    file was content/browser/renderer_host/render_process_host_impl.cc
  name: browser render host
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 2e77cb39b4b2760c6aa15fb194355cc429f9cb8a
    note: |
      This changed how the AudioManager in Chrome worked. The thread is now
      owned by the UI thread.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The only major event that ocured was the removal of the AudioManager
    singleton
  events:
  - name: AudioManager Singleton Removed
    date: 2011-12-12
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The fix involved having a secret hello message. By having this extra
      security layer only trusted processes are valid.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The vulnerability is about the pipe of input that is given to the
      process. The fix was to distrust the input.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistake was trusting the pipe of input given to the process. By just
    assigning a random id to the process and adding it the system was trusting
    it by default. The fix worked by giving it a specific id so that it could
    be controlled properly.

    It was introduced when child process hosts were refactored through an
    interface in content/public rather than inheritance.
