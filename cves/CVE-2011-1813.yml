---
CVE: CVE-2011-1813
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-825 
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-06-09 15:55:02.667000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 
  A piece of data is created on the heap, and there are multiple pointers which 
  can point to this data. While the browser is used, JavaScript allows certain 
  parts of the webpage to be adopted by others. In this particular case, an 
  iframe is being 'adopted', and the pointer that points to this iframe is not
  being adjusted. The pointer now points to an invalid piece of data which
  crashes the program.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 6814004
bugs:
- 78516
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 1c34a9f4de92b9d649796f776f1bd7071a4ccf68
  :note: ''
vccs:
- :commit: 946a003c47baa60549ccb8b74f611d7cb9c61dce
  :note:  Memory is freed, but the references to the memory still remain.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: 
    Yes! The code is being unit tested. However, the unit tests are quite
    finicky and don't always crash when they're supposed to. See the discovered
    section to learn more. 
  code: yes
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: 
    This vulnerability was discovered by a test that failed. What was odd about this
    test was that it did not fail every time it was run. In the discussion where this
    bug first reared its head, people commenting were having trouble reproducing the 
    crash. Apparently using breakpoints in Visual Studio would cause the bug to not 
    happen. And sometimes the use of an extension in Google Chrome would have the same
    effect.
  date: 2011-04-05
  automated: true
  google: true
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: renderer
  name: extension_helper.cc 
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: During the two commits, there are a lot of tests giving the development
    team some trouble. Including numerous memory leaks and plenty of tests that 
    are temporarily turned off. Sometimes not turned on until commits that occur
    much later
  commits:
  - commit: 906e7970a1d28bee01491d93677b05f1c25a34f0 
    note: Suppress a couple of layout tests before V8 change is rolled 
  - commit: 2526eff06d3302c78f921731ace250ff2ad788f2 
    note: Temorary suppress two tests.
  - commit: 2564b5df1c07c233e172964be7966029d9d45c3d
    note: Fixes up the race condition that exists with deleting a file vs watching it.
      The tests created a file and attempted to hook a watcher on it on a separate thread
      but it was deleting it before the thread had a chance to watch it.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer:  Several commits end up looking like the following
    Valgrind:Suppress a WebKit memory error from the 82579 - 82603 roll.
    Valgrind:Suppress a leak in BrowserProcessImpl::CreateResourceDispatcherHost()
    Valgrind:Suppress another leak variant in UserStyleSheetWatcher.
  
    That, coupled with what you see in the previous answer makes me think that the team was
    trying to push out a lot of new code to their V8 engine, and their tests along with their
    code was leaking lots of memory. Some of the tests were getting out of date with the new
    code they were pushing, and as a result, they ended up temporarily disabling some tests
    allowing bugs to slip through that wouldn't be discovered until much later.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth: 
    applies: true
    note: We can deploy automated technical testing to avoid stale pointers
      like these in the future. Those are considered Technical controls.
  least_privilege: 
    applies: false
    note: 
  frameworks_are_optional: 
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity: 
    applies: false
    note: 
  serial_killer: 
    applies: false
    note: 
  environment_variables: 
    applies: false
    note: 
  secure_by_default: 
    applies: false
    note: 
  yagni: 
    applies: false
    note: 
  complex_inputs: 
    applies: false
    note:
  keep_tests_up_to_date:
    applies: true
    note: These programmers are valuing new code being pushed as what seems
      like an effort to meet a deadline to push some new code either to a stable
      or a development branch. As a result they are having trouble where their
      code is becoming out of date with what their test cases are supposed to catch.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    The developers should have written better comments so that maintainers and 
    other developers can catch where pointers are pointing to, and be able to tell
    when a pointer is left dangling. It's quite difficult when one is writing C++
    code of this complexity, especially in the case where pointers are being passed
    around as a result of JavaScript code.
    I have a feeling Valgrind, or another internal test should be able to look for data
    on the heap that has pointers to it, and should check for when that data is freed if there
    are any pointers that could be in danger of growing stale.
    Also it seems like there was a test that might have been enabled at some point that
    ended up catching the crash, perhaps disabled in another commit before the VCC and 
    not reenabled until after, although I couldn't find out which commit did so.
