---
CVE: CVE-2015-1209
CWE: 
announced: 2015-02-06 06:59:07.497000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A crash can be forced from crafted java script that can be exploitable. The
  crash occurs in Chromium's underlying c++ code when freed data is accidentally
  read. The JavaScript causes this crash by adding an element to the DOM,
  altering certain fields, removing it from the DOM, and then trying to
  access or modify certain fields after the element has been removed. Once
  you try to access an old element, Chromium will access memory that has
  already been freed using a bad pointer. This will trigger Chromium's
  AddressSanitizer which will then stop Chromium before something even worse
  happens. AddressSanitizer may not have always caught the error and arbitrary
  code execution was possible.
bounty:
  date: 2015-03-03
  amount: 5000.0
  references:
  - http://bugs.chromium.org/p/chromium/issues/detail?id=447906
reviews:
- 894063008
- 848843002
bugs:
- 447906
repo: https://src.chromium.org/viewvc/blink
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 1be560402876e236d05f5cb4c1cc3f5387d4b289
  :note: ''
vccs:
- commit: 34900
  note: |
    This repository uses revision numbers, not hashes (I think).
    This method was left untouched for ~7 years before being fixed.
    https://src.chromium.org/viewvc/blink?revision=34900&view=revision
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    New vulnerability specific unit tests were added to test the vulnerability
    after it had been discovered. The code in question had been a part of a unit
    test, but the unit tests did not catch the vulnerability.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This bug was discovered and reported by a user. The user's profile has next
    to no information associated with it, but the user asked to be identified
    as Maksymilian Motyl.
  date: 2015-01-11
  automated: nil
  google: false
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer:
    Blink (Chromium rendering engine)
  name:
    Source/core/editing
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 189441
    note: |
      The entire code fix for this $5,000 dollar bug was a single line (plus new test cases).
      https://src.chromium.org/viewvc/blink?revision=189441&view=revision 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    Between the vcc and the fix, the method was renamed once. That's it; nothing
    else changed.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies:
      true
    note: |
      Crash could be caused in JavaScript by exploiting Chrome's DOM rendering
      engine by causing a memory problem only present in unmanaged languages.
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The code assumed that a DOM node was going to be a specific type of node. Under
    normal circumstances, this was a correct assumption, but there were edge cases.
    A misunderstanding of the expected input to the method is what caused this
    vulnerability. I can only assume it was a developer's oversight or a
    miscommunication between developers.
    
    To fix this bug, the method did additional checks on the input be performing
    any operations on it. Before addressing this bug, they already had input checks,
    but they weren't good enough.
    
    
