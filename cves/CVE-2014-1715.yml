---
CVE: CVE-2014-1715
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 22
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-03-16 10:06:45.677000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Path traversal vulnerability that can lead to creating a junction point (an
  alias to another directory) out of a valid directory within a sandboxed path
  to the root of the system partition, where critical files are kept.

  A valid directory within a sandboxed path can be explained as follows:

  Imagine if the program is running in a directory called 'safe'. This directory
  is a valid directory for the user to access files in. This directory is
  within the sandboxed path (e.g. usr/program/safe). Anything outside this sandboxed
  path is considered unsafe and therefore an invalid directory.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-03-14 20:30:00.000000000 -04:00
  amount: 26250.0
  references:
  - http://chromereleases.googleblog.com/2014/03/stable-channel-update_14.html
reviews:
- 199743004
- 197233004
- 199863002
- 199843002
bugs:
- 352429
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 693fcbe943b19153b14b3c4c18f6eb4edb42a555
  note: ''
vccs:
- commit: 3fb43ed1ad7bcfeb686aa48e296ffbc639b35ad7
  note: |
    This is a massive commit by a single person with the overarching goal of
    adding multiple functions that operate on file handles across multiple
    files and classes.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From looking at the fix codereview, it's clear it passed codereview
    standards, however, there is no change to a test file, only the file with the
    VCC itself.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found in a competition called Pwn2Own. Pwn2Own is an annual hacking contest
    where hackers try to exploit unknown vulnerabilities on production software.
    After investigation it was found that while the function checks normal
    path traversal mitigations like checking for parent directory references, it
    failed to take into account junction points -- which do not require admin rights
    to create and which use a directory handle instead of a path.
  date: 2014-03-14
  automated: false
  google: true
  contest: Pwn2Own
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Based on the description in the bug tracker for Chromium, it appears
    the subsytem affected is the database subsytem
    (src\webkit\browser\database\database_util.cpp)
  name: Platform > Extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 2e733d10715fe3fd5bffd60e345f5999ae225000
    note: |
      This commit added better support for symblinks, which is closely
      related to the concept of junction points involved in the vulnerability.
  - commit: 307a825aeeda5d47bdd9ad1206496c1c2b878868
    note: |
      This commit added the ablity to set the flag FILE_FLAG_BACKUP_SEMANTICS
      which seems quite similar to the fix comit code review title of Require
      PLATFORM_FILE_BACKUP_SEMANTICS to open a directory.
  - commit: 9fea5a9b229b6a114629c8787f614b2e9f1048fc
    note: |
      This commit was actually a direct fix to potential path traversal
      vulnerabilities! It forces explicit normalization of paths (sounds like
      canonicalization). The git commit linked to this bug tracker,
      https://bugs.chromium.org/p/chromium/issues/detail?id=167122, where it's made
      quite clear that the vulnerability is leaving the sandboxed directory using
      relative paths (e.g. ../../../) to access the /etc/passwd directory.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events at this time.
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Defense in depth applies here a little bit because even though measures were
      taken to mitigate path traversal in the conventional sense, the code needed
      to also protect against junction points with directory handles.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The vulnerability involves parsing a file and it involved complex file
      system concepts (e.g. junction points) and how to effectively defend against
      these when used with directory handles.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    Ultimately, this vunerability was the direct cause of a coding mistake,
    however, the coding mistake is very obscure and could easily be overlooked
    by someone either inexperienced with the nitty-gritty specifics of file
    systems, or by someone who may be aware but just wasn't super vigilant of
    this particular issue.

    Proper mitigations such as making sure we're still in the sandbox directory
    were taken, however this vulnerability simply went a step beyond such a simple
    mitigation.

    It should also be noted that the VCC was by a single person adding >900 lines
    of a code, which is definitely error prone.

    I think this really goes to show you that mitigations are far from perfect.
    I'd say based off of what we've done in class and what we've seen about
    mitigations regarding path traversal, those steps were taken. But even with
    those steps, the vulnerability in this case is still disastrous.

    Something as niche as this most likely would require outside sources, such as
    a security expert, or in this case -- a competition, to clearly identify the
    vulnerability and handle the mitiagtion properly.
