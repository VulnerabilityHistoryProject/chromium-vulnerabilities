---
CVE: CVE-2015-1296
nickname: Lock-alike
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 20
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-09-03 18:59:06.813000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: You could place special unicode characters in the URL so that a padlock
  character would be displayed at the beginning of the URL which could fool the user
  into thinking that they had a secure connection over HTTPS. Attackers could post
  links anywhere on the web that include these special characters so when people click
  on them and see the padlock icon they'd think that they're safe. The padlock icon
  verifies that the server is in fact who they claim to be. If you go on Facebook.com
  and see the padlock then it verifies that there isn't a third party impersonating
  Facebook. They could hide them with a hyperlink so that the characters don't appear
  in the link visible to the user, but when they click on it the web browser would
  copy it to the omnibox and display the padlock character. The omnibox is the address
  bar in chrome, they just call in the omnibox internally.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-09-01 15:15:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2015/09/stable-channel-update.html
reviews:
- 1180393003
- 1189553002
bugs:
- 421332
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 7c2cbc445a81424c7df48ebe61ec4d0dcadd5dff
  :note: They blacklisted the unicode padlock characters.
- :commit: 1c7d9ce02925cf766fc508d4ee83424369e71548
  :note: Changed it so RTL URLs wont be completely flipped around
vccs:
- commit: c14d891d44f0afff64e56ed7c9702df1d807b1ee
  note: This is the initial commit in the Google Chrome git repo.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 39
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: true
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: "It was reported by zcorpan and he received a reward of $1000 for finding\nthe
    bug. He also was put in the chrome release notes for finding it. It does\nsay
    though that if he disclosed the bug information before it was fixed then\nhe wouldn't
    get the money anymore. It doesn't say how zorcpan found the bug.\nAll of this
    information was obtained from the bug report on chromium.org. \nAlso, there isn't
    really a commit that introduced the vulnerability. It has \nbeen around since
    the beginning of the project, as long as they had the \nOmniBox and the SSL padlock
    icon this was an issue.\n"
  date: 2014-10-08
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    It affected the omnibox but the issue was in the core of the system, in
    netloc/core/
  name: OmniBox
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: 2cd905494ba700a8e2097d614ed39ad36d1519f2
    note: |
      Here they added more unicode characters to be escaped in URLs, like
      U+202A LEFT-TO-RIGHT EMBEDDING and a few others. Also, the unicode spec
      was updated so they added exceptions for the new bidrectional
      characters.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There weren't really any major events around this. They had a few issues
    with unicode and with the omnibox but neither of them got major rehauls
    around the time of this vulnerability.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      There are certain unicode characters that can appear to spoof the SSL
      padlock icon that they didn't remove from the input.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: |
      There are complex unicode inputs with special charcters in RTL mode
      that could spoof the SSL padlock.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "This issue happened at the Requirements phase. They should have considered\nall
    of the complex unicode inputs that people could use to attempt to spoof\nURLs.
    In order for this type of vulnerability to be caught they would have \nneeded
    to have someone who is very familiar with unicode to be on the team.\nThis person
    would have to know about the padlock character and know that \nthere are RTL characters
    that can be used to move characters to appear at\nthe beginning of the string.
    Throughout all of development no one must have\nthought of an attack like this.
    It's a really complex input so it's \nunderstandable that they never considered
    it originally though. They couldn't\nremove all unicode characters though because
    people who speak languages whose\nalphabet doesn't fit in ASCII need to be able
    to search for things with the\nomnibox.\n"
