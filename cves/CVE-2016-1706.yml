---
CVE: CVE-2016-1706
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 20
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-07-20 15:59:01.590000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability resulted from the improper implementation of PPAPI, which is
  a plugin management API for Adobe Flash Player.  
  Plugins have a broker process with two methods for handling messages.
  BrokerProcessDispatcher handles BrowserOperations messages managing browser functions
  such as locally stored Flash cookies and camera/mic permissions.
  BrokerDispatcher handles only ConnectToPlugin messages which manage inter-process-communication 
  data for the plugin.
  ConnectToPlugin messages are treated as untrusted and are sanitized and validated, but BrowserOperations
  messages are not.  BrowserOperations messages are intended for use by the browser's settings
  UI, while ConnectToPlugin messages should be sent on behalf plugins.  The Flash renderer 
  is able to send both types of messages on behalf of plugins, meaning a compromised renderer
  can submit unsanitized data and access powerful BrowserOperations functions. The primary danger
  is that several BrowserOperations message variants include an absolute file system path
  as an argument with no validation, allowing access to local files by the renderer.  An exploit 
  could have the capability to write or overwrite local files.  The reporting user described 
  a potential exploit for OS-X where vulnerability is used to mount a remote file system on the
  target computer.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-07-20 14:48:00.000000000 -04:00
  amount: 15000.0
  references:
  - http://chromereleases.googleblog.com/2016/07/stable-channel-update.html
reviews:
- 2069853002
- 2122313004
bugs:
- 610600
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 92cad45212731b59e74c8f2a2913691db3e9d770
  :note: | 
    Multiple checks were added to ensure BrowserOperations messages originated from browser.
    This verifies that BrowserOperations messages are sent from the trusted browser UI source
    and ignores them if they originate from the renderer.
vccs:
- :commit: 270d42206f2ff5fc97114c72f2d2cd7c0f4436da
  :note: Also bad22afa2d2ba6349dc0117540d3cf16ed14efa9
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The VCC did not include any unit tests in either of the relevant commits.  
    No additional unit tests were introduced as part of the fix.
    The code review:https://codereview.chromium.org/1322793004
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The vulnerability was originally reported from the email 70696e6b...@gmail.com, with
    the user's handle referenced as "Credit to Pinkie Pie" next to the vulnerability listing
    on the stable release update on 2016-07-20.  The reporter used the tool 
    Frida(http://www.frida.re) for code injection, leading to the discovery of
    the issue.  This user documented their attempts to test potential exploits
    using the vulnerability in a file called "ppapithing.zip" included in the initial report.
    The user did not elaborate on other techniques or circumstances leading to the issue's discovery.
    Initial report URL: https://bugs.chromium.org/p/chromium/issues/detail?id=610600
  date: 2016-05-10
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: The Flash plugin rendering system.
  name: Renderer Host

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:  |
    The vulnerable code was essentially untouched between the VCC and the fix, which was 
    a period of roughly 10 months.
    Though the vulnerability was high risk and fixed with only a few lines of code,
    the lack of development activity in an otherwise functional subsystem likely lead
    to this vulnerability's long lifespan.  Both git blame and the gitk tool do not show
    changes to the relevant code.
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    It does not appear as though there was much activity with regards to
    development around the affected subsystem. There were many years in between
    commits that touched the files that introduced the vulnerability.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      A "defense-in-depth" approach could have mitigated this vulnerability despite
      plugins having unanticipated access to the set of BrowserOperations messages.
      If the design approach had included sanitization for both ConnectToPlugin and
      BrowserOperations message types with the assumption that either could include
      a malicious payload, plugins would still be prevented from unmitigated access.
  least_privilege:
    applies: true
    note: |
      The idea of least privilege applies with this vulnerability. The problem
      was introduced because the channel the browser uses was being published
      in a way that could be read by outsiders. The fix for the vulnerability
      makes it so that this information will never be made viewable. As a
      result, privilege is an important concept here since the original issue
      was that people who were not privileged to view such information were
      still able to view it.
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      Only one of the two expected message inputs was treated as 'untrusted'.  
      Distrust of both message types could have mitigated the vulnerability despite
      the Flash renderer's ability to send BrowserOperations messages.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The relevant code appears to have been written by a single developer and had not
    been modified in almost two years when the vulnerability was found.  The presence of
    this vulnerability appears to be a simple ovesight among largely robust code, given 
    it lasted so long without requiring modification.  While both the original code and
    the fix do not appear to use unit testing, I believe the issue is sufficiently 
    complex that it would not have been feasible to detect it through all but the most 
    extensive unit testing.  A 'defense in depth' approach would have been useful in this
    case, which would involve sanitizing and validating all received messages from the 
    Flash renderer rather than just those expected to be vulnerable.
    
