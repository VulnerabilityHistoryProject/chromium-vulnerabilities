---
CVE: CVE-2016-1651
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 120
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-04-18 06:59:00.123000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability causes an information leak or a denial of service
  during the rendering of JPEG images in PDFs. It can be exploited by embedding
  a specially crafted JPEG image which will read memory past the end of the
  allocated space, due to a mistake in the implementation of a type conversion
  function. The fix involves checking the size of the image prior to allocating
  memory.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 1837383011
- 1807443002
- 1806673002
bugs:
- 591785
repo: https://pdfium.googlesource.com/pdfium.git/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 83dfeae5a988dbd17f11b409f32ef577be02c152
  :note: |
    This is the commit that updates the version of PDFium in the Chromium repo,
    but the actual VCCs and fixes are found in another repository, linked above.
- :commit: 3cc180234c14639d408003c8180ba2963f0ea665
  :note: This is the commit from PDFium that fixes the vulnerability.
vccs:
- commit: b9882f4fbcc5f6a9cea49f5c2ec6b91aafac1032
  note: This commit attempts to fix integer and bounds issues in the methods in question.
- commit: 5110c4743751145c4ae1934cd1d83bc6c55bb43f
  note: |
    This is the initial commit for the repository. This issue has been around since the
    beginning of the application.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The original code was not unit tested, but unit tests were eventually
    added that checked to see if memory was allocated properly for different
    image sizes. When the fix for the vulnerability was added, the unit
    tests were updated to show the new expected functionality.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: This was discovered by an HP employee during a Zero Day Initiative.
  date: 2016-03-03
  automated: false
  google: false
  contest: HP's Zero Day Initiative
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the comments and bug reports, this was in PDFium
  name: PDFium
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 6cf012af4954807255ce7cdb5b92a20f74d34e6d
    note: |
      This commit and bff247d92c315f9aab2edb4aeaf0ef0b74ba321f seem to touch on the future vulnerability, but
      they're plugging leaks rather than fixing the entire problem, such as edge
      cases where the image width is odd. These commits do not have associated unit
      tests, and were completed in October 2014.
  - commit: bff247d92c315f9aab2edb4aeaf0ef0b74ba321f
    note: |
      This commit and 6cf012af4954807255ce7cdb5b92a20f74d34e6d seem to touch on the future vulnerability, but
      they're plugging leaks rather than fixing the entire problem, such as edge
      cases where the image width is odd. These commits do not have associated unit
      tests, and were completed in October 2014.
  - commit: 14ce18c7c4ffe06ec743dbbb8bc523bb223cef5d
    note: |
      This commit has to do with a found heap buffer overflow in a similar conversion.
      It begins to solve the problem of the vulnerability, but does not completely fix it.
      This commit adds unit tests for the memory allocation, but it's in October 2015, so
      almost a year after the previous commit addressing memory allocation.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The vulnerability has existed for the entire lifetime of the application.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: true
    note: |
      If a buffer overflow happens, it's important that the attacker be
      restricted access to sensitive information.
  frameworks_are_optional:
    applies: true
    note: |
      Instead of writing their own JPEG parser, it may have been smarter to use one
      that was tried and true.
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Parsing JPEGs is a relatively small portion of the PDFium application, and it
    seems like it's something that requires a specific skill set. Because of this,
    I believe the developers should have used a previously written and tested
    JPEG converter/parser, instead of trying to write their own.

    Besides that, it was clear that the JPEG parser was not unit tested until relatively
    late in the project's existence, which was a mistake. It's a lot harder to detect
    bugs and vulnerabilities without unit tests.
