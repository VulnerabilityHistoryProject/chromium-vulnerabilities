CVE: CVE-2011-3026
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 122
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2012-02-06
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  When a function is called to expand the size of a PNG (within Google Chrome),
  the value associated with the size of the PNG can be as large as requested
  (meaning there is no size limitation). The reason it can be so arbitrarily
  large is because in the process of inflating a compressed image holds the need
  to "throw away" chunks of data if (when they are decompressed) have an output
  arguement of 0. Due to this vulnerability, malicious users can exploit this
  and create a value for the data that when expanded is greater than the type
  value (png_size_t) can hold causing an overflow. This obviously leads to
  memory allocation issues and heap-buffer-overflow. It is a possible entry
  point for malicious attackers to implement a DoS or possibly have unspecified
  other impact(s) by tampering with integers via truncation.
bounty_instructions: Bounty paid out to independent bug fixer:@asd@ut.ee
bounty:
  date: 2012-02-08
  amount: 1337.0
  references:
  - http://chromereleases.googleblog.com/2012/02/chrome-stable-update.html
  - https://bugs.chromium.org/p/chromium/issues/detail?id=112822#c5
reviews:
- 9378023
- 9365007
- 9383016
- 9381014
- 9385012
- 9382011
- 9374001
- 9384012
bugs:
- 112822
repo: https://chromium.googlesource.com/chromium/src.git/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 7e1f5e02e91002563a90c031999face8db78ee3c
  :note: ''
vccs:
- :commit: 4c020aaee8a6bae611d21632f920278b09b4cd8c
  :note: 'Implemented the change here where allocating space for sCAL chunks are taken
    into consideration based on the unit type of the png_handle_sCAL function.'
- :commit: ad90e5106af14df7f772187c2b6c4a73d6120910
  :note: 'addition of readers and cleaning up of writers'
- :commit: 6a654d45598c2631f0009101a553fd14b866b62f
  :note: This VCC was automatically discovered by the archeogit tool
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: It does not appear to test this with unit_tests
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Segfault was an indicator that something was not happening correctly.
    From there they traced back other additional crash details in order to find
    the cause came from processing the png data.
  date: 2012-02-06
  automated: true
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech","renderer".
  answer: true
  name: WebCore
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: |
    The only commit of importance was the fix and the other VCCs were simply
    updates to the libpng to be 1.2.45 and nothing of substantial change.
  commits:
  - commit: 7e1f5e02e91002563a90c031999face8db78ee3c
    note: This is the fix, not anything of noted interesting commits
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There was a change in the original code to encorporate a check of the
    type of png_type_t to determine whether or not more space would be required
    to be allocated to prevent the buffer overflow in the first place.
  events:
  - name: commit 4c020aaee8a6bae611d21632f920278b09b4cd8c
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      Should be noted that when handling any input (even that of png's) you
      need to be aware of the consequences of requiring enough space for the
      input after every step of manipulation of the data (ie decompressing the
      png image)
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: Overlooking input due to face value of the input being an image as opposed
    to some data that is taken in as strings or characters. It was a fairly complex
    vulnerability to even catch. but a relatively simple fix.
