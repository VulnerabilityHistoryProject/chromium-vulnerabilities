---
CVE: 2010-0643
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 201
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2010-02-18 13:00:00.347000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
   Google Chrome before version 4.0.249.89 defaulted to a direct connection when
   there were no proxies available which was different from how other web
   browsers handled this issue. Other browsers such as Firefox and IE (Internet
   Explorer) would display an error page if there were no available proxies.

   Why is this an issue? When you have a direct connection remote HTTP servers
   (the website you visit) can see your IP address, user agent information, and
   cookies stored on your personal computer. This is a serious vulnerability
   because with direct connections you lose the anonymity that proxies provide.
   An attacker could exploit this vulnerability to obtain sensitive information
   about the identity of the user.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date:
  amount:
  references: []
reviews:
- 502068
bugs:
- 12303
repo: https://chromium.googlesource.com/chromium/src/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 69719063c6ddf24d63762a5519efb11dc412a3ee
  :note: Remove the implicit fallback to DIRECT when proxies fail.
vccs:
- :commit: 7dc52f27b89ea2ab8b82a127fc899efef70fc613
  :note: ericroman@google.com added the functionality that when there are no proxy connections, it returns a DIRECT connection schema.
  :commit: 45bdf86341670d95573acbc699f2d2998a25cf1d
  :note: ericroman@google.com added the functionality that when there are no proxy connections, it uses a DIRECT connection.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
   The original code did have unit tests, however, at that time this
   functionality was not considered a vulnerability.  Once the change to not use
   a DIRECT connection as the fallback was made the developers added additional
   unit tests and updated regression tests to verify that Chome would not
   default to a DIRECT connection if no proxies were available instead,
   error-out with connection refused.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
     The bug report did not mention how the vulnerability was found, however, it
     did present use cases that supported why this functionality is a security issue.
  date: May 20, 2009
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
     According to the bug report, the issue was classified as part of the "Internals" component. The source code files that were impacted are located in the following directories:
        /src/net/proxy
        /src/net/socket
        /src/net/http
  name: Internals
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
     There were no real instresting commits, it was a straightforward fix and the messages were very clear on the changes that were taking place. These changes included using DNS resolution when using SOCKS v5, remove fallback to DIRECT for proxies, update regresison tests and add more unit tests.
  commits:
  - commit:
    note:
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
   There were no major events connected to this vulnerability. The development team was dealing with a lot of UI problems during this time which did not have any impact on this vulnerability. Problems like larger fonts, translation issues, UI crashes were being resolved and stable updates were being introduced.
  events:
  - name: Google Chrome has been updated to 2.0.181.1 on the dev channel.
    date: May 20, 2009
  - name: Stable Update - Google Chrome 2.0.172.28
    date: May 21, 2009
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: false
    note:
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: true
    note: |
      This vulnerability was a violation of being secure by default because the default behavior of Chrome when there were no proxies available was to make a direct connection which exposes the user identity for potential abuse. The fix applied this principle by refusing the connection if there are no valid proxies available.
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
     The mistake that led to this vulnerability was a design problem. Unlike, other browsers it was set up to use a direct connection when there were no proxies available. The main reason this was a problem because it exposed the user identity which could be used for malicious purposes. The system should have been designed to prevent a direct connection from being used without the user's knowledge. However, the design specification did not acknowledge that requirement.

     The CWE entry I chose was Information exposure through sent data. With a direct connection, the user's sensitive data may be exposed to attackers. To mitigate this weakness you should define what data in the software is sensitive. This mitigation happens in the requirements phase to support the design. However, this is where the requirement was missed and evolved into a vulnerability.
