---
CVE: CVE-2011-3925
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2012-01-23
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: | 
  This vulnerability comes from how Chrome handled "interstitial" pages which
  are the pages that load before or after an expected webpage that have an ad or
  ask if you're older than 18. Trying to reload a page when you were on an
  interstitial page caused memory corruption in the browser process and crashed
  Chrome.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2012-01-23 18:00:00.000000000 -05:00
  amount: 3133.7
  references:
  - http://chromereleases.googleblog.com/2012/01/stable-channel-update_23.html
reviews:
- 8976014
- 9027024
- 8958022
- 8962041
- 9023016
bugs:
- 107182
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 6a13a6c2fbae0b3269743e6a141fdfe0d9ec9793
  :note: ''
vccs: 
- :commit: 1b277e7f6d171b9cb2383f925373ffedcd3e4672
  note: |
    They were working on a fix for something else at the time.
- :commit: 25396dab596e7e47262a8a9569c7570d72b1a5ea
  note: |
    Adds the back and forward navigation buttons on interstitial pages. 
- :commit: 765b3550e2164b7ccc5360b360ba940639be71c1
  note: |
    Combined two classes and closed a memory leak, further confusing the codebase.
- :commit: cbab76d1c74c93837bc76298d1a2e43646154194
  note: |
    Begins refactoring how they handle interstitial pages.
- :commit: 43032341d6eef556c3bb0001c9e859e635a5c0ee
  note: ''
upvotes_instructions: | 
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The code did have unit tests and was tested but the tests were improved in
    the fix to try catching this kind of thing, if it happens again. They didn't
    make any changes with other kinds of tests, like regressions, but did make
    their changes in the unit tests.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was reported by someone outside of Google in the bugs forums.
    They found it by hand and then sent in their report with "asan" details, which
    is a Chromium tool for memory error detection. They were rewarded the highest
    available award since it was a critical bug.
  date: 2011-12-12
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Employees called and tagged it as SafeBrowsing in commits and on the forum.
  name: SafeBrowsing
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: aa29f9abb1859cb56fa0012f11beecdd27800feb
    note: Adds new bind/callback system to the page our intersitial pages were on
  - commit: aebdb3ec76fe3403eea5dd9f910396d86bf83983
    note: Focuses on the "go-back" and "proceed" actions with interstitial pages
  - commit: ef1cef9aef6034dda84cee719d2c9012bfb75a5e
    note: Changes how buttons work on intersitial pages
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time. 
  answer: |
    This vulnerability is actually more or less the result of a mishap while
    combining two classes in the subsystem but the refactoring didn't end there so
    there was a lot of internal refactoring in their subsystem which could have
    confused developers, especially if they were already used to the old system.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: | 
    The actual mistake that was made in the code was that they freed a link
    from memory but continued to try to access that memory if an interstitial
    page was refreshed. That's a classic example of freeing a variable before
    you're actually done with it but that mistake was caused by a number of 
    other, larger factors. The code that led to the vulnerability had been
    refactored a large number of times and that includes extracting classes,
    combining classes, shifting responsibilities, and redesigning how to
    internally handle interstitial pages. All of that led to inconsistent and
    confusing documentation and small pieces of code that only made sense prior
    to their refactoring.
