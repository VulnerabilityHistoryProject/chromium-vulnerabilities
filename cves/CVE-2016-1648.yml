---
CVE: CVE-2016-1648
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-416 Use After Free https://cwe.mitre.org/data/definitions/416.html
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-03-29 06:59:02.207000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 
  The vulnerability occured in Google Chrome's Extensions, specifically in the 
  GetLoadTimes function of renderer/loadtimes_extension_bindings.cc.

  An attempt to access memory was made after the memory was freed, 
  causing a use-after-free vulnerability. Attackers can use this to crash the system
  and cause denial of service problems, or use the memory access to perform
  some action in memory not defined by the system. By using a technique like
  Cross-Site Scripting (XSS), attackers can write their own javascript and have
  it run by the system.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-03-24 13:55:00.000000000 -04:00
  amount: 5000.0
  references:
  - http://chromereleases.googleblog.com/2016/03/stable-channel-update_24.html
reviews:
- 1782323002
- 1751553002
- 1791573003
bugs:
- 590455
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 9d92ff158726601ae5c044d62050614f076eaae4
  :note: ''
vccs:
- :commit: 4026d85fcded8
  :note: 'commit aoccured on October 30th, 2015. Commit was modifying file, not creating it.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 1
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    At the spots that the vulnerability was occuring, no tests were being
    done to check if the memory was still allocated correctly and if setting 
    the memory would cause a problem. In the fixed code, there are tests now to
    see if the memory being written to is allocated correctly.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: looking at the Issue report on https://codereview.chromium.org/1751553002/, it
    would seem that the issue was found by jochen and meacer during an update to the
    file to change deprecated code. According to the release update, there was a bounty
    of 5000 dollars, but the credit goes to anonymous.
  date: 2016-03-03
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Looked at directory of the file that contained the vulnerability.
  name: renderer
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: after using the command
     git show 4026d85fcded8..9d92ff158726601ae5c044d62050614f076eaae4 -- loadtimes_extension_bindings.cc
     it returned no commits for this file between the VCC and the fix commit, which means I could not
     find any commits between the VCC and the fix commmit that were interesting. The VCC commit was 
     interesting, however, as it was a lot of code changed in the file. The file was being updated 
     to improve performance and remove deprecated code, and so a lot was changed. Changing so much
     at one time might have been a contributing factor to allowing a vulnerability to slip by.
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I can't see any real big events happening as the time frame for the 
    vulnerability was relatively small.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: In the code, there were other places that checked if the memory for the
      frame was being freed or not, but the fix that was used is a redunancy check,
      just to make  sure that the spot in memory is ok to set. This shows that layers
      of defense can help make code secure against edge case scenarios that may bypass an earlier check.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies:
    note: 
  yagni:
    applies: true
    note: In this code, sets were being used without validating their success because it seemed
      like they weren't needed before. After this use-after-free vulnerability popped up, it was recognized
      that checks were indeed needed, and therefore were  ok to add now. This follows the "you aren't gonna
      need it" lesson of adding things only if you know you need it.
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: From my research, I would mark this vulnerability as the result of a big design
    change at one time that allowed a simple but big mistake to slide through. The file was
    being almost enirely rewritten to improve performance and update the techniques used, so
    it was likely for something like this to happen.
  
    The fix changed a lot of code in the file, but if you look at the changes, the overall flow
    of the code didn't really change. The design was modified to check for a failed set instead
    of relying on a successful set, as well as nulling the incoming arguement automatically instead
    of doing it only if the frame, data_source, or document_state failed to be retrieved. From
    most of the angles you look at it, it seems like just a design mistake from the performance update.

    The takeaway from this is to remember the basics as you are designing a bigger chunk of code
    because a few small mistakes can chain together and cause a bigger vulnerability. 
