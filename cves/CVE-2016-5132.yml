---
CVE: CVE-2016-5132
CWE: 254, 653
announced: 2016-07-23 15:59:14.860000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: This vulnerability allows insecure pages with an iframe to a secure page to intercept any communication between the secure page and the browser's Service worker. The service worker controls things like push notifications, background sync, period sync, and geofencing.
bounty:
  date: 2016-07-20 14:48:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/07/stable-channel-update.html
reviews:
- 2085923002
- 2055433002
- 2082493002
- 2061203002
- 2071433003
- 2009453002
- 2142523004
bugs:
- 607543
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: dd5dd98f5f59f4f53274308ec0a7dca74aba6525
  :note: 'Made 2016-06-21'
- :commit: 8353baf8d1504dbdd4ad7584ff2466de657521cd
  :note: 'Made 2016-06-20'
- :commit: ad1850962644e19cdb040d60eb236e0ebc23c243
  :note: 'Made 2016-06-15'
- :commit: c363d41a6001cb7b27789484702d23fa4572a918
  :note: 'Made 2016-06-08'
vccs: []
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: The vulnerability had unit tests covering parts of it, but didn't provide the coverage needed to find this problem. This vulnerability was submitted by a user. The fix to this included altering unit tests. 
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: This vulnerability was discovered and submitted by a user.
  date: 2016-04-28
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This vulnerability was found in the Service Worker subsystem, which was made apparent by the location of the majority of the files that were edited.
  name: Service Worker
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: dd5dd98f5f59f4f53274308ec0a7dca74aba6525
    note: 'This commit is the final commit fix, which came only 13 days after the first commit attempting to fix this vulnerability. During this time, between 690 and 1466 lines of code were changed, across 42 different files. The lower estimate assumes that any line removed was replaced with a new line, the upper estimate assumes that new lines did not replace removed lines. I calculated these numbers by totaling the number lines changed in each review.'
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: Trusting the iframe, as opposed to controlling the iframe in a secure context.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: This exploit involves a very complex set of inputs, involving iframes from insecure page opening a secure page, allowing some data to be intercepted.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: This appears to be a testing mistake. This vulnerability takes advantage of a very specific scenario that didn't seem to be accounted for in unit test.
