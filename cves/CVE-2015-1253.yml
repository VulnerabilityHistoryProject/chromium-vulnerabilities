---
CVE: CVE-2015-1253
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-284
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-05-20 06:59:05.557000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Scripting was allowed during DOM tree parsing. As a result, an attacker could infect remote browsers
  with malicious code via them visiting a website with malicious javascript files. Once the file was a
  loaded into the browser upong page load a script tag could then beexecuted while the browser was accessing the HTML parsing
  tree. Executing javascript during this process is generally unstable and bypassed cross-origin security policy, which
  serve as a protection mechanism for a variety of other types of attacks.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-05-19 11:49:00.000000000 -04:00
  amount: 7500.0
  claimed_by: Vasyl Kaigorodov
  references:
  - http://chromereleases.googleblog.com/2015/05/stable-channel-update_19.html
reviews:
- 1074713002
- 1007523003
bugs:
- 464552
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: a093f3f18f76308d584b93f4a3b6a7b52d4e970a
  :note: Committed by amineer@chromium.org on Thu Apr 16 20:25:05 2015.
- :commit: ad6d56fe76a49244896156182c30d8e9ff3afbf2
  :note: Committed by morrita@chromium.org on Fri Mar 13 01:35:59 2015.
vccs:
- :commit: 37e843d46392a784b09fadcef2bc2f01f0fddc1e
  :note: Committed by abarth@chromium.org on Tue May 7 05:08:53 2013. They were working
    on a refactoring of the subsystem at the time.
- :commit: ae9c7780bd059b1444b0163ba31e569f453a10e8
  :note: Committed by abarth@chromium.org on Mon May 6 23:38:16 2013. They were working
    on a refactoring of the subsystem at the time.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There were tests for the original vcc, but none of the tests that were created targeted the vulnerability.
    There were several rounds of review for the fix of the vulnerability that included automated regression tests.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: This bug was reported by an anonymous user.
  date: 2015-05-20 06:59:05.557000000 -04:00
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the description in the CVE and review of the commit history.
  name: parser
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: ea331880bc37e115c4c7209d27f8c13950648dfa
    note: |
      The same points in the code that contained the reported vulnerability were modified to use references instead of pointers.
      This action was intended to be a security improvement to the system with the goal of reducing memory-violation
      related vulnerabilities. It is interesting that a security update was performed on the exact lines within a function that were
      found to contain security flaws at a later date.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events during this time.
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The underlying cause of this vulnerability was an access control issue allowing attackers to bypass
      the Same Origin Policy and run scripts during DOM parsing. Enforcing not allowing scripts to executed
      during DOM parsing would have prevented this issue.
  least_privilege:
    applies: true
    note: |
      The principle of least privilege is closely tied to access control, which was what was
      violated as a result of this vulnerability. In this case attackers had elevated privileges that allowed
      for them to run malicious code during a process that should have restrcited script execution.
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: This vulnerability was very obscure and probably could not have been forseen
    except by seasoned, security-minded engineers. That being said, a lack of understanding
    and attention to the lifecylce of DOM parsing was probably the root cause that
    lead to the initial VCC. Paying attention to the vital points in code where the
    system becomes subject to script execution is key to preventing these types of
    vulnerabilities in the future.
version:
  broken: Revision 191769
  fixed: Revision 191807
fixed_by: Hajime Morrita
