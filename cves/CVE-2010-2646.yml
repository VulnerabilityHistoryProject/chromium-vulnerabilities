---
CVE: CVE-2010-2646
CWE: 
announced: 2010-07-06 13:17:14.780000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Bug Link(with repro steps): https://bugs.chromium.org/p/chromium/issues/detail?id=42980
  This vulnerability is a serious one as it allows for password resets in an iframe HTML
  element like <iframe sandbox></iframe> given the precondition that the allow-same-origin attribute 
  is set. This is a uncovered area of Chrome's attack vectors. For example, if there were username/password 
  form information within an <iframe> element and autocomplete/autofill is on, then the username 
  and password fields would be filled. The fix puts a check in place that ensures the allow-same-origin 
  attribute is set before allowing autofill/autocomplete.

  The second part of this fix disallows access to the password manager without allow-same-origin being checked first.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 2110008
- 2865023
- 2883003
bugs:
- 42980
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 55ced00ccfde8ae97e345f74b7903cc0317c6b57
  :note: ''
vccs: [4d44a1c2af8fc76d1d9790740bd4ac8fe5fe5bfe]
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer:  |
    There are references to unit tests in the bug writeup, and notes that while their
    tests were originally created to show that they complied specs, the behavior was 
    insecure/result of non-secure implementation practices. The bug continues to explain
    how according to the specifications, there should be different storage areas for each
    unique origin, which was not done.
  code: |
    No unit tests found
  fix: |
    The code for the fix also implements a quick-fix of sorts
    by simply throwing a security error until this gets rectified.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability was discovered by an engineer looking into the DB for sandboxed iframes and
    discovered that they leaked info as described above.
  date: |
    2010-04-30
  automated: false
  google: true
  contest: nil
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This wasn't in a subsystem per se, as it involved their misuse of the <iframe> element itself.
  name: |
    chrome/renderer/render_view.cc
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 55ced00ccfde8ae97e345f74b7903cc0317c6b57
    note: |
      I thought it was interesting that this commit, while wasn't the main commit that fixed the
      initial problem, was an afterthought during initial implementation. It took a bug writeup in
      order for the problem, and all remotely related problems, to be fixed.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    No code was rewritten, just more security checks enacted.
    The team involved in the fix changed a bit:
    ----Sandboxed iframes should not autocomplete/autofill unless allow-same-origin set (was: NULL)
      I had a chat with <>, he owns both autocomplete, autofill. Assigning <> as owner
      for <>, please feel free to reassign as required.

      You can leave the second part of bug "1. Enable/Disable Form based on allow-forms
      sandbox attribute.", which i can file a seperate bug later.

      Basically, we need to utilize SecurityOrigin::isUnique and possibly other
      SecurityOrigin::getOrigin checks from upstream for both autocomplete, autofill. We
      should not autofill, autocomplete sandboxed iframes which don't have
      allow-same-origin sandbox attribute set.
  events:
  - name: autofill/autocomplete
    date: |
      2010-05-11
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      This is true because the dev team either assumed allow-same-origin was set, or were unaware of
      the nuances of how <iframe sandbox> works
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    For the most part, coding mistakes were at fault here with some design mistakes mixed in.
    The documentation for <iframe sandbox> is explicit on how it works with allow-same-origin, so
    it should be seen as an oversight in the design and implementation phases of development.
