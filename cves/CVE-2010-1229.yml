---
CVE: CVE-2010-1229
CWE: 
announced: 2010-04-01 18:30:00.530000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Bug link: https://bugs.chromium.org/p/chromium/issues/detail?id=31880
  Security Impact: Stable
  Security Severity: HIGH

  This fix is for an issue discovered when passing pointers between browser processes. 
  Given a renderer that has been compromised, this renderer can pass an arbitrary pointer
  a plugin process. This could potentially be used to corrupt this process and execute
  arbitrary code outside the sandbox.
  The bug writeup contains explicit instructions on how to reproduce the bug, which
  is good practice and saves testers a lot of time.

  In more specific terms, the object NPObject can be sent from both the renderer and
  a plugin. When its sent, a stub object 'NPObjectStub' is created around the original
  NPObject. If the NPObject instance that was originally sent needs to be sent back, the
  stubbed copy is sent instead and is not validated prior to being sent. 

  The majority of the fix for the issue is to pass the ID of the NPObjectStub instead of
  raw objects, which then is validated by a separate method call, which returns the NPObjectStub
  for use by the caller.

bounty:
  date: 
  amount: 
  references: []
reviews:
- 603026
- 558036
bugs:
- 31880
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: ea3d1d84be3d6f97bf50e76511c9e26af6895533
  :note: ''
vccs: [7d5c3acd124fae8816416374f629752138ec08e1, 09911bf300f1a419907a9412154760efd0b7abc3, 31f4c7e11012ba7364ce5f84f9943523312f82a5, 41fbf097c8e01c4971de118eb8fb791b9abaa6eb]
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Unit tests were not involved in this vulnerability.
  code: |
    None.
  fix: |
    The fix does not include test improvements directly, but the Bug writeup includes references
    to a project that involves creating a test framework in order to test PluginChannel and
    NPObjectStub/Proxy. Test cases were to be added once this was done.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The bug report leaves no clues as to how it was discovered.
  date: |
    2010-01-09
  automated: false
  google: true
  contest: nil
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This was a bug found within the browser plugins subsystem, with other subsystems like
    Webkit and renderer communicating with plugins
  name: 
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: ea3d1d84be3d6f97bf50e76511c9e26af6895533
    note: |
      This was a rather large fix with several files modified, and it only has one patch set,
      meaning only one commit was made.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The creating of a new test framework was set in motion as a result of this bug.
  events:
  - name: NewTestFramework
    date: 2010-01-26
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      The Webkit and Plugin related processes trusted the renderer's output by default, which was the cause of this issue
  security_by_obscurity:
    applies: true
    note: |
      Instead of passing raw objects between processes, the fix just passes an ID which the caller can then use to get
      the data it needs. 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    This CVE could like be classified as a design mistake. For the most part, this dev team is 
    taking what CWE to heart with their fix. Not only is the team adding test cases to help 
    lock this issue down forever, they are creating a test framework in order to handle issues 
    like these in the future. 
