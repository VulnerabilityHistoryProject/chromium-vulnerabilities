---
CVE: CVE-2011-2837
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 684
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-09-16
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Google Chrome had a Linux specific bug based in compiler options. The compiler
  was not configured to use the PIC (Position Independent Code) and PIE
  (Position Independent Executable). Since the code wasn't being compiled as 
  expected, the attack surface was unpredictable.

  The most plausible security attack here could have been related to denial of
  service on certain machines due to compilitation related crashes. Because there is
  memory positioning involved with the vulnerability, information disclosure could
  also be an issue in the case of an overflow.

  The chrome team's conversation didn't seem very concerned with the details of
  possible attacks here, and the security severity of the bug was low. Security-wise
  this seemed like a "better safe than sorry" situation.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 6973032
bugs:
- 57908
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: a65741e788726592a38e464c2b4e6d58f95d6ebf
  :note: ''
vccs:
- :commit: fe86ccc78990a1a6287e71a9cd117d4d2a8eaed3
  :note: They removed a condition enabling -pie on compile.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    It looks like some automated tests were involved in this vulnerability, but
    the tests look like they may not have been helpful in fixing the bug. Since
    this was a compiler issue and the testing bots would break because of how
    they were configured. There's conversation in the bug report comments about
    the testing bots being flawed. The tests had to be improved to more accurately
    reflect user running environments.
  code: true 
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    It isn't entirely clear from the bug reports how this was discovered. The original
    reporter doesn't seem to be a google employee (no chromium email). The comments
    in the bug log do mention a contracter reporting the bug as well, but it's not 
    clear if that's related to the original reporter.
  date: 2010-10-04
  automated: false 
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Technically under the general chrome directory, going off bug tags.
  name: build
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    It doesn't appear that there were any interesting commits between the
    VCC and fix, as there weren't really commits that affected the vulnerability
    at all. Compiler options don't seem to get changed all that often. between
    the VCC and fix there were changes allowing chrome to open pdfs when building
    and using some cross-platform POSIX functionality.
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There was an interesting event in that it was discovered that there was an
    issue with the automated testing setup. The bug logs seemed very excited at
    the news and they were able to pass off the issue to the correct team. This
    remotivated the team after they had had some trouble replicating the bug.
  events:
  - name: Found issue in automated tests
    date: 2011-06-23
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: |
      This vulnerability existed because of a configuration file's compiler
      option settings. That is a very complex input at a critical point in
      the project deployment.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This seems to be a vulnerability that was caused by overlooking some of the
    finer detail of the compiler configuration. By missing the proper compiler
    flags, unpredictable behavior was introduced into the system. The CWE-684 is
    simply that Code does not function due to published specifications, which is
    a bit vague. The mitigation suggested is also brief: make sure the Code adheres
    to the specifications. It appears that the Google team did that once they found
    the issue. It's hard to tell if the ultimate cause of the vulnerability was an
    outright design mistake or just a coding mistake when creating the configuration
    file, but improved communication of the proper settings for specific platforms
    would have definitely helped the team.
