---
CVE: CVE-2010-4575
CWE: 
announced: 2010-12-21 20:00:03.063000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Bug Link(Repro steps included): https://bugs.chromium.org/p/chromium/issues/detail?id=60761
  Security Impact: Stable
  Security Severity: Medium

  This issue caused Chrome to crash when attempting to install themes in Chrome. Because the
  TabContents class (which contains the theme settings) was not validated prior to theme 
  installation, attempting to install two themes simultaneously in two separate browser tabs 
  and then closing one tab during installation causes the browser to crash altogether.

  The fix for this issue was simple, and interactive UI tests are included in the fix
bounty:
  date: 
  amount: 
  references: []
reviews:
- 5539005
- 5558005
- 5326011
bugs:
- 60761
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: eb68c596f0883a539386eed7a11c8a3da0aa529a
  :note: ''
vccs: [eb68c596f0883a539386eed7a11c8a3da0aa529a]
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    This was caught be an automated test.
  code: |
    There were test cases added as a result of this issue.
  fix: |
    The fix did not include adding tests since it was a trivial change.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Was discovered with manual testing the changing of themes
  date: 2010-10-26
  automated: 
  google: nil
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The mistake was in the chrome/extensions subsystem
  name: 
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: eb68c596f0883a539386eed7a11c8a3da0aa529a
    note: |
      Nothing interesting, theres only one commit between the VCC and the fix, and its
      a comment change. The comment does however does give great insight into an otherwise
      perplexing line of code that might otherwise be removed but shouldnt.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There were comments in the chat history saying that they should lower the 
    security severity to LOW instead of MEDIUM because it is not easily reproduced manually
    and users will likely never encounter it. This was interesting because vulnerabilities
    are rarely discovered by common users anyways.
  events:
  - name: SecSeverityChange
    date: 2010-11-02
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
  risk_encounter:
    applies: true
    note: |
      Concurrency is a risk, and it is good practice to distrust anything that needs to run concurrently in
      the name of security. In the scope of this mistake, if one process is waiting for another process to 
      finish destroying a shared object (not just changing its values and attributes), then this falls under
      an encountered risk.  
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    It is abundantly clear that some kind of race condition was encountered in this bug. The process that was expecting
    a given object to be destroyed never considered the possibility that the object was not done being destroyed. This
    is a design and coding mistake that should have been caught with unit tests. 
