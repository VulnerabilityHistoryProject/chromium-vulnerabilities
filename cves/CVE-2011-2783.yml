---
CVE: CVE-2011-2783
CWE: 707
announced: 2011-08-02 20:55:01.737000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  In Chrome's developer mode, when using the extensions interface at
  chrome://extensions, it does not prompt the user with a dialogue box when
  loading an unpacked extension (an extension that is not available through Chrome's
  store) that contains an NPAPI (Netscape Plugin Application Programming Interface,
  an interface that allows for plugins such as browser extensions to be developed 
  directly for web browsers) plugin like it does with other extensions. Without
  this prompt, it is easier for a malicious user to modify Chrome's functionality
  via something like a Trojan horse attack.
bounty:
  date: 
  amount: 
  references:
  - https://bugs.chromium.org/p/chromium/issues/detail?id=83273
reviews:
- 7109014
- 7046061
bugs:
- 83273
repo: https://chromium.googlesource.com/chromium/src/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: c3a9159653f81dbd82f41c826d6443d72500e18c
  :note: ''
- :commit: e1b26bbc7dcc89cded8098e3cc18f03b1299580a
  :note: 'Revert of previous commit.'
- :commit: 5fb88938e3210391f8c948f127fd96d9c2979119
  :note: 'Unrevert of previous commit.'
vccs:
- :commit: 2de307599d70dacc116ae10b84bb6860c7fdff4b
  :note: 'This commit removed any extension-related code from the directory 
          content/browser and moved its functionality to chrome/browser. However, not
          all of the plugin checks made it through.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 8
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The code for the extension services was unit tested when the vulenrability
    was initially introduced, and the fix itself did introduce a few new
    minor test elements to an already existing set of tests that tested
    miscellaneous browser extension capabilities.
    With that said, the manual testing method was also included in the commits,
    presumably for the developers to know to use for testing, implying unit
    testing may not have been enough to catch it.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability was discovered just a few months after the vulnerability
    was introduced, and it appears as though it was found through basic extension
    loading; it just so happened that the particular NPAPI extension hadn't been
    tested. In fact, it's possible this issue was known before but kept as-is
    since it would be potentially awkward for developers, but ultimately fixed
    provided that the prompt only happened when the extension was initially loaded. 
  date: 2011-05-19
  automated: false
  google: true
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The browser extensions subsystem for Chromium.
  name: extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 0f48fcabafeda681695c2e1ca73a72df3a595043
    note: |
      This commit involved checking whether or not an extension was loaded
      before trying to uninstall it. If the user was prompted about the extension,
      this would be an easy issue to look for. This is notable because this was
      one of the oversights that contributed to the longevity of this bug.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events within the timeframe of this vulnerability.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      As explicitly stated by the developers in the bug testing page, the entire
      point of the prompt created by the browser when loading extensions is a defense
      in depth measure to prevent malicious attacks.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The vulnerability was an oversight in the types of extensions that could be
    loaded. Ideally, assuming there are restrictions in place on the types of
    extensions that can be loaded (which there should be, otherwise you risk breaking
    the distrust input protocol), there should be a list of those extensions
    that is tested through incremental testing when anything related to the extensions
    loader is modified.
    While it is nice that they're ensuring that NPAPI extensions will now correctly
    prompt the user, it does leave a bit to be desired, specifically that there may be
    other extensions left that have the same problem; again, the best course of action
    should be to ensure that every type of extension prompts the user when loaded, as intended.