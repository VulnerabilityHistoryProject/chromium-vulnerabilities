---
CVE: CVE-2014-7934
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-01-22 17:59:15.600000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A user was able to crash Chrome by executing a complex series of JavaScript 
  commands. This crash was caused by a used-after-free issue. By accessing memory 
  no longer available, the program crashed and generated a sensitive crash dump.  
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-01-21 15:11:00.000000000 -05:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2015/01/stable-update.html
reviews:
- 730513002
- 745613003
- 751593002
- 721103002
- 718293002
- 722093002
bugs:
- 427249
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 73c390dbc4a5f379f41f2b51b697afaab2118767
  :note: ''
- :commit: 2e5f9bb3de559fa7ace48d3202ce24651d4a3e73
  :note: ''
- :commit: 73c390dbc4a5f379f41f2b51b697afaab2118767
  :note: ''
- :commit: abbb4880590d4b4934d0a2db3251f253733ae362
  :note: ''
vccs: 
  - commit: 56d3dae3e51988ba04982b46b31eae658bcdb784
    note: |
      "Original if statement was created by Apple before WebKit was 
      forked by Google"
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    No unit tests appear to be present before the fixes. Unit tests 
    were added later.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: An external user disocvered this bug and reported it to Google
  date: 2014-10-26
  automated: false
  google: false
  contest: true
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on Bug Report and file locations
  name: Webkit/Blink
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 73c390dbc4a5f379f41f2b51b697afaab2118767
    note: |
      This commit was not only reported twice, but it was also reverted soon 
      after being merged. Code was reverted due to the fix not being completely 
      suitable and was pulled until a more appropriate fix could be made.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    This CVE/bug originates to the original WebKit fork from Apple.
  events:
  - name: WebKit is forked from Apple to Google
    date: 2010-11-10
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: true
    note: |
      This vulnerability appeared to be an edge case caused under certain circumstances. 
      The original developers must have assumed that the Object was no longer 
      accessed after deletion. 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: |
      This vulnerability is not something the normal user would encounter. The person who 
      discovered this vulnerability had to execute a very complex layer of XML, which is 
      a tree-based structure, to cause this memory issue.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability was simply a rare abuse case that broke an assertion in the style 
    rendering of WebKit. This vulnerability appears to have been present as far back as 
    when Google forked the WebKit repository from Apple. When blamed, the original code's 
    last author was an Apple engineer, at least 5 years before this bug was identified.
    
    There was not much in terms of design or coding mistakes that were made. This vulnerability 
    was an extreme edge case, however, the Google engineers appeared to have some issues finding 
    the correct patch for this. Some commits were made, but were then later reverted because 
    they either did not fully solve the problem, or they broke more features.
