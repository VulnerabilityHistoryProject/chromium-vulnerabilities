---
CVE: CVE-2015-1236
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 264
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-04-19 06:59:01.493000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "The process function in the Web Audio API function is allowing attackers
  to access sensitive audio sample values through an offline\nwebsite containing an
  offline media element \n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-04-14 13:41:00.000000000 -04:00
  amount: 4000.0
  references:
  - http://chromereleases.googleblog.com/2015/04/stable-channel-update_14.html
reviews:
- 262873002
- 486883003
- 905393002
- 520433002
bugs:
- 313939
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: cbcfc9fbb63f1a9639bbcacfcd92963780c38a06
  :note: 'Check for valid webMediaPlayer() before using it.

'
- :commit: 68ea68519e8fe233ebd0dfa3d95cc7f356434f2d
  :note: 'This reverted the revert in the vcc below, and added the fix and the layout
    tests back

'
vccs:
- :commit: 68ea68519e8fe233ebd0dfa3d95cc7f356434f2d
  :note: |
    This is a partial revert that removes the CORS checks.  All the other changes were in support of adding the 3 lines for the CORS
     checks to silence the output on failure. Tests are also removed. This ultimately removed the fix and the layout tests.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: "Automated unit tests were involved in this vulnerabiliy to verify that
    the vulnerability cannot occur.\nThe fix did not necessarily 'improve' the unit
    test but it did help pass them. Additional unit tests were added \nfor the same
    origin and cross origin source. The failures were caused from not checking whether
    the mediaPlayer\nis connected to a cross-origin source\n"
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: The answer was found by a Google employee. The exploit can be reproduced
    manually with JavaScript.
  date: 2013-10-31
  automated: false
  google: true
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on modules/webaudio/MediaElementAudioSourceNode.cpp
  name: audio
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 6834289784ed45b5524de0fb7ef43ae283b0d6d3
    note: |
      Output silence if the MediaElementAudioSourceNode has a different origin
      Interesting because this commit was very very close to solving the problem. It only needed one extra check
      on the webAudio object to be the solution. When the media element is not accessible when it outputs silence
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    At one point a commit came very close to the solution but the commit raised plenty of error. THe commit after that removed the
    potential solution entirely, and it was realized that was not the solution either. For the last commit it used the first attempt
    but with one extra check.
  events:
  - name: partial revert that removes the CORS check
    date: Feb 7 2015
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The solution to the vulnerability was to create a check on the media element for same/cross origin. Unit tests and functions
      were created to ensure that if the tests did not pass, the vulnerability is existent.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: 'The vulnerabilty involved a media element being able to be accessed from
      a different origin

'
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies: true
    note: "In order to mitigate the vulnerability, there must be a check to see whether
      the cross-origin source was connected to an\nOfflineAudioContext. The vulnerability
      was reproduced when an attacker created an audo element and set the source to
      a media\nfile from a different origin. \n"
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "There seemed to have been a coding/maintainability mistake that could have
    been mitigated. The vulnerability is a difficult one to discover because it would
    have required extensive testing of all components of the system. This is impractical
    because it would require a lot of resources and you don't know what exactly you're
    looking for. \nOne thing that could have been looked into was that since the audio
    object was handling sensitive data, the subsystem that handles this object should
    have been a focus on unit testing. It should be common practice to evauluate areas
    where assets are being accessed. This vulnerability is a perfect example. The
    other mistake was trusting the API to be secure. The Web Audio API was responsible
    for hosting this vulnerability, so it would have been the Google's responsibility
    to evaluate the API implementation that involved handling sensitive data.\n"
