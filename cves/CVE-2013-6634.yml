---
CVE: CVE-2013-6634
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 287
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-12-06 19:55:03.820000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An incorrect URL was used during user authentication in the Gaia subsystem. When a
  user would login to some web application with credentials that were saved in Chrome,
  the 302 response recieved from the web app was not properly validated. When attempting
  to redirect a user following authentication, Chrome decides whether to follow
  the given url based on the information given to it.

  The conditional logic that would decide whether the redirect url should be followed
  was flawed, not referencing the correct url from the object in question. This
  enabled remote attackers to conduct session fixation attacks and hijack web
  sessions by triggering improper sync after a 302 HTTP status code.

  This vulnerability was present in the master branch of chromium's source
  from around October 9, 2012 until a bug report was opened over a year later on
  October 14, 2013. A fix was merged on November 21, 2013- more than another month later.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2013-12-04 10:38:00.000000000 -05:00
  amount: 1337.0
  references:
  - http://chromereleases.googleblog.com/2013/12/stable-channel-update.html
reviews:
- 77343002
- 99783002
- 100063003
- 102073004
- 100063004
bugs:
- 307159
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 50370b3c98047bdc80184ff87a502edc5c597d3a
  :note: ''
vccs:
- :commit: 263f607ce722e8e663d4ce7a0a25df09bb059d60
  :note: ''
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: 
  code: 
  fix: 
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: 
  date: 
  automated: 
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: 'The bug fix git commit mentions that the vulnerability fix /"validate[s]
    gaia http headers/"

'
  name: Gaia
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 951dc55883a64e7f0c12106c5f7b20051c3ada91
    note: |
      the conditional statement in question is refactored in how it refers to the
      IsGaiaSignonRealm function; it looks like the function was moved
      into a namespace called gaia. It still gets passed request->original_url()
      instead of request->url() just the same.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: A fix for a crash related to nearby function, ShowInfoBarIfPossible
    date: 2013-08-02
  - name: Fix reverted
    date: 2013-08-02
  - name: Another fix issued
    date: 2013-08-05
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The redirect url from a 302 response was not properly checked to be valid-- while
      this was not a concious decision, anytime outside input has reason to be distrusted,
      there should be tests around uses of that data.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    At its core, CVE-2013-6634 was caused by a simple coding mistake. The programmer who
    implemented the VCC accessed the wrong member of an object, therefor passing the wrong
    value into a function call that was to approve or dissaprove the traversal of a 302
    redirect. This could have been mitigatted with more testing- especially the use of a
    code coverage tool could have identified the need for testing when a conditional like
    this should resolve to true.

    There do not appear to be tests in place to catch a regression of this issue. While
    it's unlikely a regression would happen in this location in the code, a refactor of the
    request object might be useful to prevent future similar errors.
