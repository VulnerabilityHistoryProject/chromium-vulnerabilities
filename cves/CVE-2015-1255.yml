---
CVE: CVE-2015-1255
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-04-02 00:00:00.0 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  In Chromium, Blink, a rendering engine, is used with almost a one to one 
  relationship with each browser tab instance. It takes on the responsibility 
  of rendering most of the content in a browser tab. In the 
  case of this vulenrability, Blink was trying to use a particular 
  object instance to stop playback of music content in the browser tab process after that instance 
  was destroyed. This Use-after-free vulnerability in the WebAudio implementation 
  of Chromium allowed remote attackers to cause a denial of service 
  or possibly have other unspecified impacts.

  The fix adds to the empty an destructor to call newly introduced function 
  which removes the instance of particular pointer from the Blink renderer engine instance so that 
  it is not used later on by Blink. Even though initially in the VCC the destructor 
  is empty, in C++ at time of destruction it will still destroy member variables 
  of the class which is what caused our use-after-free issue being addressed here.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-05-19 11:49:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2015/05/stable-channel-update_19.html
reviews:
- 1071063005
- 1136803003
bugs:
- 473253
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 228cd9447121ede4d32ab48c8dfe066736cfdae2
  :note: |
    Author guidou <guidou@chromium.org>
    Date   Fri Apr 10 06:00:37 2015 -0700

      Fix heap-use-after-free issue with WebAudioCapturerSource.
      
      WebAudioCapturerSource registers with a blink WebMediaStreamSource.
      When the audio track was stopped, the WebAudioCapturerSource was
      destroyed and the WebMediaStreamSource was left with a dangling
      pointer, which it tried to use, resulting in access to freed
      memory and usually a crashed tab.
      
      This CL makes WebAudioCapturerSource aware of the WebMediaStreamSource
      with which it is registered, so that it can be deregistered when the
      audio track is stopped.
      
      BUG=473253
      TEST=See testcase.html in crbug.com/473253
      
      Review URL https://codereview.chromium.org/1071063005
      
      Cr-Commit-Position refs/heads/master@{#324622}
vccs:
- :commit: 3c89eaf563f7e5665b4b3194c3e83950eee54042
  :note: |
    Author crogers@google.com <crogers@google.com@0039d316-1c4b-4281-b951-d872f2087c98>
    Date   Thu Jan 17 03:32:29 2013 +0000

      Add chromium support for MediaStreamAudioDestinationNode
      
      We add smarts into MediaStreamDependencyFactory::CreateNativeLocalMediaStream()
      to handle MediaStreams originating from WebAudio.
      
      Please see companion WebKit patches
      https://bugs.webkit.org/show_bug.cgi?id=101815
      https://bugs.webkit.org/show_bug.cgi?id=106053
      
      BUG=none
      TEST=manual test
      http://www.corp.google.com/~henrika/WebAudio/MediaStreamAudioDestinationNode.html
      
      Review URL https://chromiumcodereview.appspot.com/11369171
      
      git-svn-id svn://svn.chromium.org/chrome/trunk/src@177330 0039d316-1c4b-4281-b951-d872f2087c98
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    It is not 100% apparent if automated testing is involved. A replication
    test case was provided that looks like a UI automation script, which would 
    make one think there is.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This specific vulnerability was discovered through a crash report submitted by user Khalil Zhani.  
  date: 2015-04-02
  automated: false
  google: false
  contest: ''
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Blink renderer
  name: content/renderer/media/webaudio_capturer_source.cc
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    More than 20 commits exist betweem the vcc and the fix commit. 40-50% of these commits are fixing bugs.
    This makes one think that code was not sufficiently tested before being introduced into Chromium.
  commits:
  - commit: 
    note: 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This appears to be an mistake with the design approach.
    Since the instance of WebAudioCapturerSource could have a shorter
    life then Blink it should have been considered
    what things need to be done at time of destruction. In the case of the fix,
    adding to the destructor in WebAudioCapturerSource to remove its pointer
    to itself from Blink was the solution.    


