---
CVE: CVE-2016-1641
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-03-05
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An image downloading function in a file related to web content could potentially
  grab info that was freed out of order in such a way that an exploiter could
  cause a denial of service attack. This was demonstrated by a fuzzer with a
  favicon download.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-03-02
  amount: 500.0
  references:
  - http://chromereleases.googleblog.com/2016/03/stable-channel-update.html
reviews:
- 1730363003
- 1685343004
bugs:
- 583718
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 75ca8ffd7bd7c58ace1144df05e1307d8d707662
  note: |
    Rewrote image downloading function that was the source of the
    vulnerability to not get called in the specific case where out-of-order
    calling could be exploited, namely when a particular WebContents instance
    gets deleted.

vccs:
- commit: ca2eabdc854a972db31fec01af6bb22ae643af4c
  note: |
    Modified image downloading function to be implemented with a third-party
    service called Mojo. The possibility of out-of-order freeing stems from
    this change. Both the VCC and fix were committed by separate people that
    appear to not be affiliated with Google.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    No, this code doesn't appear to have unit tests. However, the vulnerability
    was caught by a fuzzer test.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was found by the fuzzer, Clusterfuzz. While it was originally
    not reporducible, it was determined to still be unsafe and was assigned to be
    fixed.
  date: 2016-02-03
  automated: true
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the CVE description and the folder structure of the files, the
    mistake is located in the Web Contents subsystem.
  name: Web Contents
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 
    note: |
      I couldn't find any real interesting commits directly related to the
      vulnerability itself. There were mostly just a lot of various additions
      around the file. Given the file's huge size, there are many moving parts
      that get touched frequently. There was an interesting decoupling effort in
      a different area of the file, though, which I'll describe in the major
      events section.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
      There was a 10-commit-long effort to decouple RenderViewHost from
      RenderWidgetHost. While this is not technically related to the vulnerability,
      I thought it was interesting how difficult it can be to retroactively apply
      proper software engineering principles to previously hacked together code.
  events:
  - name: Commit 85a4cef354c4ae0f4277af6bf6be82b3326f0c55 (the final commit)
    date: 2015-12-18
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      Given that this vulnerability stemmed from changing a function to use a
      third-party service, it would make sense that this applies. It could also
      be interpreted as an example of distrustful decomposition. Making sure to
      check anything coming from outside sources is essential to proper security.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    The CWE only gives a few brief mitigations for use-after-free. One is to use
    a language with automatic memory management, and the other is making sure to
    set pointers to null after freeing them. The majority of the web contents
    subsystem built mainly with C++, and it would be incredibly difficult to move
    everything over to a different language, not to mention the fact that it would
    probably create some noticeable inefficiencies. The fix actually involved just
    rewriting the function to avoid the problem area in the third party service
    entirely.

    The main mistake made with this vulnerability was not realizing how the third-
    party service was touching other pieces of code. Working with a codebase this
    large, it can be near impossible to cover everything. However, special attention
    must be made to anything not kept within internal systems.

    Luckily, these mistakes were handled quite well once found. Unlike the other
    vulnerability I had (CVE-2015-1216), this one was actually picked up by a test of
    some sort (in this case a fuzzer). Along with this, even though the developer
    working on the bug couldn't reproduce it, they realized that the code still
    appeared unsafe and went through with assigning it to be fixed. It's important to
    not just brush off bigger vulnerabilities like this just because you cannot
    recreate it at first.
