---
CVE: CVE-2015-6790
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 80
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-12-14 06:59:03.013000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Chromium did not properly use HTML entities upon saving a page, allowing
  offline XSS. Anchor tags with escaped HTML characters following "#" in the href
  attribute would render as regular HTML entities. This could also be exploited
  by a double-quote character inside a single-quoted string. This made it possible
  to steal content or CSRF tokens by making a victim save and open a page that
  included a crafted anchor or mixed quotes.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-12-08 14:56:00.000000000 -05:00
  amount: 500.0
  references:
  - http://chromereleases.googleblog.com/2015/12/stable-channel-update_8.html
reviews:
- 1398453005
- 1487273003
bugs:
- 542054
repo: https://chromium.googlesource.com/chromium/src/+/b770d85e37b2d0e248f04cf20606a2f3871ef039/third_party/WebKit/Source/web/WebPageSerializerImpl.cpp
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: b770d85e37b2d0e248f04cf20606a2f3871ef039
  :note: |
          Fix escaped URL attribute values rather than directly outputting
          URL attribute values
vccs:
- commit: c1d2bdb0496d2264dd38614c9d6119818bc7b2f1
  note: Vulnerability existed since the file was added to Chromium
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The serializer had some unit tests, but they did not check for this vulnerability.
    The vulnerability was reported by an individual, not caught by tests.
    After the fix, unit tests were not added to prevent regress.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was discovered by inti.de....@gmail.com who reported a bug that a crafted anchor tag
    could lead to offline XSS when saving a page. The vulnerability was tested on both the stable and canary builds
    and a proof of concept and attack scenario was provided. The attack scenario showed how a saved Facebook post
    could scrape the page and show the user a popup with their information.
  date: 2015-10-11
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The mistake was in the Blink engine subsystem. Specifially, it was in WebKit,
    which is part of their third-party tools. The Chromium team introduced this
    third-party tool and extended it to fit their needs.
  name: WebKit
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 5246f8a1e98014420f73357c2b8946e83b16cce5
    note: Reverted deletion of file due to regression of crbug.com/510422
  - commit: b80f8d02f3a8487c79d21bbc260ced3ff170e714
    note: |
      Deleted the vulnerable file to merge functionality with a similar page
      serializer https://bugs.chromium.org/p/chromium/issues/detail?id=328354
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    After being added, the file was moved to 2 new packages and deleted and reverted.
    The serializer in the file was removed due to being a duplicate of a similar one
    made by another team, and then reverted due to regressing a bug.
  events:
  - name: Revision 200628, revert removal of serializer
    date: 2015-08-17
  - name: Revision 198151, merge serializers
    date: 2015-07-01
  - name: Revision 153869, move file to a new package
    date: 2013-07-10
  - name: Revision 75909, move file to a new package
    date: 2011-01-17
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The input should be sanitized before saving the page and the contents
      should be checked before loading the saved page. A crafted local page
      could bypass the sanitization and exploit the vulnerability.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The content to be saved should not be trusted, they should have properly
      santized input before saving.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistake made was a basic lack of santization. This vulnerability was in a
    third party tool and it seemed to recieve little review or testing due to not being
    their own code. The vulnerability was quickly and easily fixed once reported, but
    the vulnerability existed for a long time.

    The fix they applied of sanitizing the data before saving satisfies the standard
    mitigation. They could have improved the mitigation by adding unit tests to make sure
    it does not regress.

    The largest mistake they made was trusting the third party tool. It recieved little
    review and the vulnerability was overlooked the few times it was modified. They could have
    improved by adding unit tests or conducting a security review of the tool before
    integrating it.
