---
CVE: CVE-2012-5155
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-284, Improper Access Control
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-01-15 16:55:01.760000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Chromium doesn't check if Mac OS Xs sandbox successfully initializes,
  which means that if a malicious attacker compromises Chromium, the
  damage isnt contained throughout the system. This has privilege and
  restriction implications. If an attacker uses Chromium to hack the
  system it's run on, they could gain access to private files on the
  system and possibly run arbitrary code.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date:
  amount:
  references:
reviews:
- 12829005
- 11737004
bugs:
- 163208
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 4f99782b60caec061f62def550f0ef16a2d42bd0
  :note: Fixes the spelling mistake in worker_main.cc
vccs:
- :commit: 0d7717faeaef5b72434632c95c78bee4883e2573
  :note: |
    Fixes Mac OS X spelling errors in unit tests, forgot to fix the spelling
    error in worker_main.cc
- :commit: 721c4476b5eead07deb24b0f450c63cde12bfcc8
  :note: |
    Fix checks that the Mac OS X initializes properly, however the
    Mac OS X definition is spelled wrong
- :commit: ea43b153371c28d659eced3b9d657766a84a1652
  :note: |
    This commit intializes the sandbox for Linux, but forgets to add
    sandboxing for Mac OS X
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: |
      Were automated unit tests involved in this vulnerability?
      Was the original code unit tested, or not unit tested? Did the fix involve
      improving the automated tests?

      For the "code" answer below, look not only at the fix but the surrounding
      code near the fix and determine if and was there were unit tests involved
      for this module.

      For the "fix" answer below, check if the fix for the vulnerability involves
      adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Multiple unit test file were modified during the history of this
    vulnerability. In the worker_main.cc file, a unit test was added to check
    that the sandboxing properly initializes for Mac OS X.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: N/A
  date:
  automated:
  google:
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This was a mistake in the Web Workers subsystem, more specifically
    the Shared Worker susbsystem. This subsystem is connected to multiple
    renderer processes via the browser process, and helps render the webpage.
  name: Shared Worker
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: f17a7bb8f2c9e1a93cb37cd7efbe811f2504127f
    note: |
      The worker_main.cc file no longer exists, this commit removes any
      shared worker process related codes.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    A major event in this vulnerability is the entire removal of any
    related worker codes, or in other words, the removal of any code that helps
    render browser pages. In the current setup of Chromium, the sandboxing is
    splitup by the three major operating systems; Windows, Mac, and Linux. The
    related worker codes have been completely rewritten, and the Sandbox
    subsystem since been added to.
  events:
  - name: Adding the first files to Mac's Sandboxing
    date: 2014-04-29
  - name: Adding a second layer sandbox for Mac OS X
    date: 2014-04-29
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      This applies because sandboxing is a line of defense that helps contain
      compromised applications from accessing and attacking the OS the
      application is running on. In this vulnerability, Chromium's sandboxing
      doesn't work properly on Mac OS X. This means that if Chromium gets
      compromised on Max OS X, then an attacker can attack the Mac OS X by
      first attacking Chromium. For more information on how Chromium's
      sandboxing works, look here;
      https://chromium.googlesource.com/chromium/src/+/b4730a0c2773d8f6728946013
      eb812c6d3975bec/docs/design/sandbox.md#Overview.
  least_privilege:
    applies: true
    note: |
      This applies because if the sandboxing process is broken, then the
      principle of least privilege is broken. The malicious attacker could
      bypass intended access restrictions, and possible access Mac OS X private
      resources.
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: false
    note:
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The mistakes that led to this vulnerability were not considering
    sandboxing for OSX, when it was considered and used for Windows and Linux.
    This could have just been a simple misunderstanding or overlook on the
    developers side of things.

    The lesson learned from this vulnerability is to check the initialization
    of important subsystems/components that could compromise the integrity of
    the system if they aren't initialized properly.

    The mitigation for the CWE entry is being used,
    since if sandboxing on OSX isn't initialized properly, Chromium will shut
    down so it can't be compromised.
