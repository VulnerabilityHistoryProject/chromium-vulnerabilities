---
CVE: CVE-2013-6652
CWE: 23
announced: 2014-02-23 23:48:09.897000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Directory traversal vulnerability within an inter-process communication procedure
  which escaped the intended sandbox. The sandbox makes sure that processes don't
  have unrestricted access to each other. Chromium uses different processes for
  each webste that is open by the browser to prevent information leakage. There are
  other options that chromium can run with including a single process for for each
  website, each group of tabs, or everything. More information can be found here: 
  https://www.chromium.org/developers/design-documents/process-models .
  
  Should the sandbox be escaped a malicious process could interact with sensitive 
  information it wouldn't normally be able to access. This was caused by a lock 
  of checking for a .. (dot dot) sequence or the lack of use for the \\?\ 
  protection mechanism which allows for relative path usage.
bounty:
  date: 2014-02-20 11:00:00.000000000 -05:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2014/02/stable-channel-update_20.html
reviews:
- 143683006
- 149513004
- 145553007
bugs:
- 334897
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
  - commit: 28e853184da2aa6490745f1e0e18bcfba211c31
    note: Fixed the bug introduced in the other commit.
  - commit: 172c77a9f7922fc9b58632abe62173c66fb6e10b
    note: Added tests looking for the canonicalized path in the named pipe creator for windows.
vccs:
  - commit: a814a8d55429605fe6d7045045cd25b6bf624580
    note: The initial commit did not possess proper path canonicalization.
  - commit: 5672e5d87b9ae60c2141f2fcb5042bf66f54b25b
    note: Final commit before the fix was implemented. No proper check for canonicalization before creating the pipe.
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 9
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There was automated testing for both the original code and the fix but the
    tests did not cover this specific input with files starting with '\\.\'.
    More automated tests were created with the fix to properly test this case.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?
    
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    
    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: This bug was reported by a community member with a reproduction case provided for further testing.
  date: 2014-01-16
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?
    
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Within the sandbox section of the Chromium source code.
  name: sandbox
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit: 18149178646e45f3d7dde865efbeabbab431799a
      note: This was a large refactoring involving moving the old sandboxing code into a specific area for windows.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    
    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events during this time.
  events:
  - name: 
    date:  
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: Well crafted paths can escape the sandbox.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: Canonicalization requires different behaviors for different kinds of inputs.
  inter_process_communications:
    applies: true
    note: Sandboxed environments have to have strict communication protocols otherwise the entire purpose of the sandbox could be circumvented.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The core mistake here was a design oversight which allowed special path 
    formats, notably '\\?\' to carry out unexpected behavior. The current fix
    looks like it addresses the issue and allows it to be tested for in the future.
    This is a prime example of the usefulness of bug bounty programs as the bug was
    found by a community member who also provided helpful reproduction and mitigation
    suggestions.
