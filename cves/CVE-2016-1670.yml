---
CVE: CVE-2016-1670
CWE: 
announced: 2016-05-14 17:59:10.383000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability took place in the content module, which is
  responsible for actually rendering the contents of a page. Multiple 
  vulnerabilities were found in processing page content; the worst of 
  which allowed a remote attacker to execute arbitrary code on the 
  target's system. A website containing malicious content could also 
  cause the browser to crash and disclose sensitive information on the
  target user's system. 

  1670 is specifically a race condition in ResourceDispatcherHostImpl (A renderer process)
  If an attacker were to exploit this, they could potentially make arbitrary
  HTTP requests. The way this works is that the resource distpatcher (a singleton) passes
  requests to resource loaders. Becuase this is a concurrent system its possible
  one of the renders requests an ID that is currently in use. This ultimately could
  lead to a plethora of issues as the applications state in know corrupt.

bounty:
  date: 2016-05-11 14:04:00.000000000 -04:00
  amount: 1337.0
  references:
  - http://chromereleases.googleblog.com/2016/05/stable-channel-update.html
reviews:
- 1608573002
bugs:
- 578882
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 1af4fada49c4f3890f16daac31d38379a9d782b2
  :note: |
  Block a compromised renderer from reusing request ids. They accomplish
  this by adding a method to check if a particular request ID is
  in use.
vccs: 
- commit: 3d08dd38aa2310d55dd7d9cc46089efa26abcb25
  note: |
    This is where they made the render creation method and check request priority.
    The reason this is was a vcc is that the developers were not thinking
    about conncurent requests. There is simply no check to see if the request to be
    be dispatched is actuallu in use. 
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: Yes there were two tests written to test this.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    It was uncovered by anonymous. There is really no information on
    who discovered it and how is was discovered.
  date: 2016-01-30
  automated: 
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This was in the rendering subsystem.
  name: Renderer
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 202534e3fa636aa1c9ce73c30dbbba854992488f
    note: |
      This commit adds a field to the URLRequest object to 
      keep track of the context that initiated the request.
      This is interesting because this bug is all about re-using
      requests that are already in use. Seems like this field could
      be used to avoid this issue.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Chromium in general is a great idea. Multiple processes are responcible for fetching
    content and then blink will display that. The issue is that with the resource loading
    taking place over several processes, keeping a consistent state can be tricky. This
    CVE is certainly a victim of that problem. I think chromium has a solid design however, 
    because of all the IPC/concurrency there are bound to be race conditions, especially when
    when there is a lot of data that gets passed between processes.

    Seeing that this is developed by the community it makes it
    extra hard for each developer to have the same mental image of how all of these
    resource loaders work togather. There are a lot of little details that each one
    might keep in mind but not all. 

