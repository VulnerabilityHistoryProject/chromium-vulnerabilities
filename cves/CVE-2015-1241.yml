---
CVE: CVE-2015-1241
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: User Interface Security Issues
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-09-28 05:09:05.773000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  On mobile, click events were able to fire outside of the scope that they were created in. This can be exploited through the use of tapjacking. Tapjacking is the concept that an attacker can listen for taps with a screen overlay, and can sniff any data that is being passed to an underlying application. This can even include credit card data or passwords. In the case of this specific vulnerability, the trigger page will redirect to the victim page (under ideal circumstances), and events can be fired across domain boundaries. This would give attackers access to input single clicks to perform simple tasks. Like buying something, or posting something. Anythig with a single button.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-04-14 13:41:00.000000000 -04:00
  amount: 1000.0
  references:
    - http://chromereleases.googleblog.com/2015/04/stable-channel-update_14.html
reviews:
  - 660663002
  - 724313003
  - 628763003
  - 717573004
  - 868123002
bugs:
  - 418402
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
  - :commit: ed1dafa7db5fcd150a757d1237c83a81666ec47f
    :note: 'TapDown events are generated prior to Tap evenets, but not always. Validate this by ordering events in the GestureEventStreamValidator'
  - :commit: d47c1e4b6bb7e9b485f6dfede0236ddd5c823878
    :note: 'Gesture reset logic native to Android is causing the issue. Detection isnt reset for timeout events. Will use a specific gesture detection reset hook to allieviate this.'
  - :commit: 9d343ad2ea6ec395c377a4efa266057155bfa9c1
    :note: 'Cancel all actice touch events whenever a window is out of focus or a page is navigated away from, before the touch release event.'
vccs:
  - :commit: 3c85191dc27cc4734458ff94324ffacf40f44c22
    :note: Commit was made and introduced the vulnerability, without knowing that it was a vulnerability.
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: Yes, there were unit tests. Both were unit tested, but additional unit testing wasn't necessary. All they did was expect "false" where they were previously expecting "true". It was introduced because it wasn't forseen as a vulnerability but it ended up that it was.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: The blogposts don't explicitly say how the bug was discovered, so it leads me to believe this was either something that was being reported that they had to seek out, or, it was something they discovered accidentally. The discoverer explains a reproduction case that isn't exactly perfectly reproducable, for instance, the phrase if the conditions are just right. Tapping too fast, or too slow breaks it, so timing is very important.
  date: 2014-09-28
  automated: false
  google: false
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: input subsystem
  name: input
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: There really weren't any interesting commits. Which is a shame. In the commit history the only thing to happen was the implementation going back and forth, which is what introduced this issue in the first place.
  commits:
    - commit:
      note:
    - commit:
      note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The commit that introduced this vulnerability directly contradicts this vulnerability.
  events:
    - name: Introduced
      date: 2014-09-16
    - name: Discussion of implementation, ignoring all taps with different URLs or destinations sounds nice, but there are still other holes to patch. Like making sure Tap events are always preceded by TapDown events.
      date: 2014-09-29
    - name: Fixed
      date: 2014-11-18
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: The commit message for where the vulnerability was introduced states that its PROBABLY not required. They trusted in their defense too much, and should have practiced defense in depth.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: This seems most like a requirements mistake. The commit that introduced the vulnerability seemed to have introduced it carelessly without knowing the consequences of what they changed. Proper requirements could have cleared up the misunderstanding. It could have been a miscommunication. It's puzzling why it was introduced. It seems like it was just changed for seemingly no reason, just to be changed back once it caused an issue. It'd be interesting to know what was going through the original developers heads. Maybe there is something more to the story here. Requirements that could have been added to prevent this could be something as verbose as Taps must execute only where they belong, and must not go outside of their scope. This could have helped eliminate this issue, as it doesn't make sense for Taps to travel between subsystems and to separate web pages.