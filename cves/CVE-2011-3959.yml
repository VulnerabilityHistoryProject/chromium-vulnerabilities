---
CVE: CVE-2011-3959
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-119
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2012-02-08 23:10:28.737000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  There was a buffer overflow in the way Google Chrome implemented locale 
  information. This vulnerability affects one of the dependencies that Google
  copied into their own repository and edited to work with their code.
  The overflow could have lead to potential denial of service attacks 
  and more. A Fuzzer from someone who works outside of Google discovered
  the vulnerability. The bug affected over seven hundred versions of Chromium and was likely
  there since or very close to the beginning.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2012-02-08 12:00:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2012/02/stable-channel-update.html
reviews:
- 8964020
- 8822005
bugs:
- 106441
repo: https://chromium.googlesource.com/chromium/deps/icu46/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: c30f4209b183623ddad8e08ee332ee1decf84c55
  :note: |
    This is the fix on the Chromium repo that directly correlates to the updated 
     code located in the dependency repo.
- :commit: c9287557a495aad7ff3faef2ac850c85caf842c9
  :note: |
    This is the code that is located on the other repo that is involved in fixing the code.
vccs:
- :commit: 9e25f1efa90f0e5402f220f1b4f57ead32d28808
  :note: |
    This is the commit on the basic Chromium repo. This does not directly 
    correlate to the problem as versions constantly change but is the last instance of this 
    line changing as this vulnerability affects too many versions to find the first commit.
- :commit: 878ab27c8e23bae140344313af953fe99cf89b34
  :note: |
    This is the code that was problematic but on a separate repo (icu46). It seems to be from when the 
    dependency was cleanly copied from the original for this version. The insertion of this copy
    calls it pristine and states that it was taken to use to fix another bug that the new version
    fixed.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 9
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    It does not seem like this was unit tested as this was a dependency that
    was cloned into the Chromium repo as a dependency.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability looks like it was discovered by a fuzzer. It was discovered 
    during Project Christmas fuzz and by someone who was not a Google employee.
  date: 2011-12-05 
  automated: true
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This vulnerability was in the dependencies that Chrome seemed to have cloned and modified on their end in a separate repo.
  name: icu46
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 
    note: |
      There were no interesting commits as the line in question was never touched since it was 
      reintroduced with a version upgrade.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: It looks as though this was a normal bug fix
  events:
  - name: 'Bug reported'
    date: 2011-12-05
  - name: 'Fix Ready to be merged'
    date: 2011-12-08
  - name: 'Merge Approved'
    date: 2012-01-03 
  - name: 'Fix is fully merged'
    date: 2012-01-19 
  - name: 'CVE is publicly announced'
    date: 2012-02-08 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input: 
    applies: true
    note: |
      It seems as though the input from the user (the locale information) is trusted
      since it did not account for the fact it could overflow as it did. The length
      was likely never accounted for.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
  distrust_dependencies: 
    applies: true
    note: |
      It seems as though Google trusted the dependency and they had to manually fix it
      especially since they decided to manually copy it and change items within it.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    There was a mistake in trusting the dependency and the way that Google handles
    its dependencies. By cloning the dependencies and manually changing items when needed
    (By Chromium), the project was missing out on bug fixed and other important updates. This also might have been an issue that could have been mitigated if the
    way it was implemented. Also, because this was a dependency, this was likely
    not unit tested by the Google team.
