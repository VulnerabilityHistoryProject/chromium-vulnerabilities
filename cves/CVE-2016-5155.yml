---
CVE: CVE-2016-5155
CWE: 
announced: 2016-09-11 06:59:10.990000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A simple validation issue that allows an attacker to spoof the address bar.

  In V8 there is a check to see if the current context can acces the DOM window.
  The issue was that this check was only called on property lookups, not function calls.
  The fix binds this check to shouldAllowAccessTo() because that gets called at every
  possible new window and thus is the correct place to check.

  To exploit this one could simply cause a window to be spawned in such a way that chrome
  did not envoke this check.

  Here is an example from dcheng@chromium.org

  Blink assumes that remote frames will always fail the security origin
  check. Unfortunately, reality is not that simple. There are several
  instances where this assumption fails to hold. For example:

  1. Navigate to a.com.
  2. a.com opens a new window.
  3. Navigate the new window to b.com via the omnibox.
  4. Click a link to c.com in both windows.

  Because browser-initiated navigations go cross-process but
  renderer-initiated navigations do not [1], the two c.com windows will
  end up in different renderer processes.

  Both windows have the same origin but see each other as RemoteFrames.
  This means that SecurityOrigin's canAccess check will passâ€¦ but this
  ends up violating many assumptions in Blink that passing the security
  check implies a local frame.
bounty:
  date: 2016-08-31 15:50:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop_31.html
reviews:
- 2177233002
- 2209303002
- 2259773002
bugs:
- 630662
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: b8dcfeb065bbfd777cdc5f5433da9a87f25e6ec6
  :note: binding: Moves the check for the first access to the initial document into BindingSecurity.
vccs:
- commit: f23b8e77a83a5aafabf64acf723cf2ac02c5cf0e
  note: |
    This is where they made the canAccess method without binding it too shouldAllowAccessTo()
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    This issue required adding serveral tests because each platform could
    have thier own way of managing windows.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability has credit going to anonymous, seriously no information on it's discovery. 
  date: 
  automated: 
  google: 
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Where V8 does security checks.
  name: V8
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 1110a5cfe2d768ac023a7d5ccee128c1a1d7f54f
    note: |
      This was interesting. It was commit where they also moved a securty check
      It would appear that most of the commits to BindingSecurity.cpp are about
      adding checks to see if clients have acces to things. 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The big mistake here was a lack of checking at certain times. 
    This seems to be systemic of this subsystem. I think the reason that this is
    a trend is because by constently checking to see who can read what, you would
    lose performance. The ultimate goal for this class seems to be check only what you need
    to check only when you need to know. 

    The history of this module is full off slowly adding more checks and calling them
    more often. It's possible this subsytem has grown to large and might benefit from a
    refactor with one guiding question. Does the client Y need to have acces to object X?
    Go through all possible callers (Y) and objects (X) and break the system down like that. 
