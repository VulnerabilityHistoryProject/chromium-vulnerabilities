---
CVE: CVE-2014-3196
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 732
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-10-08 06:55:06.643000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Shared memory resources in Windows have a property known as a Discretionary
  Access Control List, or DACL, which keeps track of who or what is authorized
  to access them, how they can be accessed, and so on. Typically, these
  resources are also given a name when instantiated. If this is not the case,
  then Windows automatically assigns the resource a null DACL, which means there
  are no authorization controls attributed to this resource, and thus there are
  no limits to how they can be accessed, or who can access them.
  
  Windows implementations of Google Chrome occasionally use unnamed shared
  memory resources, meaning they are susceptible to this problem. Specifically,
  the shared memory resource is not properly restricted to "read-only", meaning
  a clever enough attacker can bypass protection mechanisms in Windows and
  Chrome's "sandbox" (a mechanism used to isolate potentially dangerous
  programs) or otherwise adversely modify resources in Chrome, leading to a slew
  of unintended problems.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-10-07 16:12:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2014/10/stable-channel-update.html
reviews:
- 444323005
- 412043002
bugs:
- 338538
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: dc84fcce71f37e6faeab9dce6ae2a65f1e12a5d2
  note: |
    First fix. Added random names to previously-anonymous shared memory
    sections.
- commit: 6d6797eb60a6626fd48bd9fe92a6598de3a0ea8b
  note: |
    Second fix, from the same developer as the first. Additional changes to how
    shared memory was named, and updates to unit tests were made.
vccs:
- commit: d7cae12696b96500c05dd2d430f6238922c20c96
  note: |
    base/ folder added to the Chromium repository. Code was originally located
    at base/shared_memory.cc. Most of the problematic code was introduced with
    this commit.
- commit: 9768435ce177fd81018fcd4654fe95add34c1cbf
  note: |
    Code had been moved to base/shared_memory_win.cc prior to this commit. A
    small change was made to the problematic code, in relation to changing the
    size of shared memory regions.
- commit: b6413b49b4a1bf216bbc70cc330e905c42db5c5b
  note: |
    Another small change was made to the problematic code, this time in relation
    to switching from wstrings to normal strings.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Unit testing was used both in the original code, and in the fix for
    verification. Pre-existing unit tests were updated in the second fix.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Found by a security researcher using undescribed tests. The issue was
    reproduced by a developer using a handmade test program.
  date: 2014-01-27
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the CVE entry.
  name: base/memory.
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 43429004f262b0a820a7f7f5c3d85c02a95fae84
    note: |
      Lock functionality for the SharedMemory class was deprecated. This was
      interesting to see considering the main issue of this vulnerability was
      poor resource control and permissions handling.
  - commit: ff672b7b041300c6c7d8c34b441c85a5d45b0eae
    note: |
      Some additional functionality for the SharedMemory class was deprecated.
      What's especially noteworthy is that named shared memory functionality was
      deprecated in this commit, which was reintroduced and enforced in the fix.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The most noteworthy events were the code being moved around or renamed in
    the repository, which have been noted below.
  events:
  - name: base/shared_memory.cc renamed to base/shared_memory_win.cc by avi@google.com.
    date: 2008-08-12
  - name: base/shared_memory_win.cc moved to base/memory/ folder by brettw@chromium.org.
    date: 2013-03-29
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The attacker can bypass sandboxes if they are clever enough, which is a
      clear failing of several defense mechanisms in Chromium and/or Windows.
  least_privilege:
    applies: true
    note: |
      The vulnerability was essentially an elevation of privilege, as attackers
      could interact with the shared memory in a way that was unintended if they
      were clever enough.
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: true
    note: |
      Based off of the VCCs and one of the other noteworthy commits, it is clear
      that the developers did not think naming shared memory objects was
      necessary, and thus it was not implemented for all objects. In fact, the
      functionality was deprecated at one point.
  complex_inputs:
    applies: 
    note: 
  concurrency_is_always_a_risk:
    applies: true
    note: |
      Shared memory implies concurrency is happening, and with this often comes
      a plethora of issues, as was the case here.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main mistake made was related to an implicit security requirement
    imposed by how Windows handles objects in memory. Because some of the shared
    memory resources were anonymous, Windows would not make them securable, and
    thus they were vulnerable to an elevation of privilege attack as described
    in the CVE entry. To prevent this, these resources had to be named.
    
    It is clear that the initial developers were either not aware of this
    property in Windows, or didn't think it would pose an issue, as the problems
    present in the code went largely unaddressed for several years.
