---
CVE: CVE-2010-3118
nickname: Autosuggest over SSL
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [201,200]
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: '2010-05-17'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Chrome is a web browser, and supports some autocomplete functionality when a
  user is entering a URL into the search-box. The search-box performs URL searching
  as well as searching on google.com, and is referred to as the 'Omnibox'.
  The autosuggestion appears to be performed by sending a http call to a server
  containing the text the user has currently typed, and requests for possible
  completions of that text. This call is in http and an attacker could concievably
  sniff this information and see what text or partial URL a user is viewing.

  This vulnerability (CVE-2010-3118) focuses on the case where a user includes
  their username and/or password in an https URL they enter into the search-box,
  something akin to "https://user:password@host". This will be included in the
  auto-complete request sent to the server over unsecure http.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 3144001
- 2878085
- 3120002
- 3142001
- 3044054
- 3143001
bugs:
- 51146
- 1647
repo: https://chromium.googlesource.com/v8/v8/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: cac59d3c698e6f823c27703a15efdeb9bb59a80e
  :note: |
    A new check is added to blacklist the 'user:password@host' format from being
    sent over http for autosuggestion.
vccs:
- :commit: 09911bf300f1a419907a9412154760efd0b7abc3
  :note: |
    The initial code for the autosuggestion feature in the search-box
    (the 'Omnibox') does not perform any checks.

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 12
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Looking at the commit marked as fixing the bug, the vulnerable code was unit
    tested, but there was no existing unit test checking for that specific
    vulnerability. It appears to have been an overlooked feature. The fix included
    adding a unit test checking that the vulnerability did not occur again.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: 
    The conversation notes in CVE state that the vulnerability was first noted by
    Robert Hansen in a BlackHat talk, and the conversation occured in 2010. I was
    able to locate the recording of Robert Hansen and Josh Sokol's talk ("HTTPS Can
    Byte Me", 2010), and located where he highlights this vulnerability, around
    minute 37, on slide 35. He does not say how this vulnerability was first discovered.

    The same vulnerability is noted in Hansen and Sokol's paper by the same name,
    "HTTPS Can Byte Me". 
  date: '2010-05-17'
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on descritpion in CVE.
  name: Omnibox
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    Using git blame, the original vulnerability is found to be introduced in
    the initial commit for the repository. No checks are performed to determine
    if the content being sent for autocompletion is appropriate to send in plain
    text over the web.

    In 2008, bug 1647 is raised, noting that no checks are being performed. They
    determined several cases where autocompletion would be inappropriate, and 
    limited the autocompletion feature in a few different ways. However they
    overlooked this particular edge-case of https://user:password@port, and it
    remained in the code for the next 2 years.
  commits:
  - commit: 83c7264800194b0d9ffdce49c57a3fdd5cf6a1a0
    note: They added checks for several other edge-case vulnerabiliies
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    I saw some commits that referenced changes being made in order to support
    or better support ChromeOS, which had not yet been released.

    The initial vulnerability was introduced many years ago but due to its minor
    nature, the vulnerability was only realized by developers when it was announced
    publicly during a talk.
  events:
    event:
    - name: Original Chromium Bug 1647 Logged. See https://bugs.chromium.org/p/chromium/issues/detail?id=1647
      date: '2008-09-06'
    event:
    - name: Black Hat USA 2010 publicly reveals vulnerability
      date: '2010-07-28'
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: |
      The vulnerability was largely a situation where some obsure edge-cases
      of input were not accounted for. A URL can be used in many different ways,
      and many of those wats contain sensitive information.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The initial issue seems to best fall under a Design Mistake. The autosuggest
    feature did not initially perform any comprehensive checks to see if
    autosuggestion was appropriate for the current URL.

    A fix was submitted that covered many different cases where autosuggestion
    would not be appropriate, but still allowed it in some cases where it was
    not appropriate. This could be considered a requirements mistake as it
    relied upon a poorly defined requirement.

    Some of the comments in the issue tracker noted the different ways that
    URLs could contain sensitive information, and many of them are small edge-cases
    that relied upon still developing technology (HTTPS). New edge cases could
    be introduced as the standard grows, and these edge cases will need to
    be updated once more. This file was curated in 2018, but I am unsure if
    more edge cases have been found since this vulnerability was resolved.
    
