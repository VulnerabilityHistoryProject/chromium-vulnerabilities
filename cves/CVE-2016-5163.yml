---
CVE: CVE-2016-5163
nickname: 'Just Add البيدي'
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [254,451]
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: '2016-08-31 '
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 
  While English and many other languages are processed from left-to-right (LTR), 
  other languages (like Arabic and Hebrew) are processed from right-to-left (RTL).  Unicode
  supports characters from both classifications.  Strings made up of both LTR and RTL characters
  must be displayed in a specific order using the bidirectional text (bidi) algorithm.
  
  In this vulnerability, on Chrome for Android, when a user entered a URL into the address bar, if the first
  strong character (A character with a clear direction, either LTR or RTL.  Usually an
  alphabetic character) in the URL is RTL, an attacker could construct a URL that was displayed in
  reverse, introducing address bar spoofing by constructing URLs that appear to be visiting one domain
  but are actually visiting some malicious site.
  
  For example, in the URL 127.0.0.1/ا/http://example.com , the first strong character
  from LTR is ا.  This character causes the neutral characters (numbers and punctuation)
  preceding it to take on the RTL direction, while http://example.com remains LTR.  As a result, the 
  URL is displayed as http://example.com/‭ا/127.0.0.1, with the LTR segment appearing before the RTL segment.
  
  The displayed URL is an example of address bar spoofing because it leads the user to believe they
  are visiting example.com, when they are actually navigating to localhost.  This vulnerability was found in
  Omnibox, which is responsible for things like URL auto-complete, instant search, and search suggestions.
  
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-08-31
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop_31.html
reviews:
- 1988553002
bugs:
- 609680
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 3bd33fee094e863e5496ac24714c558bd58d28ef
  :note: |
    Set the Android Omnibox to always render paragraphs left-to-right, guaranteeing that
    URLs are displayed left-to-right.  If a URL contains right-to-left characters, they will
    still be rendered RTL, but this setting prevents the entire URL from being flipped around
    as in this vulnerability.
vccs:
- :commit: 1c7d9ce02925cf766fc508d4ee83424369e71548
  :note: |
    Similar bug from the previous year that required the same fix (setting text field to be forced to LTR
    rendering), but according to a dev who worked on both bugs, the fix was missed in Android, resulting in
    CVE-2016-5163.
- :commit: 7497635a7cfdae2866d2aa7a3bd2894c895b8360
  :note: |
    Not the actual VCC -- moved over 1000 Chrome for Android files into the Chromium repo, including the files for the
    UrlBar and the SuggestionView in Omnibox. This commit is as close to the introduction of the code into the repo
    as the commits get.  After searching through old Android repos, it is unclear exactly when this code was written, before
    it was moved over to the Chromium repo.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: 'There do not appear to be any unit tests associated with bidi text.'
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The vulnerability was discovered by security researcher Rafay Baloch.  He does not describe
    how he discovered the vulnerability, but it seems he tested an Android device with URLs
    containing LTR and RTL characters.
  date: 2016-05-06
  automated:
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: 'From file paths of affected files and developer discussions in bug report.'
  name: 'Omnibox, Android, UrlBar, SuggestionView'
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: 'See below'
  commits:
  - commit: 7497635a7cfdae2866d2aa7a3bd2894c895b8360
    note: |
      This commit was as close to the VCC as I could find.  It was part of some major refactoring
      effort that moved thousands of lines of Chrome for Android code into the Chromium repo.  The
      assumption is that this code was in some other repository previously, as no developer could have
      (or would have) written over 1000 files in a single commit.  There were also zero deletions in
      this commit, another indicator that this code was moved in from elsewhere rather than replacing
      existing code in the repo.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 'Similar vulnerability involving address bar spoofing and RTL characters (part of VCC)'
    date: 2015-06-03
  - name: 'Still-ongoing discussion of spoofable RTL URLs started in bug report'
    date: 2014-03-12
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      This vulnerability was triggered by user input - a URL entered into the address
      bar - without any checks or sanitization performed.  The fix for the vulnerability
      neutralized the input by requiring that URLs are rendered left-to-right, which
      sanitizes it of the quality (character direction) that caused the URL to flip.
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: true
    note: |
      While the input in this vulnerability was just a string of characters, the "complex"
      part is the extra consideration of the direction of each character.  Especially for
      speakers of Latin-based languages, it's easy to forget that some languages must be 
      displayed differently because of their directionality.  Properly dealing with strings
      that contain a mix of character directions requires an entire algorithm (bidi) and the
      proper settings on a web page's HTML (the "dir" attribute).
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    It was nearly impossible to find the source of this vulnerability because the introduction of the UrlBar
    and SuggestionView Omnibox code into this repo was buried so deep within a 1000+-file commit.  While
    this may not have contributed to the vulnerability, the developers should consider breaking up future refactoring
    efforts across multiple, smaller commits to improve traceability.
    
    While the team clearly considered issues of bidirectional text in the code, this vulnerability seems to have
    slipped by them.  Therefore, I would classify this as a coding mistake, as support for bidi seems to have
    already been a part of the requirements and design.  The fix seems proper; the developer specifically chose to 
    force LTR as the solution in order to align with the behavior of similar modules in the system.
