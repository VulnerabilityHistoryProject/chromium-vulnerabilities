---
CVE: CVE-2016-1640
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 749
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-03-05 21:59:11.070000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  When a chrome user tries to install an extension from a website, that
  website could redirect to another website and still show the extension installation
  dialogue started from previous website.
  For example, a crafted website could show a link to install an official
  extension from some service say Google, and when user clicks on it, the chrome
  will take you to the Google support page and will be prompted with an extension
  installation dialogue initiated by the crafted website. The presented extension
  could be a fake extension intended to be an attack. The user would think it's official
  one given that user is on the official support website. The dialog doesn't show
  the origin, so it gives even more credibility to the attack.
  Poor design decisions led to this vulnerability. This vulnerability would not have occurred in the first place
  if they had thought about showing the origin of the install dialog and considered killing the dialog when redirected to different website.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-03-02 15:41:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/03/stable-channel-update.html
reviews:
- 1554233005
- 1563543003
- 1496033003
- 1403293008
bugs:
- 550047
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 0a1c15fecb1240ab909e1431b6127410c3b380e0
  :note: 'Change the inline install dialog to be tab-modal.'
- :commit: bbe84115d3dc969bfcf6ca87bebd1f5608db6ecf
  :note: |
    'Fix to disable inline installation when installation frame is deleted.
    If inline installation is deleted before user accepts from the dialog, the installation will
    not be allowed even though the dialog will still remain there. Dialog stays around even after the frame
    is deleted, and hitting either accept or cancel buttons both will just cancel the install.'
vccs:
- :commit: d44ec7b19861bf7dec13e035530aabd173c19900
  :note: 'it was a merge of two different use cases into one class'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The original code was tested with many browser UI tests. The fix also
    improved the existing tests and added more to verify the changes.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Looking at the bug report, the person who discovered it has  detailed video
    demonstration of how the vulnerability behaves. Inline extension dialog persisted even after
    the original website redirected to a new website.
  date: 2015-11-01
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    Looking at the bug report, the component is marked as Platform>Extensions, and the
    fix commit changed and added files to extensions directory.
  name: extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    The VCC itself seemed intersting as the commit message says 'refactored to make easier to use/extend'. It is understandable that
    there is good chance of introducing new vulnerabilities when refactoring code if not tested all the scenarios.
    In addition, based on the bug report comment, the proposed solution to this bug was to kill the install dialog when navigating away,
    however, that seemed to be more complicated, so the developer chose another strategy to just leave the dialog
    box up but hitting the 'accept' button would be a no-op. This patch went ahead, and the developer kept on improving his solution
    and changed the dialog modal to the tab where the request is made which fixed another vulnerability that the previous fix had introduced.
  commits:
  - commit:
    note:
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The fix involved multiple revisions. The developer pushed code more than 5 times before getting
    approved in code reviews. The developer re-wrote install checking conditions based on
    feedbacks. In addition, the initial fix was to disable the install dialog actions if the origin website
    changes. However, the dialog box would still remain there. So, the developer wrote another fix that
    made the install dialog tab-based modal.
    Based on the bug report comments, the alternative to this was to change the dialog title or contents to
    mention the origin, and the developers brought up the concern that they probably require additional
    PM/deisgner review on wording and they would also need translations. They didn't go this route, but
    it was interesting to see they discussed on this regard as well.
  events:
  - name: propose solution
    date: 2015-11-02 21:59:11.070000000 -05:00
  - name: another fix to make tab-based modal
    date: 2015-12-09 02:26:11.070000000 -05:00
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      When a website initiates an extension installation and redirects to another website,
      checking the origin of the install prompt and removing the dialog if current webpage address
      is not the same as the origin of the prompt is the solution to this vulnerability.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I believe this vulnerability has to do with design and requirements mistakes.
    If requirements had mentioned that this behavior shouldn't have been allowed, the code
    could have been implemented that way. However, I can understand it's impossible
    to think about all the scenarios on requirements. So, that's why if proper design
    decisions were made regarding how to handle such scenario when user navigates to different
    page or when user is redirected to different page.
    Based on bug report, it seems like they had made better design decision for next version of Chrome.
    This vulnerability needed medium-level security attention because the install dialog
    didn't show the origin and users could be tricked into installing malicious extensions. So, the initial fix seemed like a hack,
    where they were simply trying to mitigate this problem for now. Second fix improved the previous fix however.
    The final solution for this was to redesign the architecture of how the dialog is shown. A comment on the bug report indicated that
    they were planning to redesign the dialog, so looks like they knew the proper mitigation for this problem.
