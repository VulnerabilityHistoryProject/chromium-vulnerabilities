---
CVE: CVE-2016-1657
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 284
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-04-18 06:59:06.093000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The method to force focus on the address bar to allow a user to overwrite the
  contents of the address bar would misbehave when a user, or site, uses a method 
  to generate a blank page. The method would append the new url onto the existing 
  blank page url. This would allow the page url to appear as a different page, 
  allowing an attacker to spoof a site to gather information from an unsuspecting 
  user.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-04-13 14:48:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/04/stable-channel-update_13.html
reviews:
- 1832913003
- 1678233003
bugs:
- 567445
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: c70cb1fe9303df33b11187d0f5f60d22938e6e63
  :note: 'The code now checks if the generated about:blank page was created as the startup URL or by a user and adjusts accordingly.'
vccs:
- commit: 0c9406639ed7eadded6d93a3b6e83e4a7e1e2458
  note: They were working on a fix for something else at the time.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Automated testing did exist for this function, but more extensive testing
    was added to address this specific vulenrability and to ensure that the
    vulnerability would not reappear.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: It is not clear how Luan Herrera discovered the vulnerability.
  date: 2015-12-08
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Based on the description of the CVE, the bug report and diretory of file 
    that contained the vulnerability.
  name: WebContents
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 646b7324626d271b4780f13d110561b306a12532
    note: |
        Slight change from "controller_.GetActiveEntry();" to "controller_.GetVisibleEntry();".
        They made the change as GetActiveEntry could cause some bugs.
  - commit: 34b565c73021cf8f9aaf42987cc9998862c2e608
    note: |
        Slight change from "controller_.GetVisibleEntry();" to "controller_.GetActiveEntry();".
        Reverted the change from the previous commit as it was believed to be causing some issues.
  - commit: 6286a3798e51456de431d03d184a2f13ee5f2545
    note: | 
        Slight change from "controller_.GetActiveEntry();" to "controller_.GetVisibleEntry();".
        They changed it back to GetActiveEntry to fix the bugs they originally wanted
        to change and found that GetActiveEntry wasn't the root of the issues they 
        were trying to fix from the previous commit.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: No major events were found.
  events:
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The function would misbehave when accepting page transitions that create 
      about:blank pages from a user or website.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The vulnerability was due to trusting users. They were allowed to append to 
    the url on an about:blank page to essentially spoof a website.
    
    The fix prevents the address bar from being focused and appended to if the
    about:blank page wasn't created as the startup page. This prevents an attacker
    from creating an about:blank page and appending to the url. This fix should 
    be permanent.