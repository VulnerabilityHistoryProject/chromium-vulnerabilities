---
CVE: CVE-2014-7932
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-01-22 17:59:13.820000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability refers to an attacker that attempts to access memory after it has been freed. 
  This could cause the program to crash or could allow for full remote code execution capabilities. In
  the case of this vulnerability consequences such as denial of service or pending updates of detached 
  elements could happen. This vulnerability is found in the Element::detach function in core/dom/Element.cpp 
  in the DOM implementation in Blink which is found in Google Chrome versions before Google Chrome version 40.0.2214.91.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-01-21 15:11:00.000000000 -05:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2015/01/stable-update.html
reviews:
- 742693002
- 806793003
bugs:
- 429666
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 20666ed323c7bc89fb1fed6dc8e164e35a0e391b
  :note: |
    The unscheduleSVGFilterLayerUpdateHack check was moved down to a 
    lower part of the code and an assert was to made to check if the 
    element needed to be attached/updated. If it did then the unscheduleSVGFilterLayerUpdateHack 
    was called. Found by pdr@chromium.org <pdr@chromium.org> on Thu Nov 20 15:26:53 2014.

vccs:
- :commit: 102adc7991df6776a98283c4abe501032682687c
  :note:  |
    Rename scheduleLayerUpdate now that it's only used for SVG filters. 
    The updating was beinging done immediately during the dettach of the 
    element so like the hack allowing  access to the system. Jun 5, 2014 ojan@chromium.org 

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested: 
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    A singular unit test was involved in this vulnerability. It was an assert method to test if the 
    the double freeing of memory does not crash.
  code:  true
  fix:  true
discovered: 
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The element is scheduled for an update while being detached. Once the code was moved it waited for ContainerNode::detach(context); 
    to happen. When scheduling, we check that an element does not need an attach (which would handle the filter layer update) before actually scheduling.
    This patch moves unscheduling after the element is in a needsAttach state.
    Heap-use-after-free in blink::Node::setNeedsStyleRecalc (was Heap-use-after-free in blink::Node::getFlag)
    This looks like an automated test had happened to find the vulnerability (https://bugs.chromium.org/p/chromium/issues/detail?id=429666&fbclid=IwAR0Ce8UhckQH0z0lPwDhetVRQafFjK6_qWUKXrmDC6O9GbBM8fxADT5bHAI).
  date:  2014-11-3
  automated: true
  google: true
  contest: true
subsystem: 
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: third_party/WebKit/Source/core/dom/Element.cpp
  name: third_party
interesting_commits: 
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  commits:
  - commit: 6146f26845d2e8a7c2be00b4c9a5802f903a84fd
    note: |
      The only interesting commits would be the fact that some tests were needed to be reverted back and then enabled again because 
      it wasn't working on some parts of the system. The test cases that failed were related to the Heap-use-after-free vulnerability
      that was found by automated tests.

  - commit: a6a0a961f10a944f931d0e18dcdf951fedf44b07
    note: |
      This commit invovled the gpu_test enabling the Pixel_OffscreenCanvasUnaccelerated2DGPUCompositing.
      The only interesting commit happened before the fix happened, and it was a  
      Revert of gpu_test enable Pixel_OffscreenCanvasUnaccelerated2DGPUCompositing (patchset #2 id 20001 of https://codereview.chromium.org/2471173002/ )
      since it was Failing on Mac Retina GPU FYI bot. There were only 3 commits in total and the 2 other than the fix was mainly reverting things back 
      because parts of the system weren't working properly,
      Revert of gpu_test enable Pixel_OffscreenCanvasUnaccelerated2DGPUCompositing 
      (patchset #2 id 20001 of https://codereview.chromium.org/2471173002/)
major_events: 
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
          The main events were the vulnerability being found, working with the dettach function to fix the hack, and then eventually committing to fix.
          A nearby subsytem was not changed, code was meerly moved around. Code was technically added with a unit testing,and some
          parts of the code was renamed for better understanding.
  events: 
  - name: Heap-use-after-free in blink::Node::setNeedsStyleRecalc (was Heap-use-after-free in blink::Node::getFlag)
    date: Nov 3 2014
  - name: We should unschedule the layer update hack when we get ::detach()'ed, maybe some SVG code is not doing that properly? comment made by esprehn@chromium.org
    date: Nov 4 2014
    details: One person suggested a solution and cc'd the owner of the solution since they weren't familiar with Blink. The person never got back until the bug was fixed
  - name: Bug was fixed by pdr@chromium.org
    date: Nov 20 2014
lessons: 
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: n/a
  least_privilege: 
    applies: false
    note: n/a
  frameworks_are_optional:
    applies: false
    note: n/a
  native_wrappers:
    applies: false
    note: n/a
  distrust_input:
    applies: true
    note: |
          Use-after-free vulnerability in the Element::detach function in core/dom/Element.cpp in the 
          DOM implementation in Blink, as used in Google Chrome before 40.0.2214.91, allows remote attackers 
          to cause a denial of service or possibly have unspecified other impact via vectors involving pending 
          updates of detached elements. The allowing remote attackers part is the thing to hone in on, this vulnerablity 
          allows for an update to happen during a detach which essentially is causing a double freeing of memeory, 
          distrusting all unrecognized inputs could help mitigate the the vulnerability of having an attacker 
          cause a denial of service to the system.
  security_by_obscurity:
    applies: false
    note: n/a
  serial_killer:
    applies: false
    note: n/a
  environment_variables:
    applies: false
    note: n/a
  secure_by_default:
    applies: false
    note: n/a
  yagni:
    applies: false
    note: n/a
  complex_inputs:
    applies: false
    note: n/a
mistakes: |
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
          The main mistake that lead to the vulnerability was trying to update an
          element that was trying to detach and free its memory.
          I believe it was mainly a design mistake in the code itself. This is because
          an element is scheduled for an update while being detached. The code just needed to 
          be moved for the element to update after the element was detached. The fix was simple it
          just wasn't dealt with for quite a bit of time after it was discovered.

