---
CVE: CVE-2010-1505
nickname: Off to the Races
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 362
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2010-04-20
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  When opening a new tab, one could take advantage of a race condition and
  start loading a page in that tab before the new tab process (NTP) completed.  
  This resulted in the newly-loaded tab sharing the privileges of the new tab page.  
  This vulnerability was the underlying cause of another bug (Chromium bug 12718) 
  which saw form submissions being submitted as a GET instead of a POST since the 
  page was loaded in the new tab process.  With the privileges of the new tab process,
  an attacker may have been able to execute a CSRF or similar attack taking advantage of
  the side effects of these privileges (such as the change of form submissions from POST 
  to GET).
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references:
  - https://chromereleases.googleblog.com/2010/04/stable-update-security-fixes.html
  - https://bugs.chromium.org/p/chromium/issues/detail?id=40575#c2
reviews:
- 1626012
- 1519025
- 1549027
- 1523018
- 1631009
bugs:
- 40575
- 12718
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 821825658763d672a40ff332753103108323dbaa
  note: |
    Added safety check to ensure tabs can only navigate to DOM-UI-permitted URLS (actual fix in 54ec647 below, lines were
    removed in this commit because of an issue with an automated check).
- commit: 9821e6e9f5259141e3e6c25c3b9493c78ae08e2c
  note: |
    Eagerly set the site instance as soon as a new tab process begins to ensure that if we navigate away from that new tab, 
    it has its own process and does not share the process of the new tab.
- commit: 54ec647bc4c41a46bab353c9eede6441030be150
  note: |
    Added safety check to ensure tabs can only navigate to DOM-UI-permitted URLS.
vccs:
- commit: b6e09acf8ced26198871626c76bb5a3741cc51f1
  note: |
    Large refactoring of RenderViewHost that included addition of logic to check if a destination URL already had a SiteInstance
      or was a restore; this is where the code was missing the check added in the fix to see if the
      URL has a DOMUIScheme.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 14
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There did not appear to be any unit tests involved with this vulnerability.  A unit test might 
    have checked the state of the site instance variable, but because this was originally not immediately set
    unless a new tab was a page reload, it was not necessary.  In most cases, the site instance was not set until the
    new tab process finished, so there was no relevant state change to check.
    
    Dev added two EXPECT statements validating the state of the site instance, as the
    primary fix involved setting the site instance variable as soon as a new tab is opened, possibly before the new
    tab process has completed, to prevent a quick navigation to a new page from inheriting the new tab's site instance
    and permissions.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This vulnerability was reported by Google employee eroman@chromium.org.  The bug report
    discussion does not say how he found it, but does describe how to recreate it and notes
    that the incorrect setting of the 'dom_ui_enabled' bit can be seen by attaching to the
    renderer process hosting the test webpage under 'RenderView.' This may have been discovered
    via an existing bug report (12718) that turned out to be a side effect of the wider issue
    captured by this vulnerability.
  date: 2010-04-06
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    Based on paths of affected files.
  name: |
    tab_contents, renderer_host
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    See below.
  commits:
  - commit: b6e09acf8ced26198871626c76bb5a3741cc51f1
    note: |
      This was a fairly large refactoring effort for the RenderViewHost, which was used to
      render the new tabs in this vulnerability.  While this refactoring may not have
      contributed directly to the VCC, it is very large (1645 insertions and 1226 deletions),
      which may be a red flag about the size of the commits developers were making in 2008.  
      If commits of this size were commonplace, it would be much more difficult to locate the root
      of a vulnerability.
      
      This commit was actually the VCC, but the commit message was misleading because it indicated 
      that it was only a refactoring.  Most of it was indeed refactoring, but buried within all of 
      those changes was the addition of logic to check if a destination URL already had a SiteInstance
      or was a restore; this is where the code was missing the check added in the fix to see if the
      URL has a DOMUIScheme.
      
      It appears this file was not touched again until it was at some point moved into a tab_contents
      folder, then later when the fix was made.
  - commit: 96d185dff2231e09dfcf4b08c9ed878a4a9f7acf
    note: |
      This seems to have been another refactoring commit where much of the tab functionality was moved to 
      a specific directory.  While it isn't as large as the last commit, it is still sizeable with 447 
      insertions and 478 deletions.
  - commit: fdd61c60136a6d3cf351003802b513a950c91029
    note: |
      This commit was the start of moving functionality from WebContents (which was heavily involved in 
      the VCC commit) to a separate TabContents directory. This reorganization may have played a part in
      identifying the initial bug with form submission behavior, as that bug was recorded about a month later.
      Upon reading the discussions in the bug report for the form submission issue, it is interesting that no
      one seems to have brought up this then-recent refactoring.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    See below.
  events:
  - name: 'Start of refactoring moving members of WebContents to new TabContents'
    date: 2009-04-22
  - name: 'Google Chrome sends GET request for POST form bug reported (12718)'
    date: 2009-05-27
  - name: 'Commenter on 12718 thread realizes bug may be a result of a race condition'
    date: 2010-03-29
  - name: 'Decided on initial fix via eagerly assigning SiteInstance'
    date: 2010-04-07
  - name: 'Request for follow-up change made to check for navigation to non-DOM-UI URL'
    date: 2010-04-08
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Commit #9821e6e9f5259141e3e6c25c3b9493c78ae08e2c contained the main fix for the
      vulnerability, but team discussion (https://codereview.chromium.org/1549027) 
      prompted devs to add another defensive check that would crash the browser if 
      the vulnerability was taken advantage of again, helping them catch future bugs.
  least_privilege:
    applies: true
    note: |
      The fix for this vulnerability did not involve changing permissions to be less
      comprehensive, but it is worth noting that possible exploits could have taken
      advantage of the fact that the newly-rendered page erroneously had the same
      permissions as the new tab process.  If the new tab process has fewer permissions,
      exploitation may have been less of a concern.
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    At the VCC and between the VCC and fix, there appears to have been extensive refactoring
    with moving functionality to new directories.  This was done in batches of massive commits, which
    likely made it more challenging to identify issues and vulnerabilities in the files involved.  This
    could be classified as a mistake made in version control practices.
    
    As for the vulnerability itself, the fixes are simple and seem appropriate, and the developers
    had the foresight to practice defense in depth by adding an additional safety check after the initial
    fix was made.  Overall, the only fix that needed to be made was an additional check for DOMUIScheme; the
    vulnerability appears to have been a result of a simple coding mistake.  
    
    One could argue that a greater design mistake is implied by this vulnerability since it occurred
    due to a race condition.  The condition could potentially lead to further vulnerabilities in the future; however,
    the fix did not address this overall issue but rather the specifics of this vulnerability.
