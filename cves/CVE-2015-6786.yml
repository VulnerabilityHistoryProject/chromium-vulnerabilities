---
CVE: CVE-2015-6786
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 358
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-12-05 20:59:23.513000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The Content Security Policy (CSP) is used to prevent attacks such as
  cross-site scripting (XSS). It defines approved origins of content that
  can be loaded on the site. When a policy of 'script-src *' was used in Chromium,
  it allowed content to be loaded that was explictly banned by the standard.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-12-01 14:43:00.000000000 -05:00
  amount: 500.0
  references:
  - http://chromereleases.googleblog.com/2015/12/stable-channel-update.html
reviews:
- 1361763005
bugs:
- 534570
repo: https://chromium.googlesource.com/chromium/src.git/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 5d0e9f824e05523e03dabc0e341b9f8f17a72bb0
  :note: |
    Fix exludes wildcard matching of data:, blob:, and filesystem: URLs
    and adds tests.
vccs:
- commit: 4eafd90e8347ee91d0cbe0cffe856a9adf56df05
  note: Existed since introduction
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Unit tests already existed for this module but they did not cover this
    requirement. After adding the fix, they added unit tests to cover this
    requirement.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Michael Ficarra of Shape Security (mfica...@shapesecurity.com) discovered and reported
    this vulnerability. He provided the steps to reproduce and the section in the standard
    which the implementation violated.
  date: 2015-09-21
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The vulnerability was in WebCore which is part of WebKit and is used for page layouts.
    The Chromium team extends this functionality to suit their needs. This can be found by
    checking the source code package.
  name: WebCore
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 563fa049e6e5b8d7c45579726399dbd4b5542ab5
    note: |
      They added the ability to enforce a policy while monitoring another.
      Despite adding multi-policy support, they still did not correctly support some
      fine details in policies, such as content-blacklisting in the 'script-src *'
      policy which led to this vulnerability.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The code was moved multiple times and the support for the CSP standard was
    incrementally added over time. The code was still a work in progress at the
    time the bug was reported.
  events:
  - name: Revision 168064, separate some functionality into separate files
    date: 2014-02-27
  - name: Revision 159565, move files to a new package
    date: 2013-10-14
  - name: Revision 148532, move files to a new package
    date: 2013-04-17
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      They could have checks to both make sure the script src does not contain the
      banned file types and also check for nested scripts inside the src. Both
      would provide protection against this vulnerability.
  least_privilege:
    applies: true
    note: |
      The client should only have access to the files that it is allowed to load.
      The client should not have permission to access the banned file types.
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies:
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies:
    note:
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    The mistake made was not fully supporting the standard. Some of the standard
    was implemented but a special case for wildcard sources was left out. The team
    seemed to be actively working on adding support for the standard at the time of
    the report, so the fix may have come later on its own.
    The fix may be related to incomplete planning. When the bug was reported, the first
    comment was asking if someone else had already fixed it, assuming they were working
    on it. The other person responded that they never worked on it. This may indicate
    the work was not fully planned before implementation and they were informally
    assigning large parts of the standard to different people, leading to a missed
    detail in the implementation.