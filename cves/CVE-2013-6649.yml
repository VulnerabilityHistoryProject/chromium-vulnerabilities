---
CVE: CVE-2013-6649
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-01-28 09:30:33.777000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A use-after-free vulnerability in an SVG rendering function in the
  Blink engine in Chromium was found through unit testing.

  This vulnerability allows for remote attackers to possibly cause a denial of
  service (e.g., crashing the program) or other exploits by using vectors of an
  SVG image that is zero bytes in size.  If the Blink engine attempted to
  render this image into a buffer, unstable behavior or remote code execution
  could occur by referring to that address space (via a pointer).
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-01-27 13:22:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2014/01/stable-channel-update_27.html
reviews:
- 109753004
- 131973005
- 140783011
bugs:
- 330420
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 70bcb6b3396a395e871e10b2ff883d92b8218e9f
  :note: 'If the SVG image is of zero size, if condition does not execute rendering
    the image.

'
vccs:
- :commit: c4df847fabcf7e172dd0395708a9d93385050c8f
  :note: |
    A substantial chunk of code was added to buffered
    images before rendering.  The developer did not check the if statement above it to
    catch for edge cases like a zero-size image.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 13
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Automated unit tests were involved.  Specifically, an assertion failure was
    thrown for the stack size equalling one and the heap having a use-after-free
    error.  The VCC even had tests added to test the layout of the bufferd SVG
    that was rendered where the vulnerability occurred.

    The ASAN (Address Sanitizer) reported this bug, caught in the
    paint (rendering) function of the ScrollView module in WebCore.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    After testing a dev build on Ubuntu, Atte Kettunen of OUSPG (attek...@gmail.com)
    reported that the address sanitizer, responsible for detecting memory
    errors, caught a use-after-free error when testing an SVG of size zero.
  date: 2013-12-21
  automated: true
  google: true
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The mistake was in the Blink rendering engine subsystem.  Specifically, it
    can be found in the SVG image rendering WebCore module.  WebCore is actually
    a subsection of the third-party, open-source WebKit functionality for page layouts.
    The Chromium team extends this functionality to suit their needs.
  name: WebCore
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 9578df5948947db9a71a36639a1b0455bce0859b
    note: |
      Found it interesting that the SVG image size was passed to the container size,
      completely overlooking the vulnerability again.  This was done by the same person
      who arguably added the VCC too.
  - commit: c1f7fa1f27ccdc97177fcf2491b808947379c6fd
    note: |
      This appears to allow for bounding boxes to take care of mouse pointer events
      rather than have certain parts of an SVG image respond to those events.  could
      this have enabled malicious actors to cause a larger DoS if a large bounding box
      had its SVG images set to zero width?  This is also the commit before the fix.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    There was a lot of refactoring and removing of includes in this rendering file.
    While this may not have directly contributed to adding the new buffer code,
    perhaps the buffer check for a zero-size image was overlooked due to the different
    mindset of cleaning up and moving code.  Also, some devirtualization of objects
    occurred in this refactoring period from the summer of 2013 to about the time of
    the fix.
  events:
  - name: Revision 149280, absolutify paths to /svg.
    date: 2013-04-28
  - name: Revision 150643, removed over 100 extraneous include statements.
    date: 2013-05-20
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      While there are a few checks above the vulnerability that will stop
      rendering if it is disabled, the image is hidden, or if the image
      object in the code does not have an image, defensive coding has to be
      practice at all breadths and depths.  This means when the buffer was
      introduced to the code, the aforementioned checks should have been reviewed
      as well as adding the fix check, which does not put a zero-size image in the buffer.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      Input should not be trusted, such as zero-size images that could cause
      memory corruption vulnerabilities if not checked for and handled properly.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    There was definitely an overlooking of basic validation.  This can be
    attributed to the complex functions in the rendering code such as nested
    if statements which make it hard sometimes to accurately place validation
    conditions.  Checking for null/empty values is a must, especially in a
    low-level language like C/C++ which is what Chromium is written in.  These
    kinds of mistakes are commonly associated with use-after-free and buffer
    overflows due to memory mismanagement.  It is interesting to note tests
    were added, but none of them appear to directly check for zero-size images.

    The code was also reviewed on that VCC commit, so reviewing procedures should
    probably be revised, especially to review edge cases and validation in and
    around the changed code.
