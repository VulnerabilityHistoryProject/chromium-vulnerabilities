---
CVE: CVE-2016-1686
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-119
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-06-05 19:59:15.100000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A specific function in a PDF renderer which didn't properly handle a failure
  during its initialization causes a denial of service (out-of-bounds read) via
  a crafted PDF document that contained a malformed JPG image. An attacker who
  knows this exploit could potentiallycause the function to halt or crash,
  meaning the browser utilizing this  function may have issues resulting from
  this problem.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-05-25 15:45:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/05/stable-channel-update_25.html
reviews:
- 1897953002
- 1893573003
- 1893753002
- 1892143003
bugs:
- 603518
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 67b7f18b22c6f4476e97f4afae82a858b1ff97ca
  :note: ''
vccs:
- :commit:
  :note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    PDFium comes with many unit tests, such as pdfium_unittests and
    pdfium_embeddertests, run_corpus_tests.py, run_pixel_tests.py, and
    run_javascript_tests.py.

    The fix involved adjusting the unit tests once the bug was noticed, and
    testing once adjustments were made to ensure the fix was proper.
  code: true
  fix: true
  change: |

        [Original Code]
         if (m_nComponents != static_cast<uint32_t>(comps)) {
           FX_Free(m_pCompData);
           m_nComponents = static_cast<uint32_t>(comps);
           if (m_Family == PDFCS_LAB && m_nComponents != 3) {
            m_pCompData = nullptr;
             return 0;
           }
           m_pCompData = GetDecodeAndMaskArray(m_bDefaultDecode, m_bColorKey);
           if (!m_pCompData) {
             return 0;
           }
        [Fixed Code]
        if (m_nComponents != static_cast<uint32_t>(comps)) {
           FX_Free(m_pCompData);
           m_pCompData = nullptr;
           m_nComponents = static_cast<uint32_t>(comps);
          if (m_pColorSpace &&
              m_pColorSpace->CountComponents() != m_nComponents)
           return 0;
          if (m_Family == PDFCS_LAB && m_nComponents != 3)
             return 0;
           m_pCompData = GetDecodeAndMaskArray(m_bDefaultDecode, m_bColorKey);
          if (!m_pCompData)
             return 0;
         }
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Oliver Chang reported the issue to the Chromium code review page, and it was
    quickly picked up by the Chromium team and after going through a ClusterFuzz
    test, they determined the issue which caused the OOB read was a failed
    decoder initialization in the CreateDecoder function in the source code. The
    revision was made, and pushed a month later.
  date: 2016-04-15
  automated: true
  google: true
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: fpdf_render
  name: fpdf_render_loadimage.cpp
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit:
    note: "The only commit to occur was a small fix which changed a few lines in
    CreateDecoder() where they added a check for the m_pColorSpace by running
    it through CountComponents() to ensure that any out of bounds errors are
    caught beforehand. Other parts of the program were being touched on at the
    same time, such as Blink and their extension bindings, but they were not
    at all related to this issue."
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    I could not find any major events for this vulnerability. In the case of
    this vulnerability, there was a larger vulnerability in the same subsystem
    which was a heap overflow in PDFium which came with a bounty of $3000. I
    believe this high level issue drove for more investigation of the PDFium
    module and possibly led to the discovery of CVE-2016-1686
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      The lesson here is that all inputs should be considered, however, it may
      not be reasonable for one person working on a project to be aware of all
      the possible areas of vulnerability. This was a case of a programmer who
      wrote a PDF viewer and did not consider the fact that an image file could
      have been constructed in a way that could cause an out-of-bounds read,
      but once the issue was brought up, the fix was found fairly quickly.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    In my opinion, the mistakes were mostly coding mistakes, where ways of
    avoiding issues such as this were already known to the coding world, however
    the developer who originally wrote the functions here did not put them to
    use. Simply adding wrappers and distrusting input fixed the issue.

    Overall, this was a very interesting vulnerability which might not have been
    obvious to most engineers tasked to do this, and I think that this only goes
    to show that the scope of vulnerabilities will always be larger than what
    you initially expect. 
