CVE: CVE-2017-5093
nickname: Don't Blink on Fullscreen
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [20]
CVSS: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: '2017-07-25'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  UI spoofing in Blink, a browser engine used in the Google Chrome browser. This
  vulnerability makes it possible to display a popup dialog in front of the
  Fullscreen permission dialog, making it "impossible" to the user to know he/she
  entered fullscreen mode, enabling the attacker to subvert the true identity
  of the URL.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt: 3000
  announced: '2017-07-25'
  url: https://chromereleases.googleblog.com/2017/07/stable-channel-update-for-desktop.html
reviews: []
bugs:
- 550017
- 670135
- 726761
- 728276
repo: chromium/src
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 0720b02e4f303ea6b114d4ae9453e3a7ff55f8dc
  note: |
    Issue 2906133004 describes how the fix exits fullscreen for the current tab when a
    dialog is running. It was unable to be found through the command line, but was
    available on the Chromium site.
vccs:
- commit: 87de04b08fb5e31c49f1d5db78b3eddb5ece97b2
  note: |
    A lot of the work done on the browser was in this commit. There were many lines
    of code dealing with dialogs and Javascript, which also included testing. The code
    and tests overlooked the fact that dialog boxes and fullscreen mode are pretty
    powerful in browsers. This can easily be abused by attackers especially when their
    default actions change the browser view and limits access to other parts of the
    browser itself.

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 60
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There were automated unit tests involved in this vulnerability for the
    original code. The fix involved the addition of automated tests as well.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This was reported to the Chromium team by Luan Herrera and after doing some background
    checks, I found out that Luan Herrera is a self-proclaimed security bug bounty hunter.
  date: '2015-10-31'
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Chromium Browser
  name: browser, web_contents
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: Yes
  commits:
  - commit: 0720b02e4f303ea6b114d4ae9453e3a7ff55f8dc
    note: |
      It is interesting how even though the input is validated, they make sure to
      exit web-page initiated fullscreen when a dialog box runs.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I was unable to find any major events
  events:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The input was not validated properly which gives the remote attacker the
      opportunity to input malicious code. Not only should the input field from
      which the malicious code came from need to be validated, but other parts
      of the application should make sure the input is validated.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    In my opinion, there were coding and design mistakes due to overlooking a
    potential use of incorrectly validated inputs to manipulate modals and the
    fullscreen feature. The fix looks proper as it involved additional tests,
    deletion of previous code, additional checks for input validation, and the
    exiting of web-page initiated fullscreen when a dialog runs. It is interesting
    how even developers at top tech companies overlook validating input and serves
    as a prime example to always make sure to validate input, as it may violate
    the users' confidentality.
