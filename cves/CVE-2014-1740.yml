---
CVE: CVE-2014-1740
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-05-14 07:13:05.943000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability was an example of trying to use memory after it has been discarded.
  It could lead to a crash of Chrome thus giving a denial of service attack and potentially
  others issues. The exploit affected ninety-three versions of Chrome. After being
  discovered, Google's AddressSanitizer was able to find the issue and detect the leak.
  While this vulnerability was fixed, the tests were never added due to other code they
  depended on not ready to be merged in.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-05-13 12:00:00.000000000 -05:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2014/05/stable-channel-update.html
reviews:
- 235953018
- 221833002
- 257773004
- 264743015
- 255813002
bugs:
- 358038
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: b39c954297097454a3b867c45cdad8a1577c761c
  :note: This seems to be the original commit before reverting
- :commit: 4dc0eb2319ab5177f82d7d627610fbec098cf203
  :note: This seems to be the commit for a revert due to "fix uses methods which did not exist in M34"
- :commit: 0f3f1ff9be2a58fdf817566aa05067018e784e40
  :note: |
    This is the commit of the fix only without the tests to ensure the 
    vulnerability is fixed even if tests could not go through.
vccs:
- :commit: 6a2c3677f12c18bcc1b57c37becd4e1149f0c8e4
  :note: |
    This commit was for lines 426 to 431 and were last touched in 2010 
    when the handshake request was reset and socket data length was changed. 
    These lines remained untouched for almost 4 years.
- :commit: 817fc50713c37fb0cb41fbc455d83fb40b40da7e
  :note: |
    This was the creation of lines 307 to line 309 which mostly remained untouched
    until the vulnerability was fixed.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    It seems as though the original was unit tested but more unit tests were added
    after the vulnerability was found to ensure this would not happen again. An
    entire class was created to test this vulnerability. However, interestingly 
    enough, the tests never made it to the last commits on the bug thread. I was
    unable to find if they ever added the tests later.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability was discovered by someone who was outside the Chromium project, it would seem. 
    They provided information on how to replicate the bug in their detailed report. The report alluded this
    was not part of the automated tests and needed to be added. The bug thread stated that ClusterFuzz
    should not be used to test this vulnerability as it would not be able to replicate
    the test case properly and needed to be done manually.
  date: 2014-03-30
  automated: false
  google: false
  contest: false 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This vulnerability is located in the websockets part of the code directly
    related to tabs specifically in the Blink section of Chrome. Blink is
    Chromium's rendering software forked from Webkit.
  name: net/websockets
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 90499486eb26f12da3456f01bd28abc4a6191ea4
    note: |
      Line 308 was changed because of a separate bug with explicitly using get instead of 
      implicitly getting it. This is interesting because it seems to be the only 
      place this code was touched since it was created. This was also a year
      before this vulnerability was discovered.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    It seems like the team had some issues with getting the fix in and the tests
  events:
  - name: Lines were added to the file for handling cookies and handshakes
    date: 2010-03-01
  - name: Code was refactored to fix a separate bug
    date: 2013-06-01
  - name: Vulnerability was discovered by a Google User
    date: 2014-03-30
  - name: Vulnerability is considered fixed
    date: 2014-04-04
  - name: Merge Approved
    date: 2014-04-16
  - name: Code reverted due to some code not in production
    date: 2014-04-25
  - name: Code merged but tests not merged
    date: 2014-05-03
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This error was found because of the lack of testing. This test case itself 
    seemed to be a fairly obscure case that I can easily see the team missing.
    The evidence for this being an obscure edge case is further supported by the 
    code remaining unchanged for 4 years. The area was indeed unit 
    tested so it was not for lack of testing per say that this was not found. 
    A cursory internet search does not lead me to find the script the reporter used and 
    it is likely they created the script themselves or was looking for this specific case 
    and then made the script afterwards to confirm it.
