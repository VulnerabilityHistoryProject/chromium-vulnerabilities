---
CVE: CVE-2011-1817
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 119
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-05-07
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  There are two vulnerabilities in Google Chrome before 12.0.742.91 in the way they implement history deletion.

  The first vulnerability was because of the implementation not removing
  old event observers properly, which leads to observers looking for the event 
  that has already been deleted. Specifically, when a user try to clear browsing data,
  an event and its observer will be created to handle deleting browser data. However, 
  if the process is somehow discrupted (ex. user cancels clearing browsing data), 
  the event will delete itself, while its observer does not. When the browser is reloaded, 
  the stale observer will try to listen to a non-existing event, which then will make the 
  browser crashes.

  The second vulnerability was not stated to directly cause the bug, but was a bad
  coding implementation. The removing browser data event calls some methods on a wrong thread,
  which certainly could make the browser stall or crashed. 

  The way that this could be exploited would be an attacker somehow disrupts the history deleting
  process while it is ocurring. Then users will intuitively reload the page to restart the process,
  and the browser will crash.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2011-05-07
  amount: 500.0
  references:
  - http://chromereleases.googleblog.com/2011/06/chrome-stable-release.html
reviews:
- 7050031
- 7046013
- 7064003
bugs:
- 81916
repo: https://chromium.googlesource.com/chromium/chromium/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 2a7221968d4ccfb1caf34487fd002fe64560bdd1
  note: Stop observing an existing BrowserDataRemover before creating a new one.
- commit: 73fb95700def0d35ac034a50c8039635f103377f
  note: Use the DatabaseTracker only on the FILE thread. However, it was not clear if this fix relates to the main problem
vccs:
- commit: db108ddfbd5a856ed095cbef788c8c4f4628e607
  note: They were working on a fix issue 49037 at the time, which is when they added starter code for 'Clear Browser Data' and 'Font Settings' overlay dialogs
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From looking at the fix code, the code was not tested by automated unit tests.
    For the first vulnerability, they just followed the setup in the bug report and 
    verify that crash no longer occurs.
    For the second vulnerability, they did not test their fixes
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Found while using "Clear all browsing data" option Chrome browser. The person tried
    to list of the steps that leads to the problem, and different scenarios that could 
    cause the browser to crash. Some people was able to reproduce it, while some could
    not and they thought that it could be because of different operation system.
  date: 2011-05-07
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on the bug report and the class name in the code
  name: chromium-browser
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: 2b4f812537173e2ab27a9f9b94de3b4da4a5d22e
    note: |
      They worked on adding a completely new feature that allows managing / deleting 
      Adobe Flash Player local storage in the Clear Browsing Data dialog. This is a
      pretty crucial and helpful feature
  - commit: 5c557f37629dc12dfd99e8fb55c235c8c46a8098
    note: |
      They worked on changing location of their subsystem DOMUI so that it reflects 
      correctly in the API path. All of the files related to DOMUI will be moved into 
      a correct APT directory, then all of the core of the subsystem WEBUI will be
      put into the 'webui' directory, and all other ui-related files will be put under
      'ui' directory. This is crucial to make the API path more reasonable and valid
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    During the fix, they also found out that there are some methods that were called 
    on a wrong thread, which certainly could make the browser stall or crash.
    They added the fix for it.
  events:
  - name: Revision 86030 - Use the DatabaseTracker only on the FILE thread.
    date: 2011-05-20
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The vulnerability was because the developer did not think about the case when
      the process is discrupted. By adding another round of testing or other method
      of testing (unit testing, automated testing), we can potentially detect this
      vulnerability sooner
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    It was a coding mistake where the developer deleted the event without thinking
    about its living observers. 
    
    Althought the fix was simple, finding this bug in the first place was not easy. 
    Noone thought about the situation where the deleting user's browsing data process
    is interupted. 
