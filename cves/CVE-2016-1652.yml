---
CVE: CVE-2016-1652
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-692
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-04-18 06:59:01.093000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Cross-site scripting (XSS) vulnerability in the ModuleSystem::RequireForJsInner
  function in extensions/renderer/module_system.cc in the Extensions subsystem
  in Google Chrome before 50.0.2661.75. This allows remote attackers to inject
  arbitrary web script or HTML via a crafted web site, aka "Universal XSS (UXSS)."
  Should an attacker inject their own scripts, they will be able to spread malicious
  code to various end user's. The attacker could compromise a user's browser data
  and even alter the content of an HTML page.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-04-13 14:48:00.000000000 -04:00
  amount: 7500.0
  references:
  - http://chromereleases.googleblog.com/2016/04/stable-channel-update_13.html
reviews:
- 1748943002
- 1787433002
bugs:
- 590275
- 590118
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 75b803b1c81ed9fa5513cbff550232b4fb915e7b
  :note: |
    Hardens against the interception of bindings.
vccs:
- :commit: 53348222214fa3b5cf008f70566d1b3bc7d94d64
  :note: |
    After the v8::Context for a service worker is passed up, a script is
    injected in order for the service worker to have access to the background
    page of the extension.
- :commit: ec0e3aa3ac1cacc1fdcc74d2bec7a3f8dea6ac72
  :note: |
    Suppress all CHECK failures on extension renderer JS exceptions.
    These will be added back once the cause of the crashes is fixed.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Upon viewing the diff of the fix and the previous commit, there did not seem
    to be any unit tests in place. The fix simply utilized a different method
    that dealt with private properties instead of public ones.
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Bugs: 590275 - (permission denied when attempting to access this report)

          590118 - Fix for issue 546677 still did not protect against overriding
          internal extension code, leaving vulnerability to XSS. It is noted that
          web content can gain access to native functions which may be misused.
          (Reported by: marius.mlynski@gmail.com)

          EXAMPLE: |user_gestures.RunWithUserGesture| can be leveraged to create
          new pages at an arbitrary javascript execution point, effectively
          bypassing ScopedPageLoadDeferrer.
  date: 2016-02-26
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    extensions/renderer - this subsystem deals with widget display upon update
  name: |
    Extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    See below.
  commits:
  - commit: 415b73b1a400a994a86e6f29709aa0271e895dd5
    note: |
      Updates callsites from JS to CHECK expected arguments, rather
      than DCHECK (since receiving unexpected arguments likely means
      executing untrusted code). Makes an effort to prevent untrusted input from
      being used.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    This CVE was discovered via a fix for Bug 546677. Unfortunately, permission
    for the bug report was denied at the time of research, so more info on this
    was unavailable.
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: true
    note: |
      This is violated as a user can gain access to information and resources
      for illegitimate purposes.
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: false
    note:
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: true
    note: |
      The fix updated the getters and setters to private variables instead of
      public, which were recognized as the most secure initial settings to
      prevent XSS.
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The mistake leading to this vulnerability, was simply rooted within a
    privacy issue regarding getters and setters. These were modified to deal
    with private properties instead of regular properties. These was done to
    make interception harder from the outside. By privatizing properties, they
    become less accessible to attackers, helping to eliminate the acquistion of
    data that should not be publicly transmitted. The mistake was truly a simple
    coding mistake that was corrected in conjunction with additional files as support.
    It was fixed within a matter of days, which attests to the fact that not much
    needed to change to mitigate the vulnerability.
