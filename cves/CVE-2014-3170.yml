---
CVE: CVE-2014-3170
CWE: 158
announced: 2014-08-26 21:55:05.523000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  By inserting a NUL byte in a host permission, extension authors can hide all 
  host permission requests, giving users a false sense of security when they install an extension. With this, a user
  could go to the page that the extension was originally from, and scripts would be executed without the user even being prompted
  to allow anything. The NUL byte is generally added in the hosts of the host permission.
  
bounty:
  date: 2014-08-26 10:00:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2014/08/stable-channel-update_26.html
reviews:
- 441643009
- 416263002
bugs:
- 390624
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 80d5aa4a1de9107d1442480b8ea9ba06feff2be2
  :note: ''
vccs: 
  :commit:  b83f96aa076d257696b560466dd27cf5632054a2
  :note: ''
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: There were unittests for the code before and after the fix
  code: True
  fix: True
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The bug seems to be founded by a Linux user not from the dev team. The user then proceeded to recreate
    the bug (with step by step intructions) for the dev teams use. Pictures of input and expected output
    were also given to the dev team in the report made.
  date: 2014-07-01
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This bug was located in the extensions subsystem
  name: extensions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: [838b943ae327185223b15337b62b3c5f41a70354]
    note: |
        A bug promted this commit to be made and fixed, which would allow URLPatterns to have ports. Felt this was worth noting
        mainly because a bug was what got the developers realizing that there were checks missing in the original code. Also, another set of 
        eyes looked at these lines of code and somehow the developers didn't realize that how many other checks they might have been missing.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: True
    note: |
      A malicious user was able to add a NULL byte in host permissions, 
      and the system wasn't able to detect this so authentication were being bypassed
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
     This overall was an overlooked coding mistake. To check against any of the extensions, Chrominium used a parser that would take
     the input recieved and check against possible malicious forms of input. Many different things were checked such as empty ports, empty
     strings, and even certain types of characters. Chrominium even made sure that there were tests to make sure that each character (or lack thereof) did
     not pass through the parser. One of the items that wasn't checked against was the NUL byte character. The fix was really simple, just make 
     sure that NUL byte characters aren't allowed. There were even a few tests to make sure that it wouldn't be parsed. But the question remains as to how 
     this was able to go unnoticed for such a long time. Looking through some of the commits between the original code and the fix, maybe there was always 
     an assumption that someone would eventually get to it. Looking at the code there were two other developers after the original who had went back and
     added more check to the parser, so it seems that either a bug was needed to have been found or the assumption was just there.
    
