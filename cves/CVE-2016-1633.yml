---
CVE: CVE-2016-1633
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-416:Use After Free
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-03-05 21:59:04.463000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 
  This is a typical use-after-free.
  A pointer is pointing to a location in the heap. That location is then
  free'd with a call to free() or delete() and then that memory location
  can no longer be considered valid. Any pointer that attempts to read this
  memory address back MAY get a correct response, but the memory allocator 
  is free to put whatever it wants back in this location. This is usually
  not possible in other programming languages, specifically those that use
  Garbage collection.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-03-02 15:41:00.000000000 -05:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/03/stable-channel-update.html
reviews:
- 1577213003
bugs:
- 572537
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: eb750a539e4856ba9042abdf39ae9da58fa3ae63
  :note: ''
vccs:
- :commit: 1717cf4bfefc8504ff6971d2e8fab1e14ea462bb 
  :note: 'according to the bug bot, this is the first commit where the regression occurs'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: The webkit portion of Chromium has several tests that relate
    to the NodeIterator. However, none of them were able to catch this particular bug. 
    
    The commit that addresses the CVE also adds a test. 
    The test can be found in third_party/WebKit/LayoutTests/fast/dom/NodeIterator/NodeIterator-attr.html

    The test that was added tries to migrate an element to different document.
    The newly added test will cause the program to crash unless pointers are
    correctly managed when migrating elements.
  code: yes
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: 
    This vulnerability was discovered because of the a user called nils.som...@gmail.com
  date: 2015-12-27
  automated: no
  google:  false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: "Dom"
  name: "NodeIterator.cpp"
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: 2729e442b1172c5094503a03fe356c8580bb919d 
    note: Chrome switches to standard integer types
  - commit: 00d16fe97dda7c0619c07aa09a3bbc2df2758138	 
    note: Use lambda expr to define CSSSelectorList::selectors* methods. The reason
      I don't have other commits to comment on is that the bot that is supposed to spot the regression
      didn't have a specific commit. It looked like the bot was just choosing a nearby range of possible commits.
      Judging from the chat the developers were having about this bug, it seems like it was a longstanding mistake
      in the NodeIterator.cpp logic.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The team was porting large portions of the browser to use standard integers.
    It's not related to the bug in any way, but the commit history reflects a lot of their effort.
    They were also switching from using primarily WebKit to their new Blink engine. But none of it
    seems related to the NodeIterator bug that caused this CVE
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth: 
    applies: false
    note:  We can deploy automated technical testing to avoid stale pointers
      like these in the future. Those are considered Technical controls.
  least_privilege: 
    applies: false
    note: 
  frameworks_are_optional: 
    applies: false
    note: 
  native_wrappers: 
    applies: false
    note: 
  distrust_input: 
    applies: false
    note: 
  security_by_obscurity: 
    applies: false
    note: 
  serial_killer: 
    applies: false
    note: 
  environment_variables: 
    applies: false
    note: 
  secure_by_default: 
    applies: false
    note: 
  yagni: 
    applies: false
    note: 
  complex_inputs: 
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    When looking at what was changed in order to fix the CVE, there are just two
    lines that are deleted and then checks performed to do the same actions that were 
    performed in the line before.

    It happens often, but if the mistake is actually as simple as these commits make it out to be
    then it's a case of checking a pointer's datatype, and verifying that the pointer is valid before
    performing an action that relies on that pointer's integrity.

    In this project's C/C++ guidelines, there should be reference to bounds checking and pointer
    checking before any pointer operations are performed. Tests can be written to make sure that
    pointers have their data checked before being operations that could result in errors are performed.
    Stricter code review by team members should also be able to catch potential problems like this 
    in the future. 