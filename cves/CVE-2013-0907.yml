---
CVE: CVE-2013-0907
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 362
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-03-05 16:55:11.450000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability involves a race condition that occurs before Google Chrome versions 25.0.1364.152.
  The vulnerability allows for attackers to remotely cause a denial of service to the system and other 
  possible threats relating to threads/asynchronous threading. The race condition involves the
  VideoRendererBase object being "destroyed" in the main thread function. The interleaving of VideoRendererBase::Stop() with 
  outstanding asynchronous calls to a VideoDecoder would result in continuing to execute code (i.e., 
  starting up a thread without intending to) on a stopped VideoRendererBase. The most common manifestation of 
  the bug was crashing in ThreadMain() because the VideoRendererBase was being destroyed. 
  
  A type of attack could happen because of the race condition allows for a temporary 
  access of shared resources where the shared resource can be modified by another code sequence 
  that is operating concurrently. This could allow an attacker to simiply modify the resource and/or 
  modify things on the page and create pop ups for the user to click and share private information,
  or cause a denial of services and could crash a chrome tab that involves a video on the page. 
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2013-02-22
  amount: 0
  references: 
    - https://chromereleases.googleblog.com/2013/03/stable-channel-update_4.html
reviews:
- 12324005
- 12342020
- 12335105
- 12179023
bugs:
- 174150
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: c52a72ba0661b137597a0527182965556bbd9f84
  :note: |
    Fix crash in VideoRendererBase::ThreadMain().
    The interleaving of VideoRendererBase::Stop() with outstanding asynchronous 
    calls to a VideoDecoder would result in continuing to execute code (e.g., 
    starting up a thread) on a stopped VideoRendererBase. The most common manifestation 
    of the bug was crashing in ThreadMain() as VideoRendererBase was being destroyed. Note->
    that the commit id is incorrect, I cannot find the commit id but through this website
    https://bugs.chromium.org/p/chromium/issues/detail?id=174150&fbclid=IwAR10em7gW2aE9_APJLQhZbmKKU_e0YH2Oau0JpXM7_-XiEqPS8-WZou3qog
    I was able to find that there was a solution that was merged in.

vccs:
- :commit: revision number 173706 https://src.chromium.org/viewvc/chrome/branches/1364/src/media/filters/video_renderer_base_unittest.cc?annotate=173706&pathrev=184729#l124
  :note: |
    scherkus@chromium.org https://src.chromium.org/viewvc/chrome/branches/1364/src/media/filters/video_renderer_base_unittest.cc?annotate=173706&pathrev=184729
    event.GetPipelineStatusCB() was what it was originally and status_cb is what it was changed to.
    The need to get the pipeline status was unecessary and contributed the asychronous calls. Also the 
    cause for the asynchronous calls was just beacuse the threads weren't waiting properly.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Yes. Unit tests were added once the vulnerability was fixed. Unit tests were added to 
    https://src.chromium.org/viewvc/chrome/trunk/src/media/filters/video_renderer_base_unittest.cc?r1=184048&r2=184047&pathrev=184048
    and to this file https://src.chromium.org/viewvc/chrome/branches/1364/src/media/filters/video_renderer_base.cc?r1=184729&r2=184728&pathrev=184729
    These tests were used to check whether the threads called onto VideoRendererBase were failing or not.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Vulnerability was discovered by scherkus@chromium.org who mentioned "Maybe because 
    VideoRendererBase only has a PlatformThreadId and not an actual Thread object 
    we're not stopping the thread and doing a use-after-free on the condition variable!?"
    The threading was a bit off so it lead to crashes (EXCEPTION_ACCESS_VIOLATION_WRITE) which was utimately
    how it was discovered. 
  date: 2013-02-4
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: src/media/filters/video_renderer_base.cc, media/filters/video_renderer_base_unittest.cc
  name: media/filters
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits: 
  - commit: c52a72ba0661b137597a0527182965556bbd9f84
    note: This commit was used to track down the threading issue. It was a commit to "Sprinkle some CHECK()s in media::VideoRendererBase to help track down a crash."
  - commit: 659f8af492e26fc0d3b897660188555ca31f652f
    note: This commit added the vpn back to NetworkLibrary::active_network(). This reverts part of a previous revision -> rev/163676. And the point of this was to adapt the non-vpn-network menu entry to not show VPN.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: scherkus@chromium.org used some checks to help detect where the threading issues in VideoRendererBase were actually being caused. This person found this issue due to discovering some crashes within the application.  
    date: 2013-02-04
  - name: scherkus@chromium.org notes that the checks found some crashes.
    date: 2013-02-19
  - name: scherkus@chromium.org notes that the "issue is due to state_ remaining in kUninitialized during the call to Stop() and then OnDecoderSelected() coming along, setting the state_ to kFlushed and starting the thread despite Stop() having completed"
    date: 2013-02-20
  - name: scherkus@chromium.org changes are merged into what I am assuming the master branch. The pr is approved and the change goes into affect.
    date: 2013-02-26
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: true
    note: |
      This could go hand and hand with the distrust input. Each module only listens to what is needs
      so to prevent an attacker to remotely DoS, we would need each module to have the principle
      of least privilege so it will only need to take in what it absolutely needs. This means that 
      when the threading issue occurs we will not let other part of the system to modify shared resources.
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: true
    note: |
      This vulnerability applies because the attacker can remotely cause a denial of service this applies to the distrust input.
      This means that we would need to distrust all incoming input that is not recognized by the system to prevent a possible denial of service.
      This distrust of input would have to happen when the threading process allows for resources to be shared and modified. We would need to 
      prevent shared resources to be modified from other parts of the system and only allow the system that handles video rendering to have say for those
      resources.
  security_by_obscurity: 
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main mistake made that led to this vulnerability was not using proper
    threading practices and it caused some threads to run over each other. There wasn't 
    much unit testing for threading and it was later detected by the crash. 
    In the future it would be recommended for maintainability 
    factors to include more unit testing on such topics like threading that are very precise and can 
    happne very easily. Overall seems like a oversight with threading was their main issue.
