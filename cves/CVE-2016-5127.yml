---
CVE: CVE-2016-5127
CWE: 416
announced: 2016-07-23 15:59:09.157000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Remote attackers can cause denial of service and possible other issues by
  utilizing an @import at-rule with CSS's token sequence and a rel=import
  atribute of a link element. This vulnerability is found in Javascript code.
bounty:
  date: 2016-07-20 14:48:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/07/stable-channel-update.html
reviews:
- 2149913003
- 2082893005
- 2091633002
- 2151143002
- 2084913005
bugs:
- 618237
- 622566
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: e9c943f368d15bbfe414aedf5e001792257f3eeb
  :note: ''
- :commit: c1b06954220f96a85ce764396cf5cc5e24a9fba4
  :note:
- :commit: f60b4eb00abc12a1fa2575890f7c77b373a1bedc
  :note: ''
- :commit: fb81c66590538c2487a34b8623066a22d0b27dff
  :note: ''
vccs:
- :commit: fb81c66590538c2487a34b8623066a22d0b27dff
  :note: They were working on a fix for something else at the time.
- :commit: 2217e8c563575ead5c9450408529340ec93ccef7
  :note: They were working on a fix for something else at the time.
- :commit: 33a3a50a0d70c0e701a93c4875d50cd36c5b759f
  :note: They were working on a fix for something else at the time.
- :commit: 16d4aaf9a5794ff0e10c57bf7b7bbfadee3ba26a
  :note: They were working on a fix for something else at the time.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    I am unsure if the initial code was tested but I am almost certain the
    vulnerability was found by an automated test and I am also sure that
    the fix was tested.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Upon reviewing the commits and this CVE online, the evidence found caused me
    to believe it was found using automated testing. However, I don't want to
    say I am 100% certain because this may not be the case.
  date: 6/22/16
  automated: true
  google: true
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on directory and path of the problem code.
  name: extentions
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 681eea95566832930b06d21f8b20200f3f04d361
    note: |
      Referenced not working CSS property in the description. Could have played
      into CSS issues at this stage.
  - commit: f791fc5aab4fd9a3c984591c366edc9f1a0145a1
    note: |
      This version updated v8 to its newest version. It seemed like an area
      where bugs could start to arise, especially since there were even special
      instructions for tracking issues in the commit message.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    Upon reviewing it did not appear to me that there were any Major Events in
    this CVE.
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies: true
    note: |
      This evidently applies, due to the issues with the vulnerability caused
      by the CSS and HTML bug abusers were given priveleges they should not
      have had, which includes the ability to cause a denial of service.
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies: true
    note: |
      Although this was not planned to be just a hidden issue, the general nature
      of the problem was taken so lightly because it was something that would be
      very hard for a user to find and exploit. The general vulnerability was
      secure because it was not the easiest thing to find.
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I would absolutely say that maintainability and design were the primary
    issues involving the problems with this CVE. While investigating, I found
    that some of the commits made to fix the code actually caused errors and
    were the VCC's for more problems down the line. Poor maintainability and
    lack of design to scale, both in initial design and in how bug fixes would
    be used caused the problems with this CVE.

    I would say that the way the bug was initally introduced was due to design.
    This was an issue that arose because the system was not designed in a way
    that prevented this error from happening, and it was avoidable.

    However, the reason problems kept arising was due to poor maintainability
    as the bugs kept coming up because the bugs were not being patched in an
    effective or maintainable manner.
