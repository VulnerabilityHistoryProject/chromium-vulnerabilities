---
CVE: CVE-2015-1216
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-03-08
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An implementation for custom bindings related to windows in Google's V8 
  JavaScript engine left a potential vulnerability where an attacker could trigger
  a denial of service attack or cause other issues due to an entity not being freed
  properly.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-03-03
  amount: 4000.0
  references:
  - http://chromereleases.googleblog.com/2015/03/stable-channel-update.html
reviews:
- 901053006
- 945813003
bugs:
- 454954
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 82eeef54780833a29e88c5677a7cfa11205a9878
  note: Adds null check to mitigate issue.
vccs:
- commit: 5bf544f6050b79ba347f08125f07d7bf0268e11d
  note: |
    Initial file implementation. Contains call that could result
    in a use after free exploit. The call is supposed to grab a
    property from the window, but it was possible for the window
    frame to be detached by malicious users which would allow them
    to potentially cause a DoS attack by crashing the system. The VCC
    and fix were both made by separate members of the Chromium team.

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 9
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From what I could tell, it looks like the bindings code is not fully
    unit tested. The code that was added to fix the bug just added an extra
    statement to check for a detached frame.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The bug report blocked access for me, but I was able to find other info
    from the CVE page and related pages. It looks like the NSFOCUS Security Team
    found this vulnerability.
  date: 2015-01-21
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Based on the description in the CVE and surrounding codebase, the mistake
    is located in the V8 engine subsystem.
  name: V8
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: d7e92a5c92713040815fe7da1697e098d68f5384
    note: |
      The call was updated, however the use-after-free vulnerability still existed
      and was unhandled. The call mostly just got restructured into a different
      format, with minimal functionality changes.
  - commit: ae517dedb3dbdf9d78475dcc4282c73b74077a07
    note: |
      Modified return statement, but still didn't handle use-after-free. The
      theme would seem to be that a lot of vulnerabilities can go completely
      unnoticed, even when developers are looking right at them. Most of the other
      commits were somewhat unrelated to this bug, but instead just refactored a
      lot of code around it.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    I didn't see any major events, just minor functionality changes and a lot
    of refactoring.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: true
    note: |
      The fix to the issue of the detached window vulnerability involved just
      checking the frame to see if it's null, and returning out of the function
      if that's the case. In essense, if the frame isn't even there anymore, the
      function itself isn't needed anymore and should be stopped. Applying this
      principle more liberally can help prevent more vulnerabilities like this
      from happening.
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The CWE only gives a few brief mitigations for use-after-free. One is to use
    a language with automatic memory management, and the other is making sure to
    set pointers to null after freeing them. The entire V8 module of Chromium is
    built mainly with C++, and it would be incredibly difficult to move everything
    over to a different language, not to mention the fact that it would probably
    create some noticeable inefficiencies.

    This vulnerability is a bit different than a conventional use-after-free,
    seeing as the exploitable entity in is actually set to null, but can then be
    modified by code later in the function. The main mistake seems to be in the
    original implementation, when the programmer did not put a check for this null
    value that would have prevented it from leaking into code later on.

    Use-after-free is one of the harder vulnerabilities to catch, because it is often
    overlooked by unit tests and can show up in places you wouldn't expect. This case
    of use-after-free is unconventional and was not as clear as more textbook examples.
    Luckily, the fix was fairly simple and properly mitigated the vulnerability.
