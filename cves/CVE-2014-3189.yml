---
CVE: CVE-2014-3189
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-125
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-10-08 06:55:06.300000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An out of bounds read occurs when data is read past its intended boundries. In the
  case of this particular vulnerability, a function responsible for copying an image to
  known destination was able to preform an out of bounds read. This was allowed by
  not checking that the size of the image you want to copy makes sense. This is done by
  checking for negative x,y values and also making sure that size wise, it could be contained within
  the data being passed in as the source data. Not having these checks 
  in place allows either a buffer overflow to occur by reading and trying to store 
  a mass amount of unintended data, as well as has the possibiliy of producing
  segmentation faults by reading outside the program's assigned memory which could lead to a denial of service.
  Most importantly, this vulnerability could be leveraged to allow leaks of sensitive information. Since
  you are able to read outside intended boundaries, one could read around to try and find sensitive data contained
  within a particular processes assigned memory region.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty: 
  date: 2014-10-07 16:12:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2014/10/stable-channel-update.html
reviews:
- 602173003
- 519873002
bugs:
- 398384
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: d734d197bb5462a65c37b17594a8c8d07dd79bc1
  :note: |
    Author tsepez <tsepez@chromium.org>
    Date   Wed Sep 3 16:17:49 2014 -0700

      Avoid OOB memcpy in chrome_pdf::CopyImage.
      
      This is a re-work of palmer's patch at https://codereview.chromium.org/515023002/ which has more context, but comes down to stricter bounds checking.
      
      We also correct an arithmetic bug when copying the image behind a control that is positioned before the origin of the image.
      
      BUG=398384
      
      Review URL https://codereview.chromium.org/519873002
      
      Cr-Commit-Position refs/heads/master@{#293213}
vccs: 
- :commit: 1b1e9effe9fa3b66dd1bcfff4b78455460f66c61
  :note: |
    Author jam@chromium.org <jam@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98> 
    Date   Tue May 20 01:56:40 2014 +0000

      Add the pdf plugin's source in src\pdf.
      
      I've updated gypi files to not use internal_pdf variable anymore, which was brought in from pdf repo's supplemental.gypi.
      
      R=thestig@chromium.org
      TBR=darin
      
      Review URL https://codereview.chromium.org/294793003
      
      git-svn-id svn://svn.chromium.org/chrome/trunk/src@271531 0039d316-1c4b-4281-b951-d872f2087c98
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: There appears to be a replication test case provided in the bug report but no automated unit testing seems to be at play here.
  code: false
  fix: false 
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This bug was discovered by a test case provided by a user who goes by the alias cloudfuzzer. It was able to get a chrome tab to crash
    by rendering a pdf file into an HTML element with specific x,y values set. This user was also credited with other similar bugs relating to 
    an out of bounds read (CVE-2014-7944, CVE-2014-7945). It is also interesting to note that these two additional CVEs were involving PDFium.
    A bounty was paid to cloudfuzzer. It is not clear exactly how cloudfuzzer found this vulnerability, although it looks like a fuzzer tool 
    was at play.
  date: 2014-07-29
  automated: false
  google: false
  contest: ''
subsystem: 
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Internals-Plugins-PDF
  name: pdf
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    Two commits that are sit between the fix commit and the VCC are interesting because they
    all share fixes to bugs; the VCC in the case being when the plugin sourcre was introduced
    to chromium. The point here being that it appears as though this code was introduced 
    before being tested or with very little testing done.
  commits:
  - commit: 09555f6952ea240c33452dd0ee1575bc26f73195
    note: |
      Author sadrul@chromium.org <sadrul@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>
      Date   Wed Aug 20 02:44:41 2014 +0000

        pdf Early out from CopyImage if there's nothing to copy.
        
        If CopyImage is called with src is an empty rectangle (this can happen for
        example if one of the resources is not available), then the code ends up trying
        to read from null/uninitialized memory. So early out instead in such cases.
        
        BUG=401242
        R=thestig@chromium.org
        
        Review URL https://codereview.chromium.org/465133005
        
        Cr-Commit-Position refs/heads/master@{#290736}
        git-svn-id svn://svn.chromium.org/chrome/trunk/src@290736 0039d316-1c4b-4281-b951-d872f2087c98
  - commit: 899bbef82cc9477e59870bcfcb2e4c6418d17d2a
    note: |
      Author palmer@chromium.org <palmer@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>
      Date   Wed Jul 16 20:15:51 2014 +0000

        Fix potential integer overflow when initializing Rect.
        
        BUG=350782
        
        Review URL https://codereview.chromium.org/385173004
        
        git-svn-id svn://svn.chromium.org/chrome/trunk/src@283481 0039d316-1c4b-4281-b951-d872f2087c98
major_events: 
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The implementor of the vulnerable function should have have written it
      with the mindset that other security controls in place are vulnerable. If they
      had this mindset it might have lead to more checking on the passed parameters
      to the function to make sure they made sense.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistake that led to this vulnerability was not sufficiently testing the 
    pdf plugin source before introducing it into the chromium codebase. In terms
    of the plugin itself one could also say that this has the design mistake of 
    not implementing proper boundry checking of incoming parameters.
