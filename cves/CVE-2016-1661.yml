---
CVE: CVE-2016-1661
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 1021
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-05-14 17:59:01.240000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Blink, a web framework previously used in Chrome did not ensure
  content in frames passed a check for the same render process along with a Same
  Origin Policy check, meaning the objects' source were the same. The Same Origin
  Policy is defined as a combination of the URL scheme, the host name, and port
  number for the same origin. This allowed attackers to cause a denial of service attack
  or other impacts using a fake website and frame content.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-04-28 16:00:00.000000000 -04:00
  amount: 3000.0
  references:
  - http://chromereleases.googleblog.com/2016/04/stable-channel-update_28.html
reviews:
- 1887553002
- 1907603002
- 1898303002
bugs:
- 601629
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: f23b8e77a83a5aafabf64acf723cf2ac02c5cf0e
  :note: |
    For the fix, the authors added a check to see if the windows containing
    the target frames were local DOM windows
vccs:
- :commit: 0953340d4ee9e603d01ade0a0902c634c2771b55
  :note:
- :commit: 464f41055aeb070a55ec30682f8768bd8e88b4e6
  :note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    It appears that there was units tests associated with the module this vulnerability
    was found in, but no unit tests that attempted to exploit it until the vulnerability
    fixing commit was created, at which point a new test for the vulnerability was added.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    It appears that an external user, Wadih Matar, found the issue, which was then brought to the
    attention of admins and a reproduction case was provided by the user who found it.
  date: 2016-04-07
  automated: false
  google: false
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: based on the description in the CWE and file path directories.
  name: v8
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 71331253d6537b9409518dec2368388c5d73cb94
    note: |
      This was noted as being one of the larger patches and uses a hard to
      understand git command which is piped into other commands with regex's
      to execute the patch.
  - commit: edd4854bfd651e73ebf774c022da6473430e5888
    note: |
      This was another larger commit that included logic fixes for
      RemoteDOMWindows and throwing exceptions when
      shouldAllowAccessToFrame encountered a remote frame, previous
      implementation only returned false which was breaking tests.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There appears to be some major movement of files, followed by refactoring, along with prototyping in the middle of implementation.
  events:
  - name: prototyping of Per-page Suborigins, experimental Blink branch. Same Origin Policy check
    date: 2014-01-22
  - name: seperation of blink modules and bink_core dlls, required massive refactoring due to circular dependencies.
    date: 2014-03-31
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Defese in depth can apply since the vulnerability was about a frame's crafted
      input being able to pass a Same Origin Check Policy while having a different
      render process, something that was not originally checked by the system.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The vulnerability was about the Blink subsystem not checking to make
      sure the frames rendering processes were the same, allowing attackers to
      use a crafted website to exploit the system while bypassing the Same Origin
      Policy check.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistakes that led to this vulnerability were mainly design mistakes.
    The authors of the code assumed frames that passed the SecurityOrigins
    canAccess method had to be local frames. This does not hold true for
    frames that occur as a result of renderer initiated navigation, since
    each frame has the same origin but see the other frame as a remote frame.
    This allowed content in frames to have external rendering processes which
    did not have to pass the same level of security checks.
    It appears the fix attempts to implement the third potential midigation of
    checking the frame's ancestors to ensure it is a local frame.

    The fix looks pretty good for a problem that not many people know about.
