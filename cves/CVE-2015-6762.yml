---
CVE: CVE-2015-6762
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-346
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2015-10-15 06:59:08.623000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  When attempting to fetch a font from a remote resource, Chromium would utilize
  a mechanism known as cross-origin resource sharing ( CORS ).

  CORS was created as a way to securely allow cross-domain requests.  For example,
  if your domain is https://example.com and you link an image from a photo-hosting
  site, to fetch and download that image in a secure way.

  However, when there was a same-origin request ( the hostname of the origin and
  of the request are the same ), CORS would not be applied which allowed the font
  url to be bypassed from another remote server if the same-origin forwarded the
  request.

  This exploit allowed things such as forwarding to another server to grab a font
  and apply it to the document object model ( DOM - The tree-representation of a
  website ), while the requesting application never was aware of the cross-domain
  request.

  The fix for this was to simply apply CORS to all requests, even if they appeared
  to be same-origin requests.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2015-10-13 13:48:00.000000000 -04:00
  amount: 500.0
  references:
  - http://chromereleases.googleblog.com/2015/10/stable-channel-update.html
reviews:
- 1256403002
- 1281843002
- 1250793008
bugs:
- 512678
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 212b92858f0ae007c90abd10b40ba805a13af43c
  :note: ''
vccs:
- :commit: 8add030475be094a47b0ec2abf7bfcf34bb8079f
  :note: There was never an introduction of the vulnerability as they never used CORS on same-origin requests, so the commit points to when the function was first added to the file ( fetch function )
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: The original code was unit-tested, however this specific case was not tested therefore to prove the exploit was patched, it required adding a bit to existing tests.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: Discovered by Muneaki Nishimura (nishimunea).  No documentation on exactly how it was found, just that there was unexpected bevhaior that was noticed.
  date: 2015-05-22
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This was related to the core CSS implementation in the Blink project
  name: blink/core
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit:
    note:
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The core CSS implementation was constantly being tweaked and updated as issues popped up, but there was no major events that took place located to resource fetching for fonts - Once the issue was found, it was simply fixed by always using CORS even for same-origin requests
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: The mistake was in assuming that because it was a same-origin request, CORS did not need to apply, which allowed for the vulnerability to be exploited
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
  The mistake was in the assumption that a same-origin request would stay on the
  same origin and therefore CORS would not be needed.  It is safer to just apply
  CORS to any request due to the fact that there could be redirects.  After being
  made aware of the issue, it was a simple fix, and there are not many exploits possible
  with such a vulnerability - still, the lesson of not trusting input holds true.

  This is a conscious design choice to make the optimization of leaving out CORS
  on same-origin requests which was not completely thought through as this exploit
  took advantage of the assumption that same-origin requests would stay on the
  same origin as it originated.
