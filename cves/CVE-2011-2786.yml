---
CVE: CVE-2011-2786
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 451
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true 
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-08-02 20:55:01.863000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |

  The pop-up screen for speech-input-bubble in google chrome can be moved out of the 
  screen. Google Chrome fails to ensure that the screen is shown on the product's screen. 
  This might make it easier for the remote attackers to make audio recordings via a crafted
  web page containing an INPUT element. 

  Web page can start speech recognition whenever user clicks anything on web page. 
  The problem is that Chromium relies on a popup showing that recognition is started. 
  That popup can be moved to be outside the screen. With the use of this ability, the 
  attacker could use this  as a platform for phising attacks. For instance, if the attacker 
  can cause the UI to display erroneous data, or to otherwise convince the user to 
  display information that appears to come from a trusted source, then the attacker
  could trick the user into performing the wrong action. Hence, causing the source,
  the original window - to be obscured or spoofed. 

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 7346022
- 7187008
bugs:
- 84600
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 90e7e1e5afd58e5042bc7431c072f9d4bb497621
  :note: 'This is the fianl fix for this vulnerability'
vccs: 
- commit: 210399f6f7eddbe934e8eaef79277d96fccb2e51
  note: 'They realized that it could be null if tab or display rect were invalid but just returned instead of checking'
- commit: 5d3d79f7593f6b709c9df9e156110770a400e981
  note: 'They were working on a fix for something else at the time.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There weren't unit tests involved in the code but they did some regression
    testing after the fix. 
  code: false
  fix: true 
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    based on the bug report, the vulnerability was found by a regular user as 
    he was playing around with the speech-input-bubble dialog and reported it 
    to the chromium dev team
  date: 2011-06-01
  automated: false
  google: false 
  contest: false  
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The vulnerability was in speech controller class
  name: speech
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 82a25e9eb5eeb5d004e868c22a83ce87eba79890
    note: they are working on the update job interestingly 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: Could not find any major events to note 
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      I think this principle would apply here since they forgot to account for the case 
      where speech input bubble popup could be moved out of the screen.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true 
    note: |
      The product does not validate or incorrectly validates input that can affect the control flow or data 
      flow of a program. Hence, allowing for potential spoofing and obscurity
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This really seems to be a mix of requirements and a design issue, the engineers 
    clearly didn't think about enough cases and requirements on the ability of the 
    speech-input-bubble whether it could be dragged outside the window. The did not have 
    a complete test plan. The actual fix wasn't that complicated and involved just adding
    more checks. 