---
CVE: CVE-2014-1702
CWE: CWE-416
announced: 2014-03-16 10:06:45.380000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability is of the free after use nature. When a task is running on a thread,
  and that task ends the thread is being shutdown. This vulnerability could allow an
  attacker to creat an denial of service. They leverage the improper handling of how
  these threads are terminated. 
bounty: 
  date: 2014-03-11 11:00:00.000000000 -04:00
  amount: $1000.0
  references:
  - http://chromereleases.googleblog.com/2014/03/stable-channel-update_11.html
reviews:
- 183093002
- 187923008
- 187623004
bugs:
- 333058
repo: https://src.chromium.org/viewvc/blink/trunk/Source/modules/webdatabase/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: e6e535be7e2d398058f1292f026e07252b3cd214
  note: They were working on a fix for something else at the time.
vccs: [52f9e0e38c0d5997f34327741b1e9df83896f6aa]
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For the code answer below look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.
    For the fix answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesnt happen again.
  answer: |
    The original code was not united tested and neither is the fix. The
    reason for this seems to be that it is difficult to unit test errors in the
    shutdown of threads. 
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: | 
    This bug was discovered by therealh...@gmail.com. The bug was hard to
    reproduce. ClusterFuzz and ASan were used to discover and reproduce this bug.  
  date: 2014-01-09
  automated: true
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This file is part of the Blink Storage webdatabase subsystem.
  name: webdatabase
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 8405686e41b020a757f63703c402baaf4d1f6dd7
    note: This commit is interesting because it is fixing another bug 328393 which is a problem with ThreadSanitization for database threads. 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?
    The event doesnt need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: 
  events: |
    At this time in the project there seemed to be other bugs related to threading
    within webdatabase. Most notible The database thread was referencing itself, and was not
    empting the desctructor queue.
    name: Thread Bugs 323858 323858 301515
    date: 2013-11-28
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note: 
  least_privilege:
    applies: false
    note: 
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: false
    note: 
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: true
    note: |
      You arent going to need it seems to fit this vulnerability. This vulnerability was 
      created out of not thinking in detail and planning how to properly terminate and 
      free threads at the end of their lifecycle. This would most likely have been left
      untouched until it was discovered. 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This appears to be a code mistake. There was only one line of code in one file
    that caused this vulnerability. This leads me to belive that this was simple a 
    function that a programmer overlooked. They use the mitigation of setting pointers
    to null once they are freed. This prevents attackers from gaining accesss through
    improper termination of a terminating thread in the clean up process. 
