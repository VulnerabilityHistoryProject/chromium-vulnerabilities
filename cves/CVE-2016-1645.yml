---
CVE: CVE-2016-1645
Nickname: Yngwie Malformed PDF
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 130
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-03-13 18:59:05.060000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Attackers could write the metadata for an image, or the information that makes up the image, in such a way that when  it was read in certain programs or 
  tools, it had the potential to create Denial of Service attacks which would crash applications or machines. Google used this library to interpret and render the images inside of PDF for viewing,
  in addition to getting the metadata for things like image tags for describing the photos, and alt-text for screen-readers and accessibility settings.  
  The crash was caused by incorrectly converting integers to other types or from negative-to-positive, and would result in "integer signdness errors". 
  These errors could lead to out-of-bounds index writing, where the attacker could inject or execute code where they're not supposed to be able to, or number casting
  errors, which could violate the integrity of the data. 
  This vulnerability was a problem for its potential to affect the Availability of systems and the integrity of the data. 
  The solution was to upgrade to r3002 of OpenJPEG, which based on intuition and reasoning, added checks for the data to ensure it did not run over. 

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 1728813002
- 1756483002
bugs:
- 587227
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: ccd9ced49ea66f31b1d3d9dd07f4438fa94db328
  :note: 'Added a check for overflows'
- :commit: 7045ee0a8b4b19d298c67556ee0b92cd575e1303
  :note: 'Roll PDFium e4ac336..28de044'
- :commit: c0d7afe15c0e88886582a357a4e2fb797ac8a820
  :note: 'Part of a separate repo for OpenJPG'
  :note: 'Allegedly fixed the offset computations in the method, which should solve the out-of-bounds errors.'
vccs: 
- :commit: ec0fe091380c2de75584fdfc3d914eee5b89e731
  :notes: 'This is the oldest place I could find this function referenced. At the location, the creator creates a static image reading method, which may have caused the issue.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 18
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    It does not appear that the original code contained unit tests, nor did the fix add any unit tests in the file or as a separate file. The only file
    changed was the j2k.c file, and that was changing functions, pointers, and how it handled overflows and buffer sizing. 
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The vulnerability was found by ZeroDayInitative working with an anonymous contributor. ZDI replicated this bug on Windows 8.1 with Google Chrome 50,
    They listed out the different components, such as the metadata and the picture. They were able to crash the sandboxxed Chrome. 
    It appears they originally found the problem on 14 Jan 2016, but released the report 16 Feb 2016.
  date: 2016-01-14
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on the source code directory names and the git blame hierarchy listing
  name: OpenJPEG
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: 1fb24aba4b29b7cd1b6880d8f0b08196a12efc2c
    note: |
      I found this commit particularly interesting because it doesn't attempt to do any unit testing, or verify if it works. The commit was undone by someone else shortly after,
      most likely because that commit was not successful. This is interesting because it was clear that the fix did not work, and it appears it took manual testing
      to verify, as no unit test file was committed. It would seem prudent to create one when fixing a vulnerability that previously had no unit tests.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any changes to the team or to surrounding subsystems in my research that would indicate any inherent problems.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The vulnerability was the result of the input being given as an image in a PDF file, with the metadata causing a buffer overflow because the system was not expecting certain values.
      If they had validated their input and been highly distrustful, they likely could have avoided this problem. 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    There was a combination of design mistakes, coding mistakes, and either laziness or constraints.

    First, the team did not account for buffer overflows when they originally coded the method. This could have been avoided with 
    input sanitization, and checking the input to handle any potential out-of-bounds problems. 

    On top of failing to handle the problem originally, they did not write any unit tests to attempt to catch the problem before it happened. 
    It is possible that even with unit testing, they could not have caught this, but no tests were written period. Not at the VCC, and not at the fix.
    There were 4-5 commits between the VCC and the fix, which would make it seem like writing test cases would be a good idea, as so many others had failed to fix 
    it previously. 

    If the team had set up the method in such a way that it validated inputs and properly handled or expected buffer overflows, then this problem might have been avoided
    from the start. I am sure there were some difficulties though, as it appears that OpenJPEG is just a library that Chromium uses, so they were not necessarily testing
    or intending its use for the things that Google eventually utilized it for
          
