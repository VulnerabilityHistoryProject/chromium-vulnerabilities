---
CVE: CVE-2010-4008
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 228
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2010-11-16 20:00:02.963000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description,  but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  An invalid memory access flaw was found in libxml2, a library providing
  support to read, modify and write XML and HTML files. A remote attacker could
  provide a specially crafted XML file that, when processed by an application using libxml2,
  would lead to an read at an invalid memory address, causing an application
  crash (denial of service).
   read XPath expressions (a method used to navigate through elements and
  attributes in an XML file), an attacker could craft an XML document with
  malformed XPaths that would cause an application crash.

  This is due to the way libxml2 reads XPath expressions, which are a method t navigate
  through elements of an XML file. As libxml2 parses XML, it creates "contexts" (looks
  to be similar concept as scope) as it goes through the tree structure. The XPath most likely
  cause a reference to an invalid or null context, resulting in an invalid memory access.

  This could be done by creating an XML file that forces the parser to attempt to
  read from an invalid memory location, leading to a crash. This is the example
  given by the reporter of the vulnerability.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2010-11-04 11:31:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2010/11/stable-channel-update.html
reviews:
- 4002004
- 4032005
- 4021005
- 4054006
- 3839002
- 3712004
- 4027006
bugs:
- 58731
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: fe62fc852bd3c1c162ee1f41992096f59387dc31
  :note: They were pulling in the XPath fix from upstream
- :commit: a44b00c88bc5ea35b5b150217c5fd6e4ce168e58
  :note: Applying pulled in fix from above commit
- :commit: 91d19754d46acd4a639a8b9e31f50f31c78f8c9c
  :note: This commit was on the libxml2 project site where they included a fix
vccs:
- :commit: 584cd5cbd7be997400ccb8db24ae5410b0b88117
  :note: |
    It appears that the vulnerability was in the code when the file was created.
- :commit: a850e9592bb1a8c43275116ff565c91b4b1cb66b
  :note: |
    On July 16, 2010 libxml was updated to 2.7.7, which could have possibly
    introduced the vulnerability.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    From looking at the CVE bug report comments and surrounding code, there is a
    testXPath.c file that contains tests. However, this file was not updated when the
    bug was fixed, implying that there are no added test cases for this vulnerability.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The original reporter was a third party security researcher, most likely looking
    for this vulnerability or one similar to it.
  date: 2010-10-11
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the description in the CVE, libxml is an external dependency, included in the "third_pary" section of Chromium.
  name: libxml
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: a850e9592bb1a8c43275116ff565c91b4b1cb66b
    note: |
      libxml was updated to 2.7.7, which, as I mentioned above, could possibly have
      introduced the vulnerability. However, I am not sure as the changes from both
      the update an the fix do not appear to overlap in code.
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events during this time
  events:
  - name: libxml was updated to 2.7.7
    date: 2010-07-16
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      In the bug report, the reported provides an email attachment (.xml file) that
      causes the crash. Now this isn't the typical input such as a form, but it
      is an input to the system that wasn't properly checked/handled, allowing
      for the vulnerability to be introduced.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The vulnerability was caused due to a crafted xml document (No wonder Meneely hates them)
      that was improperly handled due to its complexity.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The mistake that was made was trusting that if an xml node were null/not null that it would
    be correctly formatted (depending on the situation). Because of this there wasn't an extra
    check to ensure that the node contained the correct information in it (i.e. not malicious/malformed).
    The fix here appears to be proper as it now checks that the xml nodes are of the correct
    type before returning on them or performing extra checks. Additionally, due to this happening
    when an XPath was being processed, additional validation of the nodes should have been performed.

    While the file involved with the vulnerability had a related test file, this was not discovered
    by testing. Additionally, the related test file was not updated to include specific tests for
    this vulnerability, which is most likely an oversight by the dev(s) working on it. Possibly adding
    a fuzzer for different XPaths or XML structures could have been implemented to help find/prevent
    vulnerabilities like this.
