---
CVE: CVE-2011-2849
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 476
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2011-09-19 08:02:56.027000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The webSockets implementation in Chromium had a vulnerability due to the
  referencing of a NULL pointer. When a browser tab was closed it would make
  the current web socket null, however, if the tab still had stacked sending jobs
  (SendPending) it would attempt to reference the NULL socket pointer resulting
  in the browser crashing. This vulnerability could have been used to cause a
  denial of service attack.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date:
  amount:
  references: []
reviews:
- 7488007
- 7491006
bugs:
- 89795
repo: https://chromium.googlesource.com/chromium/src
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 1af98311311da240d20bdfa71bbe5908d2deaf3b
  :note: checks for socket_ is not NULL and State_ closed
- :commit: 5dc90e57abcc7f0489e7ae09a3e687e9c6f4fad5
  :note: |
    makes use of ScopedRunnableMethodFactory and don't post multiple
     SendPending's
vccs:
- :commit: 6a2c3677f12c18bcc1b57c37becd4e1149f0c8e4
  :note: Added support for Httponly cookies on web socket
- :commit: 3985966ad82dc8ac7094698bc1e598a6d072c93e
  :note: factor out websocket frame handler
- :commit: 80b8161e79ed4ec189592203b072002188044e08
  :note: adds support for protocol switch to SPDY
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 1
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There were tests in place before the vulnerability was discovered but none
    existed that tested for this particular bug and none were added as a result
    of the vulnerability.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Arthur Gerkis (ax3...@gmail.com) discovered and posted this
    vulnerability. He included a means to reproduce the issue as well as the
    mini-dump the bug caused.
  date: 2011-06-19
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the description in the CVE and blog post.
  name: websockets
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 1d8a3d1fe0e07d5aaf1f0a5527097b9e313d23b6
    note: |
      A large section of code was removed and moved. Nothing explicitly
      mentioned regarding sockets but was significant code-wise.
  - commit:
    note:
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not see any major events at this time
  events:
  - name:
    date:
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The coding mistake was an edge case in which closing a tab would destroy
    the websocket but the WebSocketJob would continue sending multiple sending
    jobs. This resulted in the use of a NULL pointer which could cause a denial
    of service.

    This mistake came about as a result of three commits from two individuals.
    The first of these commits added the majority of the code which had this
    vulnerability and the vulnerability was likely due to the developer not
    thinking about this edge case. Since he didn't anticipate the issue, the
    other individual working on the code didn't notice it, and the automated
    unit tests didn't catch it, the bug slipped through. In the future more
    vigorous test likely could have caught the bug. Being more familiar with the
    use and intricacies of using websockets would aid in preventing the mistake.

    The Chromium team uses the Modern Code Review (MCR) process whose
    effectiveness has come under question in recent years. Both of the original
    authors of the VCCs have many code reviews during the time between when the
    bug was introduced and was fixed, some of which were on the code base
    containing the vulnerability. This again brings into question either the
    effectiveness of MCR or the effectiveness of the reviewers.

    Source: http://ieeexplore.ieee.org/document/7781793/
