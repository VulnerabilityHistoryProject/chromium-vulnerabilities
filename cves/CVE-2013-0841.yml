---
CVE: CVE-2013-0841
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 129
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-01-24 16:55:05.557000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The parameter variable used to index an array is never validated within the 
  function, and an invalid value could cause an array index error. This error 
  enables remote attackers to at least cause a denial of service, if not other 
  unknown consequences as well. 
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 11880032
- 11885026
- 11875013
bugs:
- 169770
repo: https://src.chromium.org/viewvc/chrome/trunk/src/chrome/browser/content_settings/?pathrev=176687
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 85f2fcc7b577362dd1def5895d60ea70d6e6b8d0
  :note: ''
vccs:
- :commit: 9fb83e856fc12168151094df31e57177e4844417
  :note: 'Jul 2, 2010 The vulnerability was introduced when the file was initially added.'
- :commit: 55126134af52fe0f6a426f0f7ccfeeb8cf2c9f28
  :note: 'Aug 19, 2010 New parameter and check added to function but no change to vulnerability.'
- :commit: a495859987b081c6cec74102e5b194d48e124d2e
  :note: 'Oct 13, 2011 The function was altered but not to fix the vulnerability.'
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There were automated unit tests for this module. When the file with the
    vulnerability was added, there was an associated unit test file as well. 
    This file was updated a few times but not in response to the vulnerability
    fix.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was discovered by scarybea...@gmail.com. While their last
    visit was months ago, they were especially active in the community in 2015.
    There is little discussion as to how they discovered the vulnerability.
  date: 2013-01-14
  automated: 
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the description in the CVE
  name: content_settings
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 55126134af52fe0f6a426f0f7ccfeeb8cf2c9f28
    note: |
      The developer added a parameter to the OnContentBlocked function, as well
      as a check associated with that parameter. They made sure the parameter, a
      resource identifier string, was not empty before using it to add a blocked 
      resource. However, they did not catch that the one existing parameter in 
      the OnContentBlocked function, a ContentSettingsType, was going unchecked 
      and then being used as an array index. 
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: No major events.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The input was trusted with no validation or checks, and it could have 
      been exploited. 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I believe the vulnerability arose from a coding mistake. In the same file,
    an array is indexed in the same way, but the proper checks were there from 
    the start. Clearly the developers were aware of needing to check the 
    variable before using it as an array index, so its absense must have been
    a coding mistake. 

    The developer who added the file, jochen@chromium.org, was also the main 
    reviewer of the second VCC commit. This most likely contributed to the 
    vulnerabilty persisting.

    The third VCC was approved by marja@chromium.org, who also had 8 of their
    own commits to the file containing the vulnerability. I believe the 
    reviewers were doing their best but were too familiar with the code to go
    back and notice the little slip of not checking the variable. 

    The CWE entry has a mitigation for the implementation phase which is input 
    validation, which is the strategy that was used to fix this vulnerability.
