---
CVE: CVE-2010-1230
CWE: 200
announced: 2010-04-01 18:30:00.563000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |  
  It turns out that it is possible to track users using the Strict Transport
  Security feature. If done properly, a user can be redirected multiple times, with each
  redirect giving the site one-bit of information on the user. Eventually, with enough
  time nad visits, the site can map the visits to a specific user. This is a breach
  of privacy. The mitigations for the vulnerability are described as being performed
  by the user when they clear their cookies and/or browsing data. This prevents the site
  from tracking them based upon STS.
  For a better description of the STS issue, refer to....
  https://bugs.chromium.org/p/chromium/issues/detail?id=33445.
bounty:
  date: 
  amount:
  references:
reviews:
- 652122
- 652035
- 594002
- 570032
- 600104
bugs:
- 30801
- 33445
- 34633
repo: https://chromium.googlesource.com/chromium/src/+/
fixes:
- commit: 2b0ec8bb8b1d5e113ad072b27c3f157d985c6b21
  note: Ask renderers to immedediately close all DB handles to a database file when the file needs to be deleted.
- commit: 64beb97b80a59af6da0e21756b44f63ec728dbf2
  note: Actually delete databases in CookiesTreeModel.
- commit: 8af4df6bc98ecfb0d742008e5799997ef507a416
  note: Backport ability for users to clear their transport security metadata.
vccs:
  - commit: 8af4df6bc98ecfb0d742008e5799997ef507a416
    note: Backport ability for users to clear their transport security metadata.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you will add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the code answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the fix answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this does not happen again.
  answer: |

     No it was not unit tested. ALl tests for all three revisions / commits are
     maunal tests with specific description. The bugs were found by users manuall testing,
     not by automated testers.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in answer, fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it is clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    
    Developer scarybea...@gmail.com filed a bug report (30801) stating that the
    Clear Browsing Data dialog is missing an option for clearing local storage
    and web databases. This could possibly allow a user to be tracked by persistent state.

    It seems that he, and other users who discovered this issue, found it manually.
    
    scarybea... also commented on the other linked issue / bug report (33445) around the
    same time which dealt with STS (Strict Transport Security) state. This one was part of
    a contest.

    They were solved in the same patch.
    
  date: 2009-12-18
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |  
     Mistake was spread across multiple subsystems.
     Multiple different ones. Looking at the filepaths I see...
     chrome/browser/renderer_host/
     chrome/common/
     chrom/database/
     webkit/database/
     webkit/tools/test_shell/
     With a much heavier emphasis on code from webkit/database and chrome/browser.
  name: user settings?
interesting_commits: |
  question: |
  Are there any interesting commits between your VCC(s) and fix(es)?

  Write a brief (under 100 words) description of why you think this commit was
  interesting in light of the lessons learned from this vulnerability. Any
  emerging themes?

  I have not found any as of yet. After reading through the commits for every final
  revision, I have not seen anything out of the ordinary or exceptional. Pretty
  simple fixes all. Just adding UI options and making sure that the STS and all
  extraneous data is cleared when a user clears their cookies / browsing data.
    
  commits:
  - commit: 1729e3c0ddf0c7a0f912ef38355d38afe284bf04 
    note: This is not a commit in this project. Just a placeholder so that the build tests function.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event does not need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The only major events that I see are the announcement of the bug, the replications of / tie-ins to the original report, and the closing of the issues.
  events:
  - name: Proposition of issue by white hat.
    date: Dec 18 2009
  - name: Project member adds bug regarding html5 databases in browsing data remover.
    date: Feb 4 2010
  - name: Fixed in r38911
    date: Feb 12 2010
  - name: project member bug is fixed so that databases can be deleted.
    date: Feb 18 2010
  - name: STS design security question proposed
    date: Jan 28 2010
  - name: Released fix for all three issues publicly in 4.1.249.1036
    date: Mar 23 2010
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave applies blank or put false if you did not see that lesson (you do
    not need to put a reason). Put true if you feel the lesson applies and put
    a quick explanation of how it applies.

    Do not feel the need to claim that ALL of these apply, but it is pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  - defense_in_depth: false
    applies: 
    note: 
  - least_privilege: false
    applies: 
    note: 
  frameworks_are_optional: false
    applies: 
    note: 
  native_wrappers: false
    applies: 
    note: 
  distrust_input: false
    applies: 
    note: 
  security_by_obscurity: false
    applies: 
    note: 
  serial_killer: false
    applies: 
    note: 
  environment_variables: false
    applies: 
    note: 
  secure_by_default: false
    applies: 
    note: 
  yagni: false
    applies: 
    note: 
  complex_inputs: false
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Do not feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |

    The only mistake that I found was the fact that they mentioned that they were had
    planned to delete the STS state when a user asked to clear their cookies, but they
    apparently never got around to it according to abarth@chromium.org. No further
    explanation was given. So my best guess at a mistake is not keeping accurate track
    of their work. The first bug report relates directly to the second one, so I cannot
    conclude any serious security mistakes were made besides people just forgetting.
  
    This seems proper for the CWE entry. The mitigations are not really taken into account.
    What they did to fix it is basically throw it on the users shoulders to clear their
    cookies / browsing data. This does not technically fix the problem completely (as some)
    users are unaware of the possible issues here, but it gives us the tools to prevent
    the issue.

    To me it seems that the fix for the bug is insufficient. They mention the choice
    between privacy and security for the user in the second bug report. They suggest that
    STS might be outdated, insecure, or a combination of the two and that we should possibly
    try to think of an alternative so the onus is not on the user to make a choice or
    know how to minimize the vulnerability.

