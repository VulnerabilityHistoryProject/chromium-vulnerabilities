---
CVE: CVE-2014-3169
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 459
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-08-26 21:55:05.400000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A piece of data in core/dom/ContainerNode.cpp, which is used in Chromes blink web engine, 
  could allow remote attackers to cause a denial of service under certain conditions 
  as well as have other effects by messing with script execution before the node removal. This
  file is used as a part of Blink's Domain Object Model, which incorperates the brower's logic when
  storing amd displaying HTML/CSS.

  The team never really seemed to pinpoint the actual issue here. They only pinpointed the
  solution it seems. That is, they never were able to reproduce the actual bug.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2014-08-26 10:00:00.000000000 -04:00
  amount: 2000.0
  references:
  - http://chromereleases.googleblog.com/2014/08/stable-channel-update_26.html
reviews:
- 418133003
- 465593003
bugs:
- 387389
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 8ab43b75fe8656338d1647fe954b03204adf3c13
  :note: |
    This is the actual fix commit. Looks like the fix was non-satisfactory based on the comments. It 
    modifies the times in which an object is modified so that the insertedTo/removedFrom 
    methods are called before childrenChanged. This removes the use-after-free.
- :commit: ebab27e4fe728206d3be9a54fd66ca99de12a298
  :note: |
    This was technically the commit that fixed it; however, it was reverted due to it breaking some tests. It performs the
    same fix as commit 8ab43b75fe8656338d1647fe954b03204adf3c13.
vccs: 
- :commit: 0acc1920e1f74e6405f674d76b947e22d66cb3e0
  :note: |
    This is as close as it gets to being the commit that caused the issue - it reverted a commit that would have prevented
    the vulnerability. The reverted commit however was a part of a separate unrelated bug fix. I suspect that the developer
    fixed the issue while fixing another bug, but then had to revert this commit because his/her whole release was reverted.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Yes. There were tests that caused the original fix commit to be reverted. It doesn't appear that the
    original code was unit tested though. It also doesn't look like they added any more - this is sort of expected
    since they never pinpointed the vulnerability.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Looks like this was reported by a Chromium user outside of Google. It was submitted to Google's bug
    repository as a security issue.
  date: 2014-06-21
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on bug report
  name: Blink
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: c023a5b0e4f5b5bbeabc5fc6859df6856d0f1974
    note: |
      This one was interesting as it was a Samsung employee who edited the faulty lines
      but did not fix the issue.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: None that I can see, little to no modification between vulnerability found and fix.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: true
    note: |
      This bug gives attackers more privilage than appropriate by allowing them to
      use memory after it is freed. This could potentially expose sensitive data.
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: 
    note: 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    As I said above, its hard to discern what actually caused the issue since 
    they never really pinpointed where the actual bug was. This was a simple coding mistake
    though, one that likely could have been avoided with proper unit testing. However, it 
    did provide a useful enough error message that it was able to be fixed.

    I think the biggest issue here would be that it seems like this bug was identified beforehand,
    but was not inserted into the proper workflow to get it fixed and so it never was. This bug could
    have potentially never been found had the fix been submitted as separate issue when it was originally found.
