---
CVE: CVE-2016-5144
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 79
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-08-07 15:59:08.847000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  There is a vulnerability with Chrome DevTools. Previously, when a url was 
  passed in to a function and the function attempted to sanitize the url,
  the sanitization algorithm was insufficient. This allowed attackers to bypass
  access restrictions and inject arbitrary HTML tags into the page. The bug allowed
  chrome extensions such as Google Tone to be used to execute Cross-Site Scripting attacks
  through the 'chrome-devtool://' URLs.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-08-03 14:54:00.000000000 -04:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/08/stable-channel-update-for-desktop.html
reviews:
- 2179623002
- 2065823004
bugs:
- 618333
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 554517a4587bfb0071bcd3c7eff6645a0b06d72a
  :note: ''
vccs: 
- :commit: c5eecf67fd8d5e8d24d2d4d9489753d2c8cf6c59
  :note: |
    This commit attempted to sanitize the remoteFrontendUrl, but it did a poor
    job by just checking that the url had the correct prefix. It allowed HTML
    tags to be inserted in the URL.
- :commit: e8ecfb59d4f906e0ab40b6046406b8af1366cb10
  :note: |
    This commit claimed to whitelist remoteBase, but it only checked that the URL
    started with a prefix. Again this allowed HTML tags to be inserted in the URL.
    (Same author for c5eecf67)
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The bug report and code do not suggest the presence of any unit tests that
    were involved with this vulnerability, nor were there any testing changes that
    resulted from this bug.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability was found by a non-Google person. After looking at the attempted
    sanitization, this user found that the fix was not sufficient. He verified that HTML 
    tags could be injected into the page through the URL.
  date: 2016-06-08
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    It says in the CVE, bug report, and fixing commit that the subsystem is Developer
    Tools (DevTools).
  name: Developer Tools
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 72c30193f0804fff83ed73d92db7d5fc5df6b186
    note: |
      There was a bug that caused an error to occur when files were encoded with
      UTF8 with BOM, but it worked without BOM. This was fixed by encoding to base64
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There were not many major events during this time that I came across.
  events:
  - name: Chrome Canary now runs both ES6 and ES7
    date: 2016-04-29
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      The VCC author automatically trusted input, which is what lead to the
      vulnerability.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: true
    note: |
      This vulnerability required preventing users from using complex inputs.
      The simple sanitization wasn't enough, and the input had to be whitelisted
      through a regular expression.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The coding mistake was a failure to properly sanitize inputs. The VCC author
    didn't think about different inputs when he wrote his sanitization functions.
    
    The vulnerability was introduced in two commits by the same author. He wrote a
    sanitization function, but all that it check was that the url had a certain prefix.
    He failed to realise that HTML tags could be injected into the site because
    the input was not whitelisted. This essentially allowed malicious javascript code
    to be inserted on a user's page through the url (XSS). He should have thought
    more about potential url inputs.
