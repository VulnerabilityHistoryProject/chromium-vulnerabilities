---
CVE: CVE-2009-3934
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-601
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2009-09-17
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A function in the WebFrameLoaderClient allowed for remote attackers to cause a
  denial of service from a page-local link. A page-local link is a link that
  redirects back to the same page when interacted with. This is directly related to an
  "empty redirect chain" which allows attackers to endlessly redirect urls. For
  this vulnerability to be taken advantage of, the attackers abused the page-local
  link which would redirect back to itself endlessly.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date:
  amount:
  references: []
reviews:
- 13030006
- 12617010
- 355005
- 326015
- 14414003
bugs:
- 22205
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 2eff16b382860246f51b157e06dca50cb7e12db9
  note: |
    Reverted to previous changes because server-side problems were being
    caused where sync was unavailable.
- commit: 5bd97204ef6dfa26357cf128d8fbcab84fca42f0
  note: |
    The first attempt at fixing the WebFrameLoaderClient so that there
    couldn't be an empty redirect chain.
vccs:
- commit: 31f4c7e11012ba7364ce5f84f9943523312f82a5
  note: |
    Attempted refactoring so that the WebFrameLoaderClient could properly
    communicate back to the WebPlugin upon completion of the frame load. The
    refactoring introduced a vulnerability where the logic "ds->hasRedirectChain()"
    was always assumed to be true.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The original code was unit tested as evidenced in the blog, where a summary
    of the data, a crash trace, and list of modules used was uploaded. Looking at
    the code changed in the commits, there were also changes made to unit testing
    files.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was discovered through unit testing that was run on the
    WebFrameLoaderClient code. A crash was discovered and notified the developers
    in charge.
  date: 2009-09-17
  automated: true
  google: true
  contest:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Based on the blog post and the CVE description
  name: WebKit
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 6069da8c96bc6b4c1d04b838408bf1b7b125dc6a
    note: |
      This was interesting because they made a change with the WebFrameLoader
      so that it was no longer dependent on the net/ module. They also made some
      minor changes to other existing WebFrameLoader methods to make sure that
      they all had a WebFrame pointer.
  - commit: 7e45de83658f59c24998c37bf252792dfb31eb43
    note: |
      In this commit, types in the WebFrameLoaderClientImpl were converted
      in preparation for the class to be moved. The class was being moved into the
      implementation of the WebKit API.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: The code within the WebKit subsystem was refactored prior to the discovery of the vulnerability.
  events:
  - name: Code Refactoring
    date: 2009-08-27
  - name:
    date:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      There was no other line of defense set in place to prevent users from
      redirecting to as many urls as they want.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      This vulnerability allowed users to consistently redirect urls to
      cause a denial of service. The users were able to exploit the page-local
      link to cause this to happen. In this case the user input was trusted, when
      it should've been distrusted.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    A coding mistake was at fault for the cause of this vulnerability. There was
    a piece of logic "ds->hasRedirectChain()" that was always assumed to exist
    in the vcc. By not checking to see if the logic existed, it allowed attackers
    to take advantage of a denial of service vulnerability by redirectly urls
    without a limit.

    Essentially only a single line of code was missing to fix the vulnerability.
    Before running through the logic, an if statement was required to make sure
    that "ds->hasRedirectChain()"" existed before continuing on with the logic.
