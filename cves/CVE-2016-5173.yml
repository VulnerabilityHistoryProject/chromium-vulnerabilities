---
CVE: CVE-2016-5173

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [284]

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-09-25

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  In a regular webpage using Chromium and standard JavaScript, a remote attacker
  is able to modify and add functionality to JavaScript's core Object.prototype,
  the default prototype that all JS objects inherit properties and methods from.

  Modifying Object.prototype is normally not an issue, but Chromium's extensions
  subsystem also adds functionality to the Object prototype and does not restrict
  access to it. This is a concern because Chromium's extensions subsystem has access
  to lots of resources not intended to be invoked or loaded in to a client webpage.
  An attacker's webpage (or otherwise executed JavaScript) can exploit this by
  loading in additional Chromium extensions resources allowing them to do things
  such as modifying what happens when objects are garbage-collected, executing
  native functions that typically require user interaction without their
  interaction, and otherwise calling native functions with attacker-controlled data.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-09-13
  amount: 3000.0
  references:
    - http://chromereleases.googleblog.com/2016/09/stable-channel-update-for-desktop_13.html
reviews:
  - 1840453002
bugs:
  - 468931
repo: chromium

fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
  - :commit: 180e7e74926ea32ac039821926542452d1201c5e
    :note: |
      A grand total of 50 files were changed to modify how property bindings
      are set onto the exports object. They were all fixed at once in exactly
      the same way, properly restricting access to the Object prototype.
vccs:
  - :commit: b6aad81cbc7da20aef100f6db97de1cd36e7509b
    :note: |
      In this commit, they were trying to make the Object's propery bindings
      "lazy evaluated" so that unnecessary JS code isn't executed every time
      a page reloads, implemented by directly adding the properties to the
      exports object.

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Unit tests were initially written for this code but were not updated when
    the vulnerability was fixed.
  code: true
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    An anonymous user reported the vulnerability in Chromium's official bug pages.
    It seems as though it found by hand, as the user lists a few example exploits
    they've tried out as well as the versions of Chromium they tried it  with.
    They also provide working code samples for people to test out and reproduce
    their findings. This was confirmed and discussions went back and forth in that
    bug page's thread talking about the implications of this vulnerability and 
    possible fixes.
  date: 2015-03-19
  automated: false
  google: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: chrome/renderer/resources/extensions
  name: extensions

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer: |
    Nothing very interesting or pertinent to this vulnerability came up between
    the VCC and the fix. Between the two, various other parts of these files were
    updated for unrelated reasons, but the lines of code involved with the 
    vulnerability remained unchanged from their inception in 2012 until the fix
    in 2015. Although, I did find it interesting that the purpose behind the VCC
    in the first place was performance improvements (via lazy loading) because
    the desire for better performance introduced this new vulnerability.
  commits:
    - commit:
      note:
    - commit:
      note:

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I didn't come across any major events around this time.
  events:
    - name:
      date:
    - name:
      date:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: |
      The vulnerability centers around the user (or attacker, in this case)
      abusing components of Chromium's extensions subsystem. In this instance,
      Chromium developers did not account for, or prevent, the user modifying
      the Object.prototype and overriding Chromium's own functionality. While
      this is unlikely for the user to do accidentally, in a "misuse case", it
      can definitely be done if an attacker is doing so intentionally.
  yagni:
    applies: true
    note: |
      While the developers initially "kept it simple" in their implementation of
      simply setting Object.prototype bindings directly, this inadvertently 
      provided "too much functionality" that an attacker can take advantage of.
      The fix ultimately involved restricting this functionality.
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistake here was a design mistake. The developers used a standard
    JavaScript implementation of directly binding properties to an object
    prototype and so the vulnerability wasn't obvious. The main concern comes
    from the fact that this code is in Chromium's extensions subsystem and has
    access to many internal never-to-be-exposed resources and native functions.
    JavaScript at its core is notoriously lax and doesn't do any kind of access
    control by default on modifying object prototypes. As a result, an attacker
    in this scenario is able to simply modify the base "Object.prototype" to
    add their own functionality and carry out their exploit. The main takeaway
    from all of this is to expect attackers to abuse the tools you give them.
    Accounting for this and understanding more about how JavaScript works is
    key to preventing something like this from happening again in the future.
    In this case they solved this in all 50 files with better design, by
    extracting out a new function to do the required property binding safely
    instead of directly adding them to the Object prototype.
