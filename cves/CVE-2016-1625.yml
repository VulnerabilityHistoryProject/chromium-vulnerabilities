---
CVE: CVE-2016-1625
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 264
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-02-13 21:59:03.130000000 -05:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "Due to a lack of checking against intended target web addresses, malicious
  \nextensions are capable of changing where suggested links brought users when \nclicked
  on. This allows extensions to navigate users to malicious websites, \nor run Flash
  programs on the host device. Remote attackers could then use \nthis to grab any
  file from the host device.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 2016-02-09 14:32:00.000000000 -05:00
  amount: 1000.0
  references:
  - http://chromereleases.googleblog.com/2016/02/stable-channel-update_9.html
reviews:
- 1676583002
- 1674303003
- 1669723002
bugs:
- 509313
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: d523a41aed4e321d4c8197b5cccb73be23c8dcc2
  :note: Finally added check to fix issue
vccs:
- :commit: 064f57affdcdbc6b5e85bc1fc2082a5e393ff0af
  :note: initially created during fix for bug 272583
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: "This vulnerability involved a missing check in the code between the actual
    \nlink targets and the expected list of links. There were no tests in place \nbefore
    the fix. Fixing this issue involved adding code to check for this\nand unit tests
    to verify the issue was resolved.\n"
  code: false
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: "This vulnerability was originally brought to light by someone from Google\nthat
    was able to grab the linux/unix password file from a system with a \ncustom extension
    that runs a JS script that forces the download of a Flash\nprogram that when run,
    has access to any file on the host device.\n"
  date: 2015-07-12
  automated: false
  google: true
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Chrome Instant on the New Tab Page
  name: New Tab Page
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: ce767ab228df8ab9ee2664a258380ce9601fc42b
    note: "Added support for forced URLs in the TopSites of Chrome. Allows Chrome
      to force, \nand keep top-sites according to the most recently used metric. Allows
      for certain sites\nto appear on the New Tab Page over other web pages in the
      most-visited list.\nCurrent implementation shows only 8 sites on the NTP, so
      this provides more \ncustomization to those sites.\n"
  - commit: 8d57a0152613119d7e6369838fd5838fb7773e68
    note: |
      Rework of the New Tab Page to remove anything that dealt with an older version of
      the NTP still referenced in the code. This is the second commit of this nature, the
      first one was reverted due to a duplicate performance registration issues on Android.
  - commit: 982ecc2f027bc08255e8dd6a37017b69bde250f7
    note: |
      Experimental code used to test the Most Visited Tiles functionality on the New
      Tab Page is considered obsolete at this point and was removed from the repo.
  - commit: 51bbec7be7014d4d75d39c1a5c27b1ba9ddc3dcd
    note: |
      Involved the movement of the browser's search functionality from a submodule of the
      browser directly, into it's own namespace and module.
      This could have attributed to the length of time this vulnerability sat in the repo.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    It is assumed the team changed within the 3 years this vulnerability was active.
    The New Tab Page and Chrome Instant, were both reworked and semi-componentized
    within this time which could help account for the length of time the vulnerability
    was active.
  events:
  - name: Componentized Search functions, code was moved to another namespace to accommodate
      iOS.
    date: 2015-08-03
  - name: Experimental code dealing with Most Visited Tiles on the NTP was removed
      from Chrome
    date: 2014-07-23
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: "It was assumed that extensions within Chromium were incapable of changing\nthe
      link targets on the New Tab Page. This ability allowed them to direct\nusers
      to any website, or directly download and potentially run a file from \nanother
      URL without further user interaction. Thus, the developers didn't \noriginally
      think to check that the target links given on the NTP should all\nbe in the
      most-visited or suggested link lists to prevent this. The fix was\nto add another
      layer of defense to Chromium where links are only navigated to\nif they are
      within one of those two lists.\n"
  least_privilege:
    applies: true
    note: "Extensions themselves should not be allowed to download and execute code
      on \nuser's computer outside of the Chrome sandbox, however this was possible
      due\nto the insecure nature of Flash applications. The extension was capable
      of\ndownloading and running a Flash application, two things that they shouldn't\ninherently
      be allowed to do. The Flash application, in turn is insecure to \nthe point
      where it allows for access to the host device and any file on it.\n"
  frameworks_are_optional:
    applies: false
    note: 
  native_wrappers:
    applies: false
    note: 
  distrust_input:
    applies: false
    note: 
  security_by_obscurity:
    applies: false
    note: 
  serial_killer:
    applies: false
    note: 
  environment_variables:
    applies: true
    note: "Combining this vulnerability with the intended insecure nature of Flash,
      an \nattacker can create an extension that runs a Flash program to pull anything\noff
      the user's computer, an example given in the bug report was the contents\nof
      '/etc/passwd' on Linux/Unix systems\n"
  secure_by_default:
    applies: false
    note: 
  yagni:
    applies: false
    note: 
  complex_inputs:
    applies: false
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This vulnerability arose from the new functionality added to the NTP,
    where Chromium provides the user their most-visited sites and some suggested
    ones, without checking that the target of the link was the same as the link itself.
    Ultimately, this was a design mistake, because the developers never
    thought that such an attack would be possible, and while no exploit of this
    bug was ever created, it could have had huge consequences if it ever was.
    Additionally, between when the vulnerability was introduced and its fix,
    the subsystem was moved around, allowing the bug to hide longer than normal.
